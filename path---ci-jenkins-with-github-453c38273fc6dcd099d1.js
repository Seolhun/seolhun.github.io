webpackJsonp([0xf8aac2d4077a],{786:function(e,t){e.exports={data:{post:{id:"/Users/hunseol/git/seolhun.github.io/content/posts/2018-03-02--CI-jenkins-with-github/index.md absPath of file >>> MarkdownRemark",html:'<blockquote>\n<p>Continuous Integration doesn’t get rid of bugs, but it does make them dramatically easier to find and remove. - Martin Fowler</p>\n</blockquote>\n<p>CI 툴을 이용한다는 것은 위 인용한 글 처럼, <strong>손 쉽게 버그를 찾고 제거하기 위함일 것입니다.</strong> 이를 위한 CI 과정과 Jenkins 예제코드를 알아보겠습니다.</p>\n<h2>Pre-Requirement</h2>\n<ul>\n<li>\n<p>Ubuntu 16.04</p>\n<ul>\n<li>다른 운영체제도 상관없지만 이번 포스트 내용은 Ubuntu 16.04를 기준으로 작성되었습니다.</li>\n</ul>\n</li>\n<li>Java 8</li>\n<li>Git</li>\n<li>Jenkins</li>\n</ul>\n<h2>Contents</h2>\n<h4>목록</h4>\n<ol>\n<li><a href="#1-ci%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80">CI란 무엇인가?</a></li>\n<li><a href="#2-jenkins%EB%9E%80">Jenkins란?</a></li>\n<li><a href="#3-jenkins-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0">Jenkins 설치하기</a></li>\n<li><a href="#4-jenkins-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95">Jenkins 기본 설정</a></li>\n<li><a href="#5-jenkins-github-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EB%93%B1%EB%A1%9D%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0">Jenkins, Github 서비스에 등록/인증하기</a></li>\n<li>\n<p><a href="#6-jenkins%EC%97%90%EC%84%9C--%EC%83%88%EB%A1%9C%EC%9A%B4-itemjob-%EB%A7%8C%EB%93%A4%EA%B8%B0---freestyle-pipeline">Jenkins에서 새로운 Item(Job) 만들기</a></p>\n<ul>\n<li><a href="#1-freestyle-project%EB%9E%80">Freestyle</a></li>\n<li><a href="#1-pipeline%EC%9D%B4%EB%9E%80">Pipeline</a></li>\n</ul>\n</li>\n<li><a href="#7-%EA%B8%B0%ED%83%80-%EB%B0%8F-%EC%B6%94%EA%B0%80%EC%82%AC%ED%95%AD">기타 및 추가사항</a></li>\n</ol>\n<sub>\n\t<img src=\'/images/contents/20180302/Github-Jenkins.jpg\' alt=\'Jenkins - Github\'>\n\t<p> 이미지 출처 : http://cicd.life/u3-p4-configuring-jenkins-github-groovy/</p>\n</sub>\n<h2>1. CI란 무엇인가?</h2>\n<ul>\n<li>\n<p>Continuous Integrate, Continuous Delivery, Continuous Deploy\n<sub>\n<img src=\'/images/contents/20180302/CICD.jpg\' alt=\'CI(Continuouse Integration) vs CD(Continuouse Delivery) vs CD(Continuouse Deploy)\'></p>\n<p> 이미지 출처 : http://skillslane.com/continuous-integration-delivery-deployment/</p>\n</sub>\n</li>\n</ul>\n<p>CI와 CD의 차이는 Process 단계의 정도로 나누어짐을 볼 수 있습니다. 해당 단계의 차이마다 조금씩의 차이가 있는 것이죠. 해당 과정을 예전에는 수동으로 했기때문에 조금만 변경되어도 많은 어려움이 있었습니다. 하지만, CI 툴이 생긴이후로 대부분의 작업들이 자동화되었습니다.</p>\n<p>그렇다면, CI 툴이 위의 모든 단계의 모든 기능을 제공하는걸까요? 반은 맞고 반은 틀리다고 할 수 있습니다. CI 툴이 순수하게 모든 기능을 다 제공하지는 않습니다. 다만, 다양한 플러그인(라이브러리) 등으로 인터페이스를 제공하고 기능을 통합하여 제공하는 것이죠.</p>\n<p>Jenkins와 Git(Github)을 연결하는 예제를 선택한 이유도 이와 같습니다. Jenkins가 Git(Github)이란 SCM(Source Code Management)을 통해 코드를 관리하고 통합(<code class="language-text">Code</code>, <code class="language-text">Integrate</code>)하는 기능을 제공하기 때문입니다. 엄밀히 보면 <code class="language-text">Build</code>, <code class="language-text">Test</code>, <code class="language-text">Release</code>, <code class="language-text">Deploy</code> 과정이 Jenkins가 담당하는(할 수 있는) 부분인 것이죠.</p>\n<p>즉, 이번과정에서 Jenkins와 Git(Github)를 연결하는 방법을 통해 <code class="language-text">Code</code>, <code class="language-text">Build</code>, <code class="language-text">Integrate</code> 과정을 설명하기 위함입니다. 지금부터 알아보도록 할까요?</p>\n<h2>2. Jenkins란?</h2>\n<ul>\n<li>\n<p>Jenkins는 2004년에 썬 마이크로시스템즈에서 시작된 소프트웨어이며, 지속적인 통합과 테스트를 위해 Kawaguchi Kohsuke에 의해 만들어졌습니다. 처음 이름은 Hudson이지만, 이후 분기되어 현재는 Jenkins라는 이름으로 관리되고 있습니다.</p>\n</li>\n<li>\n<p>Jenkins는 개발 작업을 자동화 할뿐 아니라, 파이프라인(Pipeline)을 사용해 거의 모든 언어와 소스코드에 대해 지속적인 통합(CI)과 전달(CD) 환경을 구축하는 간단한 방법을 제공합니다.</p>\n</li>\n<li>\n<p>Jenkins가 각각의 단계에 대한 스크립트 작성의 필요성을 없애주지는 않지만, 사용자가 쉽게 구축할 수 있는 것보다 더 빠르고 더 강력하게 빌드(Build), 테스트(Test), 그리고 배포(Deployment) 등 체인 전체를 통합할 수 있는 방법을 제공해 줍니다.</p>\n</li>\n<li>\n<p>핵심 키워드</p>\n<ul>\n<li>\n<p>Item(Job)</p>\n<ul>\n<li>Executor</li>\n<li>\n<p>Node(Distributed System)</p>\n<ul>\n<li>Master - Slave</li>\n</ul>\n</li>\n<li>\n<p>SCM(Source Code Management)</p>\n<ul>\n<li>Git, SVN, etc…</li>\n</ul>\n</li>\n<li>\n<p>Build Tool</p>\n<ul>\n<li>Maven, Gradle, Ant, make, Npm, etc…</li>\n</ul>\n</li>\n<li>\n<p>Test Tool</p>\n<ul>\n<li>JUnit, Mocha, Jest, etc…</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>3. Jenkins 설치하기</h2>\n<h4>1. Java 설치</h4>\n<ul>\n<li>Jenkins는 자바로 구현되어 Java(Servlet container)가 필요합니다.</li>\n<li>\n<p>Java는 8버전을 설치하도록 합니다. Java 9 버전을 아직 Jenkins가 100% 지원하지 않아(<a href="https://www.infoworld.com/article/3234470/java/which-developer-tools-support-javas-new-modularity-features.html">Which tool support Java 9</a>) 몇가지 에러가 발생합니다. Plugin설치로 해결이 가능할 것으로 보이지만 몇가지 이슈가 제기된 것으로 보입니다. 안정적인 Jenkins 사용을 위해 Java 8 버전을 설치하겠습니다.</p>\n<ul>\n<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04#managing-java">How to Install Multiple Java on Ubuntu 16.04</a></li>\n</ul>\n</li>\n</ul>\n<h4>2. Git 설치</h4>\n<ul>\n<li>\n<p>Jenkins가 SCM(Source Code Management)으로 사용 할 Git이 필요합니다.</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token function">git</span></code></pre>\n      </div>\n</li>\n</ul>\n<h4>3. Jenkins 설치</h4>\n<ul>\n<li>\n<p>Jenkins를 구동시키기 위해서는 Jenkins가 설치되어있는 서버가 필요합니다. Jenkins 설치와 관련한 내용은 잘 정리되어 있는 글이 많기에 추가적으로 작성하지는 않았습니다. 설치가 필요하신 분들은 아래 링크를 통해 Jenkins를 설치하시기 바랍니다.</p>\n<ul>\n<li><a href="https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04">How to Install Jenkins on Ubuntu 16.04</a></li>\n</ul>\n</li>\n<li>\n<p><strong>주의사항</strong></p>\n<ul>\n<li>\n<p><code class="language-text">ufw enalbe</code></p>\n<ul>\n<li>방화벽을 활성화시켜줍니다. 미적용 시 <code class="language-text">/github-web-hook/</code> 설정에서 방화벽에 차단되는 문제가 발생합니다.</li>\n</ul>\n</li>\n<li>추가적으로 Jenkins를 설치한 서버에 추가적인 가상 방화벽으로 차단해 둔 경우 Github Webhook의 요청이 방화벽에 차단되어 <code class="language-text">Timeout error</code>가 발생합니다.</li>\n</ul>\n</li>\n</ul>\n<p>3가지 모두 설치를 완료하고 첫 계정을 생성하면 아래와 같은 그림을 볼 수 있습니다.\n<img src=\'/images/contents/20180302/1-firstJenkins.jpg\' alt=\'Init Jenkins\'></p>\n<h2>4. Jenkins 기본 설정</h2>\n<p><code class="language-text">Jenkins 관리</code>에 들어가면 많은 항목을 볼 수 있습니다. 그 중 지금 필요한 것은 3가지 설정입니다.</p>\n<h4>1. Global Tool Configuration</h4>\n<ul>\n<li>Jenkins가 실행될 때 필요한 기본 Build Tool들의 경로를 설정하는 곳입니다.</li>\n<li>현재 Jenkins는 Build Tool로 JDK, Git, Gradle, Ant, Maven, Docker 총 6개를 기본적으로 지원하고 있습니다.</li>\n</ul>\n<p>JDK와 Git을 아래와 같이 설정해줍니다.</p>\n<img src=\'/images/contents/20180302/2-globalToolConfig.jpg\' alt=\'Jenkins Git Plugins\'>\n<h4>2. 시스템 설정</h4>\n<ul>\n<li>서버관련 환경, 플러그인, 스크립트, 알림 등 다양한 Jenkins 관련 시스템 설정을 할 수 있는 곳입니다.</li>\n</ul>\n<p>시스템 설정에서는 Git config에 기본적으로 필요한 name과 email을 기본적으로 설정해줍니다.</p>\n<img src=\'/images/contents/20180302/3-systemGitPlugin.jpg\' alt=\'Jenkins Git Plugins\'>\n<h4>3. 플러그인 관리</h4>\n<ul>\n<li>말 그대로 플러그인 설치/업데이트/삭제 등 플러그인을 관리할 수 있는 곳입니다.</li>\n</ul>\n<p>기본 설치시 설치되는 Git Plugins는 아래 그림으로 확인할 수 있습니다.</p>\n<img src=\'/images/contents/20180302/4-defaultGitPlugins.jpg\' alt=\'Jenkins Git Plugins\'>\n<h2>5. Jenkins, Github 서비스에 등록/인증하기</h2>\n<h4>Jenkins, Github Webhook 서비스로 등록하기</h4>\n<ul>\n<li>\n<p>Github 연결 할 Repositroy > Settings에서 <code class="language-text">Integrations &amp; Services</code>로 Jenkins를 등록하면, 해당 Url에 맞게 <code class="language-text">Webhooks</code>에 Integrations &#x26; Services 설정 값이 자동으로 저장됩니다.</p>\n</li>\n<li>\n<p>Services 적용 후 요청 테스트에서 Success Check이 완료되면, Integrations &#x26; Services에 있던 설정이 삭제되며, Webhooks에 맞게 저장됩니다.</p>\n</li>\n<li>\n<p><strong>이전과의 변경사항</strong></p>\n<ul>\n<li>이전에는 Username/Password 혹은 Token 값 설정만으로도 Webhooks가 지원되었지만, 이제는 CI 서버와 Github Repository를 명시적으로 연결하여야지만 정상작동됩니다. 아래와 같은 방법으로 해당 Repsitory에 Jenkins 서비스를 등록하여줍니다.</li>\n</ul>\n</li>\n</ul>\n<h5>1. 아래와 같은 방식으로 Repositroy > Settings 찾아주시기 바랍니다.</h5>\n<img src=\'/images/contents/20180302/7-gitServiceJenkins2.jpg\' alt=\'Webhooks1\'>\n<h5>2. Jenkins가 설치된 서버의 IP와 Port를 입력해주시기 바랍니다.</h5>\n<ul>\n<li>\n<p>아래와 같이 설정하면 <strong>Public Repository</strong>에서 추가 인증 없이 Jenkins와 Repository가 연동되어 Build Trigger가 정상작동됩니다.\n<img src=\'/images/contents/20180302/7-gitServiceJenkins3.jpg\' alt=\'Webhooks2\'></p>\n</li>\n<li>\n<p>주의사항</p>\n<ol>\n<li>Jenkins 서버 URL이 적합하지 않으면 정상작동되지 않습니다.</li>\n<li>URL 마지막에 <code class="language-text">/github-webhook/</code>을 붙여주지 않아도 정상작동되지 않습니다.</li>\n</ol>\n</li>\n</ul>\n<h2>6. Jenkins에서  새로운 Item(Job) 만들기 - (Freestyle, Pipeline)</h2>\n<ul>\n<li>Item(Job)을 정의하는 곳입니다.</li>\n<li>일련의 CI 과정을 정의하는 Item(Job)을 만드는 곳이라고 생각할 수 있습니다.</li>\n<li>Item(Job) 별로 다양하며, 기본적으로 Freestyle, Pipeline 등이 있습니다.</li>\n</ul>\n<h4>이전과의 변경사항</h4>\n<ul>\n<li>\n<p>Jenkins와 Github를 연결하기 위해서는 <a href="https://wiki.jenkins.io/display/JENKINS/GitHub+Plugin">JENKINS/GitHub+Plugin</a>이 사용됩니다. 이전과 달라진 점은 Github Plugin은 업데이트(v1.25.1부터 - 현재 v1.29.0)되면서 Jenkins와 Github가 Trigger되는 이름이 바뀌었으며, 설정하는 방법도 조금 바뀌었습니다.</p>\n<ul>\n<li>\n<p>이름</p>\n<ul>\n<li>\n<p>Old</p>\n<ul>\n<li><del>Previously named as ‘Build when a change is pushed to GitHub’</del></li>\n</ul>\n</li>\n<li>\n<p>New</p>\n<ul>\n<li>GitHub hook trigger for GITScm polling</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>방법</p>\n<ul>\n<li>\n<p>Old</p>\n<ul>\n<li>\n<p><del>이전에는 push가 되면 자동으로 Repository 소스를 pull하여 Build trigger가 작동되었습니다.</del> 하지만, 깃허브의 보안정책으로 인해 추가작업이 필요해졌습니다.</p>\n<ul>\n<li><a href="https://help.github.com/articles/about-two-factor-authentication/">관련 깃허브 보안사항 - About Two-Factor Authentication</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>New</p>\n<ul>\n<li>새로운 방법에는 Jenkins를 해당 Github Repository 서비스로 등록해야 합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>1. Freestyle project란?</h4>\n<ul>\n<li>GUI를 통해 Jenkins의 기본적인 Job을 설정할 수 있습니다.</li>\n</ul>\n<h4>2. Freestyle project 설정하기</h4>\n<h5>1. Freestyle project를 만듭니다.</h5>\n<img src=\'/images/contents/20180302/5-freestyleJob.jpg\' alt=\'FreeStyle Item\'>\n<h5>2. Git Repository를 연결합니다.</h5>\n<img src=\'/images/contents/20180302/6-jenkinsGitConfig1.jpg\' alt=\'Git Repository\'>\n<h5>3. Build Trigger를 Github hook trigger로 설정합니다. 여기에 체크하는 것이 Github에 Services에 등록한 것과 연결이 됩니다.</h5>\n<img src=\'/images/contents/20180302/6-jenkinsGitConfig2.jpg\' alt=\'Build Trigger\'>\n<h5>4. Build에서 Shell에 해당 Git 정보를 확인하는 Script를 작성합니다.</h5>\n<img src=\'/images/contents/20180302/freestyleResult1.jpg\' alt=\'Build Trigger\'>\n<h5>5. Github에 해당 Branch에 새롭게 푸쉬를 해봅니다.</h5>\n<h5>6. Github에 Push되면, Jenkins에 <code class="language-text">/web-hook/</code>가 전송되어 Jenkins의 Item(Job)이 Trigger되어 해당 Item(Job)을 수행합니다.</h5>\n<ul>\n<li>Build에 정의한 Shell Script가 수행되어 아래와 같은 결과를 얻을 수 있습니다.</li>\n<li>\n<p>관련한 <a href="https://wiki.jenkins.io/display/JENKINS/Git+Plugin#GitPlugin-Configuration">Environment Variable</a>을 보고싶으시면 해당 사이트에서 더 볼 수 있습니다.</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash"></code></pre>\n      </div>\n</li>\n<li>echo GIT<em>COMMIT 5ea853076a700e3387970eb69c1c6d567d7193de\nGIT</em>COMMIT 5ea853076a700e3387970eb69c1c6d567d7193de</li>\n<li>echo GIT<em>PREVIOUS</em>COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92\nGIT<em>PREVIOUS</em>COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92</li>\n<li>echo GIT<em>PREVIOUS</em>SUCCESSFUL<em>COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92\nGIT</em>PREVIOUS<em>SUCCESSFUL</em>COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92</li>\n<li>echo GIT<em>BRANCH origin/master\nGIT</em>BRANCH origin/master</li>\n<li>echo GIT<em>LOCAL</em>BRANCH\nGIT<em>LOCAL</em>BRANCH</li>\n<li>echo GIT<em>URL <a href="https://github.com/Seolhun/test-jenkins/">https://github.com/Seolhun/test-jenkins/</a>\nGIT</em>URL <a href="https://github.com/Seolhun/test-jenkins/">https://github.com/Seolhun/test-jenkins/</a></li>\n<li>echo GIT<em>COMMITTER</em>NAME testJenkins\nGIT<em>COMMITTER</em>NAME testJenkins</li>\n<li>echo GIT<em>AUTHOR</em>NAME testJenkins\nGIT<em>AUTHOR</em>NAME testJenkins</li>\n<li>echo GIT<em>COMMITTER</em>EMAIL testJenkins@testJenkins.com\nGIT<em>COMMITTER</em>EMAIL testJenkins@testJenkins.com</li>\n<li>\n<p>echo GIT<em>AUTHOR</em>EMAIL testJenkins@testJenkins.com\nGIT<em>AUTHOR</em>EMAIL testJenkins@testJenkins.com</p>\n<div class="gatsby-highlight" data-language="text">\n      <pre class="language-text"><code class="language-text"></code></pre>\n      </div>\n</li>\n</ul>\n<hr>\n<h4>1. <a href="https://jenkins.io/doc/book/pipeline/">Pipeline</a>이란?</h4>\n<ul>\n<li>\n<p>여러 빌드 Slave에 걸쳐있을 수있는 장기 실행 활동을 구성합니다. Pipeline(이전에는 워크 플로우라고 함)을 구축하거나 자유 작업 유형에 쉽게 들어 가지 않는 복잡한 활동을 구성하는 데 적합합니다.</p>\n</li>\n<li>\n<p>Pipeline은 Jenkins 2.0부터 시작되었습니다. Pipeline은 스크립트를 통해 Pipeline의 흐름을 정의하는 기능입니다. Pipeline은 <a href="http://groovy-lang.org/">Groovy</a>로 쉽게 정의할 수 있으며 Pipeline DSL을 통해 전달 파이프라인을 작성할 수 있습니다.</p>\n</li>\n<li>\n<p>핵심 키워드</p>\n<ul>\n<li>\n<p>Pipeline</p>\n<ul>\n<li>Pipeline(스크립트)은 Pipeline(프로세스)을 사용자가 직접 정의할 수 있는 Pipeline입니다.</li>\n</ul>\n</li>\n<li>\n<p>Node</p>\n<ul>\n<li>Node는 Jenkins 환경의 일부로 Pipeline을 실행시키는 시스템이라고 할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Stage</p>\n<ul>\n<li>Stage block은 Pipeline의 상태/진행상태 등을 시각화하는 작업의 단계를 정의합니다.</li>\n</ul>\n</li>\n<li>\n<p>Step</p>\n<ul>\n<li>Step은 젠킨스가 특정 시점에서 해야 할 일을 정의합니다.</li>\n</ul>\n</li>\n<li>\n<p>Declarative Pipeline fundamentals</p>\n<ul>\n<li>Declarative Pipeline 구문에서 파이프 라인 블록은 전체 파이프 라인에서 수행 된 모든 작업을 정의합니다.</li>\n</ul>\n</li>\n<li>\n<p>Scripted Pipeline fundamentals</p>\n<ul>\n<li>파이프라인의 핵심작업을 정의합니다.</li>\n<li>\n<p><strong>Pipeline의 작업을 노드 블록 내부로 한정하는 2가지 경우에 사용됩니다.</strong></p>\n<ul>\n<li>\n<p>작업 큐에 항목을 추가/예약하여 Node에서 Executor가 사용 가능 해지자 마자 실행됩니다.</p>\n<ul>\n<li>SCM에서 Checkout 한 파일에서 작업을 수행 할 수있는 작업 영역을 만듭니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>2. Pipeline project로 설정하기</h4>\n<h5>1. Pipeline Project 만들기</h5>\n<sub>\n\t<img src=\'/images/contents/20180302/10-pipelineConfig1.jpg\' alt=\'Build Trigger\'>\n</sub>\n<h5>2. Build Trigger를 Github hook trigger로 설정합니다. 여기에 체크하는 것이 Github에 Services에 등록한 것과 연결이 됩니다.</h5>\n<sub>\n\t<img src=\'/images/contents/20180302/6-jenkinsGitConfig2.jpg\' alt=\'Build Trigger\'>\n</sub>\n<h5>3. Github에서 Pipeline Trigger</h5>\n<ul>\n<li><a href="https://jenkins.io/doc/pipeline/steps/workflow-scm-step/">Pipeline SCM Step</a>은 여기서 더 알아볼 수 있습니다.\n<sub>\n<img src=\'/images/contents/20180302/10-pipelineConfig2.jpg\' alt=\'Build Trigger\'>\n</sub></li>\n<li>Script Path에 Jenkinsfile로 Script를 정의했다고 알려주면, 해당 branch에 Jenkinsfile을 읽어 Script를 수행합니다.</li>\n</ul>\n<h5>4. Jenkinsfile</h5>\n<ul>\n<li>\n<p>Jenkinsfile은 Pipeline을 정의하기 위한 Jenkinsfile 형식입니다. Jenkinsfile은 Declaretive, Scripted 모두 지원하며 지속적으로 Pipelines들을 전달하여 손쉽게 CI환경을 구축할 수 있습니다.</p>\n<div class="gatsby-highlight" data-language="groovy">\n      <pre class="language-groovy"><code class="language-groovy">node <span class="token punctuation">{</span>\n<span class="token comment">// 1번 Stage</span>\n<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'1. Clone sources with Git Plugin\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">def</span> gitValues <span class="token operator">=</span> git credentialsId<span class="token punctuation">:</span> <span class="token string">\'JenkinsGithubUser\'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span><span class="token string">\'https://github.com/Seolhun/test-jenkins.git\'</span>\n\techo <span class="token string">\'GIT_COMMIT : ${gitValues.GIT_COMMIT}\'</span>\n\techo <span class="token string">\'GIT_PREVIOUS_COMMIT : ${gitValues.GIT_PREVIOUS_COMMIT}\'</span>\n\techo <span class="token string">\'GIT_PREVIOUS_SUCCESSFUL_COMMIT : ${gitValues.GIT_PREVIOUS_SUCCESSFUL_COMMIT}\'</span>\n\techo <span class="token string">\'GIT_BRANCH : ${gitValues.GIT_BRANCH}\'</span>\n\techo <span class="token string">\'GIT_LOCAL_BRANCH : ${gitValues.GIT_LOCAL_BRANCH}\'</span>\n\techo <span class="token string">\'GIT_COGIT_URLMMIT : ${gitValues.GIT_URL}\'</span>\n\techo <span class="token string">\'GIT_COMMITTER_NAME : ${gitValues.GIT_COMMITTER_NAME}\'</span>\n\techo <span class="token string">\'GIT_AUTHOR_NAME : ${gitValues.GIT_AUTHOR_NAME}\'</span>\n\techo <span class="token string">\'GIT_COMMITTER_EMAIL : ${gitValues.GIT_COMMITTER_EMAIL}\'</span>\n\techo <span class="token string">\'GIT_AUTHOR_EMAIL : ${gitValues.GIT_AUTHOR_EMAIL}\'</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 2번 Stage</span>\n<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'2. Clone sources with SCM Step Plugin\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t<span class="token keyword">def</span> gitValues <span class="token operator">=</span> checkout scm\n\techo <span class="token string">\'GIT_COMMIT : ${gitValues.GIT_COMMIT}\'</span>\n\techo <span class="token string">\'GIT_PREVIOUS_COMMIT : ${gitValues.GIT_PREVIOUS_COMMIT}\'</span>\n\techo <span class="token string">\'GIT_PREVIOUS_SUCCESSFUL_COMMIT : ${gitValues.GIT_PREVIOUS_SUCCESSFUL_COMMIT}\'</span>\n\techo <span class="token string">\'GIT_BRANCH : ${gitValues.GIT_BRANCH}\'</span>\n\techo <span class="token string">\'GIT_LOCAL_BRANCH : ${gitValues.GIT_LOCAL_BRANCH}\'</span>\n\techo <span class="token string">\'GIT_COGIT_URLMMIT : ${gitValues.GIT_URL}\'</span>\n\techo <span class="token string">\'GIT_COMMITTER_NAME : ${gitValues.GIT_COMMITTER_NAME}\'</span>\n\techo <span class="token string">\'GIT_AUTHOR_NAME : ${gitValues.GIT_AUTHOR_NAME}\'</span>\n\techo <span class="token string">\'GIT_COMMITTER_EMAIL : ${gitValues.GIT_COMMITTER_EMAIL}\'</span>\n\techo <span class="token string">\'GIT_AUTHOR_EMAIL : ${gitValues.GIT_AUTHOR_EMAIL}\'</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 3번 Stage</span>\n<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'Build\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\techo <span class="token string">\'Building...\'</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 4번 Stage</span>\n<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'Test\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\techo <span class="token string">\'Testing...\'</span>\n<span class="token punctuation">}</span>\n<span class="token comment">// 5번 Stage</span>\n<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'Deploy\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\techo <span class="token string">\'Deploying...\'</span>\n<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n</li>\n<li>\n<p>Jenkinsfile 분석</p>\n<ul>\n<li>\n<p>참고사항</p>\n<ul>\n<li>\n<p><a href="https://jenkins.io/doc/pipeline/steps/git/">Jenkins Pipeline Git</a></p>\n<ul>\n<li><a href="https://plugins.jenkins.io/git">Jenkins Git Plugin</a></li>\n</ul>\n</li>\n<li>\n<p><a href="https://jenkins.io/doc/pipeline/steps/workflow-scm-step/">Jenkins Pipeline SCM step</a></p>\n<ul>\n<li><a href="https://plugins.jenkins.io/workflow-scm-step">Jenkins Pipeline:SCM Step Plugin</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>1번 Stage</p>\n<ul>\n<li>Git Plugin을 사용하여 Github에 접근합니다. <strong>해당 Job에 credentials를 정의하고 credentialId 변수를 줌으로써 정상작동합니다.</strong></li>\n</ul>\n</li>\n<li>\n<p>2번 Stage</p>\n<ul>\n<li>Pipeline:SCM Step Plugin을 사용하여 Github에 접근합니다. <strong>해당 Job에 credentials 정의하고 선택해야 기능이 정상작동합니다.</strong></li>\n</ul>\n</li>\n<li>\n<p>나머지 스테이지는 각 기능 별로 필요한 기능을 정의하여 사용할 수 있습니다.</p>\n<ul>\n<li>\n<p><a href="https://qa.nuxeo.org/jenkins/pipeline-syntax/globals">Jenkins Global Variables</a></p>\n<ul>\n<li>WORKSPACE 등 다양한 Jenkins 전역 변수를 통해 Artifact 등에 접근하여 Test 및 Deploy를 실행할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>해당 Jenkins 파일을 실행하면 아래와 같은 결과가 나옵니다.</p>\n<div class="gatsby-highlight" data-language="bash">\n      <pre class="language-bash"><code class="language-bash">GIT_COMMIT <span class="token keyword">:</span> 6be818a0007ce1b07bec3426d610314e89e1c52b\nGIT_PREVIOUS_COMMIT <span class="token keyword">:</span> 0ffbbe45b353aa46a048df4aaabd1257c00d79ba\nGIT_PREVIOUS_SUCCESSFUL_COMMIT <span class="token keyword">:</span> 0ffbbe45b353aa46a048df4aaabd1257c00d79ba\nGIT_BRANCH <span class="token keyword">:</span> origin/master\nGIT_LOCAL_BRANCH <span class="token keyword">:</span> null\nGIT_COGIT_URLMMIT <span class="token keyword">:</span> https://github.com/Seolhun/test-jenkins\nGIT_COMMITTER_NAME <span class="token keyword">:</span> testJenkins\nGIT_AUTHOR_NAME <span class="token keyword">:</span> testJenkins\nGIT_COMMITTER_EMAIL <span class="token keyword">:</span> testJenkins@testJenkins.com\nGIT_AUTHOR_EMAIL <span class="token keyword">:</span> testJenkins@testJenkins.com</code></pre>\n      </div>\n</li>\n</ul>\n<h2>7. 기타 및 추가사항</h2>\n<h4><a href="https://jenkins.io/projects/blueocean/">1. Jenkins Blue Ocean</a></h4>\n<ul>\n<li>Jenkins의 Pipeline을 다양하게 보고 조작할 수 있는 UI/UX를 최신으로 제공해줍니다.\n<img src=\'/images/contents/20180302/7-etc-blueOcean.jpg\'></li>\n</ul>\n<h4>2. Credentials를 이용하기 전 주의 사항</h4>\n<ul>\n<li>\n<p>참고자료</p>\n<ul>\n<li><a href="https://issues.jenkins-ci.org/browse/JENKINS-32417">Jenkins Git Plugin Credential Issue1</a></li>\n<li><a href="https://groups.google.com/forum/#!msg/jenkinsci-users/MkSJvvNFQCk/DAYdcIKaCAAJ">Jenkins Git Plugin Credential Issue2</a></li>\n</ul>\n</li>\n<li>\n<p>결론</p>\n<ul>\n<li>User Credential이 System이 운영하는 Job 구성에 나타나서는 안되기 때문에 Job에서 Credentials가 모두 보이지 않는 것은 결함이 아닌 것으로 보는게 맞습니다.</li>\n<li>User Credential을 매개 변수화하면 User Credentials을 올바르게 표시할 수 있습니다. 작업을 빌드 할 때 사용자에게 속한 자격 증명을 성공적으로 선택할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h4>3. Credential을 이용하여 Github 인증하기(Private Repository)</h4>\n<ul>\n<li>Jenkins는 Github Service에 등록하여 Webhooks와는 잘 연결이 되었습니다. 하지만, 추가적으로 Private Repository에 접근하기 위해서는 인증과정이 필요합니다.</li>\n</ul>\n<h5>1. Username with Password</h5>\n<ul>\n<li>Github 계정 아이디(Eamil/Name)와 비밀번호로 인증합니다.</li>\n<li>Jenkins Item(Job)에 credentials에 설정하면 해당 Github Repository와의 연결을 인증할 수 있습니다.</li>\n</ul>\n<p> - Credentials를 생성할 때 보이는 ID가 credeintalsId에 입력되는 값입니다.</p>\n<img src=\'/images/contents/20180302/selectCredential.jpg\' alt=\'Build Trigger\'>\n- 위처럼 정의한 credentials에 ID는 아래 Pipeline Script 정의에서 `credentialsId`로 작동됩니다.\n\t- Private Repository의 경우 사용됩니다.\n<h5>2. Secret Text : Oauth2 Token 받기</h5>\n<ol>\n<li>\n<p>Oauth2 Token 생성하러 가기</p>\n<ul>\n<li>Settings > Developer settings > Personal access tokens\n<img src=\'/images/contents/20180302/8-oauth2Token1.jpg\' alt=\'Oauth2 Token1\'></li>\n</ul>\n</li>\n<li>Oauth2 Token 생성하기\n<img src=\'/images/contents/20180302/8-oauth2Token2.jpg\' alt=\'Oauth2 Token2\'></li>\n<li>Oauth2 Token 권한 설정\n<img src=\'/images/contents/20180302/8-oauth2Token3.jpg\' alt=\'Oauth2 Token3\'></li>\n<li>\n<p>Oauth2 Token 값 받기</p>\n<ul>\n<li>해당 값을 credentials로 생성시, <code class="language-text">Secret Text</code>에 입력하여줍니다.\n<img src=\'/images/contents/20180302/8-oauth2Token4.jpg\' alt=\'Oauth2 Token3\'></li>\n</ul>\n</li>\n</ol>\n<h5>3. Credentials를 Binding하여 Pipeline에서 이용하기</h5>\n<ul>\n<li>\n<p>참고사항</p>\n<ul>\n<li><a href="https://jenkins.io/doc/pipeline/steps/credentials-binding/">Credentials Binding Plugin</a></li>\n</ul>\n</li>\n</ul>\n<div class="gatsby-highlight" data-language="groovy">\n      <pre class="language-groovy"><code class="language-groovy">node <span class="token punctuation">{</span>\n\t<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'1. Clone sources with Git Plugin\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">def</span> gitValues <span class="token operator">=</span> git credentialsId<span class="token punctuation">:</span> <span class="token string">\'JenkinsGithubUser\'</span><span class="token punctuation">,</span> url<span class="token punctuation">:</span><span class="token string">\'https://github.com/Seolhun/test-jenkins.git\'</span>\n\t\techo <span class="token string">\'GIT_COMMIT : ${gitValues.GIT_COMMIT}\'</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'2. Clone sources with SCM Step Plugin\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token keyword">def</span> gitValues <span class="token operator">=</span> checkout scm\n\t\techo <span class="token string">\'GIT_COMMIT : ${gitValues.GIT_COMMIT}\'</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'Binding Credentials\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t<span class="token comment">// credentials block with Github Username/Password</span>\n\t\t<span class="token function">withCredentials</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">usernamePassword</span><span class="token punctuation">(</span>credentialsId<span class="token punctuation">:</span> <span class="token string">\'JenkinsGithubUser\'</span><span class="token punctuation">,</span> passwordVariable<span class="token punctuation">:</span> <span class="token string">\'GIT_PASSWORD\'</span><span class="token punctuation">,</span> usernameVariable<span class="token punctuation">:</span> <span class="token string">\'GIT_USERNAME\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\techo <span class="token string">\'$GIT_USERNAME\'</span>\n\t\t\techo <span class="token string">\'$GIT_PASSWORD\'</span>\n\t<span class="token punctuation">}</span>\n\n\t\t<span class="token comment">// credentials block with GithubToken</span>\n\t\t<span class="token function">withCredentials</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">string</span><span class="token punctuation">(</span>credentialsId<span class="token punctuation">:</span> <span class="token string">\'JenkinsGithubToken\'</span><span class="token punctuation">,</span> variable<span class="token punctuation">:</span> <span class="token string">\'TOKEN\'</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\t\techo <span class="token string">\'$TOKEN\'</span>\n\t\t<span class="token punctuation">}</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'Build\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\techo <span class="token string">\'Building...\'</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'Test\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\techo <span class="token string">\'Testing...\'</span>\n\t<span class="token punctuation">}</span>\n\t<span class="token function">stage</span><span class="token punctuation">(</span><span class="token string">\'Deploy\'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\t\techo <span class="token string">\'Deploying...\'</span>\n\t<span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<ul>\n<li>\n<p>withCredentials를 통해 해당 블록에서 추가적인 Credentials를 적용할 수 있습니다.</p>\n<ul>\n<li>해당 값들은 ****로 출력될뿐 정상값으로 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<h2>결론</h2>\n<p>Jenkins 설치부터 Github 연결, 그리고 Pipeline까지 다양하게 알아봤습니다. 특히, Jenkins와 Git(Github)를 연결하여 <code class="language-text">Code &gt; Build</code>가 일어나는 과정을 알아보았습니다. <code class="language-text">Build Trigger</code>가 되어 해당 코드들이 Build/Test가 되는 과정은 생략되었습니다만, 해당 Script 혹은 Item 별로 각 Stage에 적절한 Pipeline을 구현해준다면 Build/Test까지도 구현가능 할 수 있습니다.</p>\n<p>이번 과정을 통해 Jenkins와 Git(Github)를 통해 끊임없이 코드가 빌드/테스트/통합 등 일련의 과정을 머리 속에 그리실 수 있었을 것이라고 생각합니다. 또한, FreeStyle과 Pipeline의 변화를 보며, Jenkins 2.0부터 큰 변화라고 느끼실 수 있었을 것입니다. 이전의 방식(Freestyle)으로는 코드가 없어 재사용이 전혀 없고 추가/수정 마다 큰 어려움 있었습니다. 하지만, Pipeline을 통해서는 해당 흐름을 모두 코드로 정의할 수 있게 되어 재사용성 및 가독성 모두가 좋아졌습니다. 거기다가 BlueOcean이라는 뛰어난 UI/UX 플러그인을 통해 대부분의 기능들을 쉽게 적용시킬 수 있습니다. 이 외에도 Jenkins에서 Docker를 사용하여 Build/Test System의 환경을 자동화할 수 있는 부분이 더 많아습니다. 또한, 이를 통해 Node 별 분산 시스템 구현도 예전보다 쉬워졌으리라 판단합니다.</p>\n<h2>References</h2>\n<ul>\n<li><a href="https://jenkins.io/">Jenkins</a></li>\n<li><a href="https://jenkins.io/projects/blueocean/">Jenkins Blue Ocean</a></li>\n<li><a href="https://jenkins.io/solutions/github/">Jenkins with Github</a></li>\n<li><a href="https://wiki.jenkins.io/display/JENKINS/Meet+Jenkins">Meet Jenkins Wiki</a></li>\n<li><a href="https://www.infoworld.com/article/3239666/devops/what-is-jenkins-the-ci-server-explained.html">What is Jenkins from InfoWorld</a></li>\n<li><a href="https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd">Continuouse Integration vs Continuouse Delivery</a></li>\n<li><a href="https://www.thoughtworks.com/continuous-integration">Thoughtworks - CI</a></li>\n</ul>',htmlAst:{type:"root",children:[{type:"element",tagName:"blockquote",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Continuous Integration doesn’t get rid of bugs, but it does make them dramatically easier to find and remove. - Martin Fowler"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"CI 툴을 이용한다는 것은 위 인용한 글 처럼, "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"손 쉽게 버그를 찾고 제거하기 위함일 것입니다."}]},{type:"text",value:" 이를 위한 CI 과정과 Jenkins 예제코드를 알아보겠습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Pre-Requirement"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Ubuntu 16.04"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"다른 운영체제도 상관없지만 이번 포스트 내용은 Ubuntu 16.04를 기준으로 작성되었습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Java 8"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Git"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Jenkins"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"Contents"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"목록"}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#1-ci%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80"},children:[{type:"text",value:"CI란 무엇인가?"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#2-jenkins%EB%9E%80"
},children:[{type:"text",value:"Jenkins란?"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#3-jenkins-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0"},children:[{type:"text",value:"Jenkins 설치하기"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#4-jenkins-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95"},children:[{type:"text",value:"Jenkins 기본 설정"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#5-jenkins-github-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EB%93%B1%EB%A1%9D%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0"},children:[{type:"text",value:"Jenkins, Github 서비스에 등록/인증하기"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#6-jenkins%EC%97%90%EC%84%9C--%EC%83%88%EB%A1%9C%EC%9A%B4-itemjob-%EB%A7%8C%EB%93%A4%EA%B8%B0---freestyle-pipeline"},children:[{type:"text",value:"Jenkins에서 새로운 Item(Job) 만들기"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#1-freestyle-project%EB%9E%80"},children:[{type:"text",value:"Freestyle"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#1-pipeline%EC%9D%B4%EB%9E%80"},children:[{type:"text",value:"Pipeline"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"#7-%EA%B8%B0%ED%83%80-%EB%B0%8F-%EC%B6%94%EA%B0%80%EC%82%AC%ED%95%AD"},children:[{type:"text",value:"기타 및 추가사항"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"sub",properties:{},children:[{type:"text",value:"\n\t"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/Github-Jenkins.jpg",alt:"Jenkins - Github"},children:[]},{type:"text",value:"\n\t"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:" 이미지 출처 : http://cicd.life/u3-p4-configuring-jenkins-github-groovy/"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"1. CI란 무엇인가?"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Continuous Integrate, Continuous Delivery, Continuous Deploy\n"},{type:"element",tagName:"sub",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/CICD.jpg",alt:"CI(Continuouse Integration) vs CD(Continuouse Delivery) vs CD(Continuouse Deploy)"},children:[]}]}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:" 이미지 출처 : http://skillslane.com/continuous-integration-delivery-deployment/"}]},{type:"text",value:"\n\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"CI와 CD의 차이는 Process 단계의 정도로 나누어짐을 볼 수 있습니다. 해당 단계의 차이마다 조금씩의 차이가 있는 것이죠. 해당 과정을 예전에는 수동으로 했기때문에 조금만 변경되어도 많은 어려움이 있었습니다. 하지만, CI 툴이 생긴이후로 대부분의 작업들이 자동화되었습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"그렇다면, CI 툴이 위의 모든 단계의 모든 기능을 제공하는걸까요? 반은 맞고 반은 틀리다고 할 수 있습니다. CI 툴이 순수하게 모든 기능을 다 제공하지는 않습니다. 다만, 다양한 플러그인(라이브러리) 등으로 인터페이스를 제공하고 기능을 통합하여 제공하는 것이죠."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkins와 Git(Github)을 연결하는 예제를 선택한 이유도 이와 같습니다. Jenkins가 Git(Github)이란 SCM(Source Code Management)을 통해 코드를 관리하고 통합("},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Code"}]},{type:"text",value:", "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Integrate"}]},{type:"text",value:")하는 기능을 제공하기 때문입니다. 엄밀히 보면 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Build"}]},{type:"text",value:", "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Test"}]},{type:"text",value:", "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Release"}]},{type:"text",value:", "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Deploy"}]},{type:"text",value:" 과정이 Jenkins가 담당하는(할 수 있는) 부분인 것이죠."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"즉, 이번과정에서 Jenkins와 Git(Github)를 연결하는 방법을 통해 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Code"}]},{type:"text",value:", "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Build"}]},{type:"text",value:", "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Integrate"}]},{type:"text",value:" 과정을 설명하기 위함입니다. 지금부터 알아보도록 할까요?"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"2. Jenkins란?"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkins는 2004년에 썬 마이크로시스템즈에서 시작된 소프트웨어이며, 지속적인 통합과 테스트를 위해 Kawaguchi Kohsuke에 의해 만들어졌습니다. 처음 이름은 Hudson이지만, 이후 분기되어 현재는 Jenkins라는 이름으로 관리되고 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkins는 개발 작업을 자동화 할뿐 아니라, 파이프라인(Pipeline)을 사용해 거의 모든 언어와 소스코드에 대해 지속적인 통합(CI)과 전달(CD) 환경을 구축하는 간단한 방법을 제공합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkins가 각각의 단계에 대한 스크립트 작성의 필요성을 없애주지는 않지만, 사용자가 쉽게 구축할 수 있는 것보다 더 빠르고 더 강력하게 빌드(Build), 테스트(Test), 그리고 배포(Deployment) 등 체인 전체를 통합할 수 있는 방법을 제공해 줍니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"핵심 키워드"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Item(Job)"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Executor"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Node(Distributed System)"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Master - Slave"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"SCM(Source Code Management)"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Git, SVN, etc…"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Build Tool"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Maven, Gradle, Ant, make, Npm, etc…"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Test Tool"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"JUnit, Mocha, Jest, etc…"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"3. Jenkins 설치하기"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"1. Java 설치"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Jenkins는 자바로 구현되어 Java(Servlet container)가 필요합니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Java는 8버전을 설치하도록 합니다. Java 9 버전을 아직 Jenkins가 100% 지원하지 않아("},{type:"element",tagName:"a",properties:{href:"https://www.infoworld.com/article/3234470/java/which-developer-tools-support-javas-new-modularity-features.html"},children:[{type:"text",value:"Which tool support Java 9"}]},{type:"text",value:") 몇가지 에러가 발생합니다. Plugin설치로 해결이 가능할 것으로 보이지만 몇가지 이슈가 제기된 것으로 보입니다. 안정적인 Jenkins 사용을 위해 Java 8 버전을 설치하겠습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04#managing-java"},children:[{type:"text",value:"How to Install Multiple Java on Ubuntu 16.04"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"2. Git 설치"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkins가 SCM(Source Code Management)으로 사용 할 Git이 필요합니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"bash"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-bash"]},children:[{type:"element",tagName:"code",properties:{className:["language-bash"]},children:[{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"sudo"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"apt-get"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"install"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"git"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"3. Jenkins 설치"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkins를 구동시키기 위해서는 Jenkins가 설치되어있는 서버가 필요합니다. Jenkins 설치와 관련한 내용은 잘 정리되어 있는 글이 많기에 추가적으로 작성하지는 않았습니다. 설치가 필요하신 분들은 아래 링크를 통해 Jenkins를 설치하시기 바랍니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04"},children:[{type:"text",value:"How to Install Jenkins on Ubuntu 16.04"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"주의사항"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"ufw enalbe"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"방화벽을 활성화시켜줍니다. 미적용 시 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"/github-web-hook/"}]},{type:"text",value:" 설정에서 방화벽에 차단되는 문제가 발생합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"추가적으로 Jenkins를 설치한 서버에 추가적인 가상 방화벽으로 차단해 둔 경우 Github Webhook의 요청이 방화벽에 차단되어 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Timeout error"}]},{type:"text",value:"가 발생합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"3가지 모두 설치를 완료하고 첫 계정을 생성하면 아래와 같은 그림을 볼 수 있습니다.\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/1-firstJenkins.jpg",alt:"Init Jenkins"},children:[]}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"4. Jenkins 기본 설정"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Jenkins 관리"}]},{type:"text",value:"에 들어가면 많은 항목을 볼 수 있습니다. 그 중 지금 필요한 것은 3가지 설정입니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"1. Global Tool Configuration"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Jenkins가 실행될 때 필요한 기본 Build Tool들의 경로를 설정하는 곳입니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"현재 Jenkins는 Build Tool로 JDK, Git, Gradle, Ant, Maven, Docker 총 6개를 기본적으로 지원하고 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"JDK와 Git을 아래와 같이 설정해줍니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/2-globalToolConfig.jpg",alt:"Jenkins Git Plugins"},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"2. 시스템 설정"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"서버관련 환경, 플러그인, 스크립트, 알림 등 다양한 Jenkins 관련 시스템 설정을 할 수 있는 곳입니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"시스템 설정에서는 Git config에 기본적으로 필요한 name과 email을 기본적으로 설정해줍니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/3-systemGitPlugin.jpg",alt:"Jenkins Git Plugins"},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"3. 플러그인 관리"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"말 그대로 플러그인 설치/업데이트/삭제 등 플러그인을 관리할 수 있는 곳입니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"기본 설치시 설치되는 Git Plugins는 아래 그림으로 확인할 수 있습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/4-defaultGitPlugins.jpg",alt:"Jenkins Git Plugins"},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"5. Jenkins, Github 서비스에 등록/인증하기"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"Jenkins, Github Webhook 서비스로 등록하기"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Github 연결 할 Repositroy > Settings에서 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Integrations & Services"}]},{type:"text",value:"로 Jenkins를 등록하면, 해당 Url에 맞게 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Webhooks"}]},{type:"text",value:"에 Integrations & Services 설정 값이 자동으로 저장됩니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Services 적용 후 요청 테스트에서 Success Check이 완료되면, Integrations & Services에 있던 설정이 삭제되며, Webhooks에 맞게 저장됩니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"이전과의 변경사항"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"이전에는 Username/Password 혹은 Token 값 설정만으로도 Webhooks가 지원되었지만, 이제는 CI 서버와 Github Repository를 명시적으로 연결하여야지만 정상작동됩니다. 아래와 같은 방법으로 해당 Repsitory에 Jenkins 서비스를 등록하여줍니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"1. 아래와 같은 방식으로 Repositroy > Settings 찾아주시기 바랍니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/7-gitServiceJenkins2.jpg",alt:"Webhooks1"},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"2. Jenkins가 설치된 서버의 IP와 Port를 입력해주시기 바랍니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"아래와 같이 설정하면 "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"Public Repository"}]},{type:"text",value:"에서 추가 인증 없이 Jenkins와 Repository가 연동되어 Build Trigger가 정상작동됩니다.\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/7-gitServiceJenkins3.jpg",alt:"Webhooks2"},children:[]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"주의사항"}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Jenkins 서버 URL이 적합하지 않으면 정상작동되지 않습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"URL 마지막에 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"/github-webhook/"}]},{type:"text",value:"을 붙여주지 않아도 정상작동되지 않습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"6. Jenkins에서  새로운 Item(Job) 만들기 - (Freestyle, Pipeline)"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Item(Job)을 정의하는 곳입니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"일련의 CI 과정을 정의하는 Item(Job)을 만드는 곳이라고 생각할 수 있습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Item(Job) 별로 다양하며, 기본적으로 Freestyle, Pipeline 등이 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"이전과의 변경사항"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkins와 Github를 연결하기 위해서는 "},{type:"element",tagName:"a",properties:{href:"https://wiki.jenkins.io/display/JENKINS/GitHub+Plugin"},children:[{type:"text",value:"JENKINS/GitHub+Plugin"}]},{type:"text",value:"이 사용됩니다. 이전과 달라진 점은 Github Plugin은 업데이트(v1.25.1부터 - 현재 v1.29.0)되면서 Jenkins와 Github가 Trigger되는 이름이 바뀌었으며, 설정하는 방법도 조금 바뀌었습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"이름"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Old"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"del",properties:{},children:[{type:"text",value:"Previously named as ‘Build when a change is pushed to GitHub’"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"New"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"GitHub hook trigger for GITScm polling"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"방법"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Old"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"del",properties:{},children:[{type:"text",value:"이전에는 push가 되면 자동으로 Repository 소스를 pull하여 Build trigger가 작동되었습니다."}]},{type:"text",value:" 하지만, 깃허브의 보안정책으로 인해 추가작업이 필요해졌습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://help.github.com/articles/about-two-factor-authentication/"},children:[{type:"text",value:"관련 깃허브 보안사항 - About Two-Factor Authentication"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"New"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"새로운 방법에는 Jenkins를 해당 Github Repository 서비스로 등록해야 합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"1. Freestyle project란?"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"GUI를 통해 Jenkins의 기본적인 Job을 설정할 수 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"2. Freestyle project 설정하기"}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"1. Freestyle project를 만듭니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/5-freestyleJob.jpg",alt:"FreeStyle Item"},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"2. Git Repository를 연결합니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/6-jenkinsGitConfig1.jpg",alt:"Git Repository"},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"3. Build Trigger를 Github hook trigger로 설정합니다. 여기에 체크하는 것이 Github에 Services에 등록한 것과 연결이 됩니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/6-jenkinsGitConfig2.jpg",alt:"Build Trigger"},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"4. Build에서 Shell에 해당 Git 정보를 확인하는 Script를 작성합니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/freestyleResult1.jpg",alt:"Build Trigger"},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"5. Github에 해당 Branch에 새롭게 푸쉬를 해봅니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"6. Github에 Push되면, Jenkins에 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"/web-hook/"}]},{type:"text",value:"가 전송되어 Jenkins의 Item(Job)이 Trigger되어 해당 Item(Job)을 수행합니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Build에 정의한 Shell Script가 수행되어 아래와 같은 결과를 얻을 수 있습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"관련한 "},{type:"element",tagName:"a",properties:{href:"https://wiki.jenkins.io/display/JENKINS/Git+Plugin#GitPlugin-Configuration"},children:[{type:"text",value:"Environment Variable"}]},{type:"text",value:"을 보고싶으시면 해당 사이트에서 더 볼 수 있습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"bash"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-bash"]},children:[{type:"element",tagName:"code",properties:{className:["language-bash"]},children:[]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"COMMIT 5ea853076a700e3387970eb69c1c6d567d7193de\nGIT"}]},{type:"text",value:"COMMIT 5ea853076a700e3387970eb69c1c6d567d7193de"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"PREVIOUS"}]},{type:"text",value:"COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92\nGIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"PREVIOUS"}]},{type:"text",value:"COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"PREVIOUS"}]},{type:"text",value:"SUCCESSFUL"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92\nGIT"}]},{type:"text",value:"PREVIOUS"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"SUCCESSFUL"}]},{type:"text",value:"COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"BRANCH origin/master\nGIT"}]},{type:"text",value:"BRANCH origin/master"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"LOCAL"}]},{type:"text",value:"BRANCH\nGIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"LOCAL"}]},{type:"text",value:"BRANCH"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"URL "},{type:"element",tagName:"a",properties:{href:"https://github.com/Seolhun/test-jenkins/"},children:[{type:"text",value:"https://github.com/Seolhun/test-jenkins/"}]},{type:"text",value:"\nGIT"}]},{type:"text",value:"URL "},{type:"element",tagName:"a",properties:{href:"https://github.com/Seolhun/test-jenkins/"},children:[{type:"text",value:"https://github.com/Seolhun/test-jenkins/"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"COMMITTER"}]},{type:"text",value:"NAME testJenkins\nGIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",
value:"COMMITTER"}]},{type:"text",value:"NAME testJenkins"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"AUTHOR"}]},{type:"text",value:"NAME testJenkins\nGIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"AUTHOR"}]},{type:"text",value:"NAME testJenkins"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"COMMITTER"}]},{type:"text",value:"EMAIL testJenkins@testJenkins.com\nGIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"COMMITTER"}]},{type:"text",value:"EMAIL testJenkins@testJenkins.com"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"echo GIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"AUTHOR"}]},{type:"text",value:"EMAIL testJenkins@testJenkins.com\nGIT"},{type:"element",tagName:"em",properties:{},children:[{type:"text",value:"AUTHOR"}]},{type:"text",value:"EMAIL testJenkins@testJenkins.com"}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"text"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-text"]},children:[{type:"element",tagName:"code",properties:{className:["language-text"]},children:[]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"hr",properties:{},children:[]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"1. "},{type:"element",tagName:"a",properties:{href:"https://jenkins.io/doc/book/pipeline/"},children:[{type:"text",value:"Pipeline"}]},{type:"text",value:"이란?"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"여러 빌드 Slave에 걸쳐있을 수있는 장기 실행 활동을 구성합니다. Pipeline(이전에는 워크 플로우라고 함)을 구축하거나 자유 작업 유형에 쉽게 들어 가지 않는 복잡한 활동을 구성하는 데 적합합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Pipeline은 Jenkins 2.0부터 시작되었습니다. Pipeline은 스크립트를 통해 Pipeline의 흐름을 정의하는 기능입니다. Pipeline은 "},{type:"element",tagName:"a",properties:{href:"http://groovy-lang.org/"},children:[{type:"text",value:"Groovy"}]},{type:"text",value:"로 쉽게 정의할 수 있으며 Pipeline DSL을 통해 전달 파이프라인을 작성할 수 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"핵심 키워드"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Pipeline"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Pipeline(스크립트)은 Pipeline(프로세스)을 사용자가 직접 정의할 수 있는 Pipeline입니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Node"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Node는 Jenkins 환경의 일부로 Pipeline을 실행시키는 시스템이라고 할 수 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Stage"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Stage block은 Pipeline의 상태/진행상태 등을 시각화하는 작업의 단계를 정의합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Step"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Step은 젠킨스가 특정 시점에서 해야 할 일을 정의합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Declarative Pipeline fundamentals"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Declarative Pipeline 구문에서 파이프 라인 블록은 전체 파이프 라인에서 수행 된 모든 작업을 정의합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Scripted Pipeline fundamentals"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"파이프라인의 핵심작업을 정의합니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"Pipeline의 작업을 노드 블록 내부로 한정하는 2가지 경우에 사용됩니다."}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"작업 큐에 항목을 추가/예약하여 Node에서 Executor가 사용 가능 해지자 마자 실행됩니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"SCM에서 Checkout 한 파일에서 작업을 수행 할 수있는 작업 영역을 만듭니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"2. Pipeline project로 설정하기"}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"1. Pipeline Project 만들기"}]},{type:"text",value:"\n"},{type:"element",tagName:"sub",properties:{},children:[{type:"text",value:"\n\t"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/10-pipelineConfig1.jpg",alt:"Build Trigger"},children:[]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"2. Build Trigger를 Github hook trigger로 설정합니다. 여기에 체크하는 것이 Github에 Services에 등록한 것과 연결이 됩니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"sub",properties:{},children:[{type:"text",value:"\n\t"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/6-jenkinsGitConfig2.jpg",alt:"Build Trigger"},children:[]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"3. Github에서 Pipeline Trigger"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://jenkins.io/doc/pipeline/steps/workflow-scm-step/"},children:[{type:"text",value:"Pipeline SCM Step"}]},{type:"text",value:"은 여기서 더 알아볼 수 있습니다.\n"},{type:"element",tagName:"sub",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/10-pipelineConfig2.jpg",alt:"Build Trigger"},children:[]},{type:"text",value:"\n"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Script Path에 Jenkinsfile로 Script를 정의했다고 알려주면, 해당 branch에 Jenkinsfile을 읽어 Script를 수행합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"4. Jenkinsfile"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkinsfile은 Pipeline을 정의하기 위한 Jenkinsfile 형식입니다. Jenkinsfile은 Declaretive, Scripted 모두 지원하며 지속적으로 Pipelines들을 전달하여 손쉽게 CI환경을 구축할 수 있습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"groovy"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-groovy"]},children:[{type:"element",tagName:"code",properties:{className:["language-groovy"]},children:[{type:"text",value:"node "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// 1번 Stage"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'1. Clone sources with Git Plugin'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"def"}]},{type:"text",value:" gitValues "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" git credentialsId"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'JenkinsGithubUser'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" url"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'https://github.com/Seolhun/test-jenkins.git'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COMMIT : ${gitValues.GIT_COMMIT}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_PREVIOUS_COMMIT : ${gitValues.GIT_PREVIOUS_COMMIT}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_PREVIOUS_SUCCESSFUL_COMMIT : ${gitValues.GIT_PREVIOUS_SUCCESSFUL_COMMIT}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_BRANCH : ${gitValues.GIT_BRANCH}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_LOCAL_BRANCH : ${gitValues.GIT_LOCAL_BRANCH}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COGIT_URLMMIT : ${gitValues.GIT_URL}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COMMITTER_NAME : ${gitValues.GIT_COMMITTER_NAME}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_AUTHOR_NAME : ${gitValues.GIT_AUTHOR_NAME}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COMMITTER_EMAIL : ${gitValues.GIT_COMMITTER_EMAIL}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_AUTHOR_EMAIL : ${gitValues.GIT_AUTHOR_EMAIL}'"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// 2번 Stage"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'2. Clone sources with SCM Step Plugin'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"def"}]},{type:"text",value:" gitValues "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" checkout scm\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COMMIT : ${gitValues.GIT_COMMIT}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_PREVIOUS_COMMIT : ${gitValues.GIT_PREVIOUS_COMMIT}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_PREVIOUS_SUCCESSFUL_COMMIT : ${gitValues.GIT_PREVIOUS_SUCCESSFUL_COMMIT}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_BRANCH : ${gitValues.GIT_BRANCH}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_LOCAL_BRANCH : ${gitValues.GIT_LOCAL_BRANCH}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COGIT_URLMMIT : ${gitValues.GIT_URL}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COMMITTER_NAME : ${gitValues.GIT_COMMITTER_NAME}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_AUTHOR_NAME : ${gitValues.GIT_AUTHOR_NAME}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COMMITTER_EMAIL : ${gitValues.GIT_COMMITTER_EMAIL}'"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_AUTHOR_EMAIL : ${gitValues.GIT_AUTHOR_EMAIL}'"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// 3번 Stage"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Build'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Building...'"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// 4번 Stage"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Test'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Testing...'"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// 5번 Stage"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Deploy'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Deploying...'"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkinsfile 분석"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"참고사항"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://jenkins.io/doc/pipeline/steps/git/"},children:[{type:"text",value:"Jenkins Pipeline Git"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://plugins.jenkins.io/git"},children:[{type:"text",value:"Jenkins Git Plugin"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://jenkins.io/doc/pipeline/steps/workflow-scm-step/"},children:[{type:"text",value:"Jenkins Pipeline SCM step"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://plugins.jenkins.io/workflow-scm-step"},children:[{type:"text",value:"Jenkins Pipeline:SCM Step Plugin"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"1번 Stage"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Git Plugin을 사용하여 Github에 접근합니다. "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"해당 Job에 credentials를 정의하고 credentialId 변수를 줌으로써 정상작동합니다."}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"2번 Stage"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Pipeline:SCM Step Plugin을 사용하여 Github에 접근합니다. "},{type:"element",tagName:"strong",properties:{},children:[{type:"text",value:"해당 Job에 credentials 정의하고 선택해야 기능이 정상작동합니다."}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"나머지 스테이지는 각 기능 별로 필요한 기능을 정의하여 사용할 수 있습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://qa.nuxeo.org/jenkins/pipeline-syntax/globals"},children:[{type:"text",value:"Jenkins Global Variables"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"WORKSPACE 등 다양한 Jenkins 전역 변수를 통해 Artifact 등에 접근하여 Test 및 Deploy를 실행할 수 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"해당 Jenkins 파일을 실행하면 아래와 같은 결과가 나옵니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"bash"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-bash"]},children:[{type:"element",tagName:"code",properties:{className:["language-bash"]},children:[{type:"text",value:"GIT_COMMIT "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" 6be818a0007ce1b07bec3426d610314e89e1c52b\nGIT_PREVIOUS_COMMIT "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" 0ffbbe45b353aa46a048df4aaabd1257c00d79ba\nGIT_PREVIOUS_SUCCESSFUL_COMMIT "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" 0ffbbe45b353aa46a048df4aaabd1257c00d79ba\nGIT_BRANCH "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" origin/master\nGIT_LOCAL_BRANCH "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" null\nGIT_COGIT_URLMMIT "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" https://github.com/Seolhun/test-jenkins\nGIT_COMMITTER_NAME "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" testJenkins\nGIT_AUTHOR_NAME "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" testJenkins\nGIT_COMMITTER_EMAIL "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" testJenkins@testJenkins.com\nGIT_AUTHOR_EMAIL "},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:":"}]},{type:"text",value:" testJenkins@testJenkins.com"}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"7. 기타 및 추가사항"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://jenkins.io/projects/blueocean/"},children:[{type:"text",value:"1. Jenkins Blue Ocean"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Jenkins의 Pipeline을 다양하게 보고 조작할 수 있는 UI/UX를 최신으로 제공해줍니다.\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/7-etc-blueOcean.jpg"},children:[]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"2. Credentials를 이용하기 전 주의 사항"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"참고자료"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://issues.jenkins-ci.org/browse/JENKINS-32417"},children:[{type:"text",value:"Jenkins Git Plugin Credential Issue1"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://groups.google.com/forum/#!msg/jenkinsci-users/MkSJvvNFQCk/DAYdcIKaCAAJ"},children:[{type:"text",value:"Jenkins Git Plugin Credential Issue2"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"결론"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"User Credential이 System이 운영하는 Job 구성에 나타나서는 안되기 때문에 Job에서 Credentials가 모두 보이지 않는 것은 결함이 아닌 것으로 보는게 맞습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"User Credential을 매개 변수화하면 User Credentials을 올바르게 표시할 수 있습니다. 작업을 빌드 할 때 사용자에게 속한 자격 증명을 성공적으로 선택할 수 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h4",properties:{},children:[{type:"text",value:"3. Credential을 이용하여 Github 인증하기(Private Repository)"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Jenkins는 Github Service에 등록하여 Webhooks와는 잘 연결이 되었습니다. 하지만, 추가적으로 Private Repository에 접근하기 위해서는 인증과정이 필요합니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"1. Username with Password"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Github 계정 아이디(Eamil/Name)와 비밀번호로 인증합니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Jenkins Item(Job)에 credentials에 설정하면 해당 Github Repository와의 연결을 인증할 수 있습니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:" - Credentials를 생성할 때 보이는 ID가 credeintalsId에 입력되는 값입니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/selectCredential.jpg",alt:"Build Trigger"},children:[]},{type:"text",value:"\n- 위처럼 정의한 credentials에 ID는 아래 Pipeline Script 정의에서 `credentialsId`로 작동됩니다.\n\t- Private Repository의 경우 사용됩니다.\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"2. Secret Text : Oauth2 Token 받기"}]},{type:"text",value:"\n"},{type:"element",tagName:"ol",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Oauth2 Token 생성하러 가기"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Settings > Developer settings > Personal access tokens\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/8-oauth2Token1.jpg",alt:"Oauth2 Token1"},children:[]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Oauth2 Token 생성하기\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/8-oauth2Token2.jpg",alt:"Oauth2 Token2"},children:[]}]},{type:"text",value:"\n"
},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"Oauth2 Token 권한 설정\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/8-oauth2Token3.jpg",alt:"Oauth2 Token3"},children:[]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Oauth2 Token 값 받기"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"해당 값을 credentials로 생성시, "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Secret Text"}]},{type:"text",value:"에 입력하여줍니다.\n"},{type:"element",tagName:"img",properties:{src:"/images/contents/20180302/8-oauth2Token4.jpg",alt:"Oauth2 Token3"},children:[]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h5",properties:{},children:[{type:"text",value:"3. Credentials를 Binding하여 Pipeline에서 이용하기"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"참고사항"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://jenkins.io/doc/pipeline/steps/credentials-binding/"},children:[{type:"text",value:"Credentials Binding Plugin"}]}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"div",properties:{className:["gatsby-highlight"],dataLanguage:"groovy"},children:[{type:"text",value:"\n      "},{type:"element",tagName:"pre",properties:{className:["language-groovy"]},children:[{type:"element",tagName:"code",properties:{className:["language-groovy"]},children:[{type:"text",value:"node "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'1. Clone sources with Git Plugin'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t\t"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"def"}]},{type:"text",value:" gitValues "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" git credentialsId"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'JenkinsGithubUser'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" url"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'https://github.com/Seolhun/test-jenkins.git'"}]},{type:"text",value:"\n\t\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COMMIT : ${gitValues.GIT_COMMIT}'"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'2. Clone sources with SCM Step Plugin'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t\t"},{type:"element",tagName:"span",properties:{className:["token","keyword"]},children:[{type:"text",value:"def"}]},{type:"text",value:" gitValues "},{type:"element",tagName:"span",properties:{className:["token","operator"]},children:[{type:"text",value:"="}]},{type:"text",value:" checkout scm\n\t\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_COMMIT : ${gitValues.GIT_COMMIT}'"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Binding Credentials'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t\t"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// credentials block with Github Username/Password"}]},{type:"text",value:"\n\t\t"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"withCredentials"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"["}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"usernamePassword"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"credentialsId"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'JenkinsGithubUser'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" passwordVariable"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_PASSWORD'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" usernameVariable"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'GIT_USERNAME'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"]"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t\t\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'$GIT_USERNAME'"}]},{type:"text",value:"\n\t\t\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'$GIT_PASSWORD'"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n\n\t\t"},{type:"element",tagName:"span",properties:{className:["token","comment"]},children:[{type:"text",value:"// credentials block with GithubToken"}]},{type:"text",value:"\n\t\t"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"withCredentials"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"["}]},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"string"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"text",value:"credentialsId"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'JenkinsGithubToken'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:","}]},{type:"text",value:" variable"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:":"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'TOKEN'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"]"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t\t\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'$TOKEN'"}]},{type:"text",value:"\n\t\t"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Build'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Building...'"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Test'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Testing...'"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","function"]},children:[{type:"text",value:"stage"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"("}]},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Deploy'"}]},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:")"}]},{type:"text",value:" "},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"{"}]},{type:"text",value:"\n\t\techo "},{type:"element",tagName:"span",properties:{className:["token","string"]},children:[{type:"text",value:"'Deploying...'"}]},{type:"text",value:"\n\t"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]},{type:"text",value:"\n"},{type:"element",tagName:"span",properties:{className:["token","punctuation"]},children:[{type:"text",value:"}"}]}]}]},{type:"text",value:"\n      "}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"withCredentials를 통해 해당 블록에서 추가적인 Credentials를 적용할 수 있습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"text",value:"해당 값들은 ****로 출력될뿐 정상값으로 사용됩니다."}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"결론"}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"Jenkins 설치부터 Github 연결, 그리고 Pipeline까지 다양하게 알아봤습니다. 특히, Jenkins와 Git(Github)를 연결하여 "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Code > Build"}]},{type:"text",value:"가 일어나는 과정을 알아보았습니다. "},{type:"element",tagName:"code",properties:{className:["language-text"]},children:[{type:"text",value:"Build Trigger"}]},{type:"text",value:"가 되어 해당 코드들이 Build/Test가 되는 과정은 생략되었습니다만, 해당 Script 혹은 Item 별로 각 Stage에 적절한 Pipeline을 구현해준다면 Build/Test까지도 구현가능 할 수 있습니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"p",properties:{},children:[{type:"text",value:"이번 과정을 통해 Jenkins와 Git(Github)를 통해 끊임없이 코드가 빌드/테스트/통합 등 일련의 과정을 머리 속에 그리실 수 있었을 것이라고 생각합니다. 또한, FreeStyle과 Pipeline의 변화를 보며, Jenkins 2.0부터 큰 변화라고 느끼실 수 있었을 것입니다. 이전의 방식(Freestyle)으로는 코드가 없어 재사용이 전혀 없고 추가/수정 마다 큰 어려움 있었습니다. 하지만, Pipeline을 통해서는 해당 흐름을 모두 코드로 정의할 수 있게 되어 재사용성 및 가독성 모두가 좋아졌습니다. 거기다가 BlueOcean이라는 뛰어난 UI/UX 플러그인을 통해 대부분의 기능들을 쉽게 적용시킬 수 있습니다. 이 외에도 Jenkins에서 Docker를 사용하여 Build/Test System의 환경을 자동화할 수 있는 부분이 더 많아습니다. 또한, 이를 통해 Node 별 분산 시스템 구현도 예전보다 쉬워졌으리라 판단합니다."}]},{type:"text",value:"\n"},{type:"element",tagName:"h2",properties:{},children:[{type:"text",value:"References"}]},{type:"text",value:"\n"},{type:"element",tagName:"ul",properties:{},children:[{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://jenkins.io/"},children:[{type:"text",value:"Jenkins"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://jenkins.io/projects/blueocean/"},children:[{type:"text",value:"Jenkins Blue Ocean"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://jenkins.io/solutions/github/"},children:[{type:"text",value:"Jenkins with Github"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://wiki.jenkins.io/display/JENKINS/Meet+Jenkins"},children:[{type:"text",value:"Meet Jenkins Wiki"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://www.infoworld.com/article/3239666/devops/what-is-jenkins-the-ci-server-explained.html"},children:[{type:"text",value:"What is Jenkins from InfoWorld"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd"},children:[{type:"text",value:"Continuouse Integration vs Continuouse Delivery"}]}]},{type:"text",value:"\n"},{type:"element",tagName:"li",properties:{},children:[{type:"element",tagName:"a",properties:{href:"https://www.thoughtworks.com/continuous-integration"},children:[{type:"text",value:"Thoughtworks - CI"}]}]},{type:"text",value:"\n"}]}],data:{quirksMode:!1}},fields:{slug:"/CI-jenkins-with-github/",prefix:"2018-03-02"},frontmatter:{author:"Seolhun",category:"Jenkins",cover:{childImageSharp:{resize:{src:"/static/jenkins-7003e68a7f80c7a24b553d1e82ac33f9-160fa.png"}}},description:null,subTitle:null,tags:["CI","Jenkins","Test","Pipeline","Devops"],title:"[Jenkins/CI] Continuous Integration with Jenkins and Github 알아보고 예제 작성하기 - 1"}},author:{id:"/Users/hunseol/git/seolhun.github.io/content/parts/author.md absPath of file >>> MarkdownRemark",html:"<p>코드로 세상에 기여하고 싶은 개발자 설훈입니다. JavaScript와 TypeScript, React, Vue를 좋아하며 재사용할 수 있는 코드에 지대한 관심을 가지고 있습니다. 현재 TypeScript를 기반으로 React-Component를 만들고 있으며, Github 기반의 개발자 커뮤니티를 구축하고 있습니다.</p>"},footnote:{id:"/Users/hunseol/git/seolhun.github.io/content/parts/footnote.md absPath of file >>> MarkdownRemark",html:'<ul>\n<li>This is Seolhun Tech blog : <a href="https://seolhun.github.io/">Seolhun - Tech Blog</a></li>\n<li>Built by <a href="https://github.com/Seolhun">Seolhun</a></li>\n<li>contact : <a href="mailto:shun10116@gmail.com">shun10116@gmail.com</a></li>\n</ul>'},site:{siteMetadata:{facebook:{appId:"543531359431658"}}}},pathContext:{slug:"/CI-jenkins-with-github/"}}}});
//# sourceMappingURL=path---ci-jenkins-with-github-453c38273fc6dcd099d1.js.map
{"version":3,"sources":["webpack:///path---js-insertion-sort-1-10ae3a36141d8ebe2641.js","webpack:///./.cache/json/js-insertion-sort-1.json"],"names":["webpackJsonp","823","module","exports","data","post","id","html","htmlAst","type","children","tagName","properties","value","className","href","dataLanguage","quirksMode","fields","slug","prefix","frontmatter","title","subTitle","cover","childImageSharp","resize","src","author","footnote","site","siteMetadata","facebook","appId","pathContext"],"mappings":"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","file":"path---js-insertion-sort-1-10ae3a36141d8ebe2641.js","sourcesContent":["webpackJsonp([203609798636730],{\n\n/***/ 823:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"post\":{\"id\":\"/Users/hunseol/git/seolhun.github.io/content/posts/2018-03-21--JS-InsertionSort1/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>안녕하세요, 설훈입니다.\\n이번에 친구와 함께 해커랭크에 1일 1알고리즘을 스터디를 시작하였습니다.\\n알고리즘 사이트는 <code class=\\\"language-text\\\">HackerRank</code>로 선정하였습니다. 깃허브와 연동 및 기록도 남고 오류 확인 등 사이트가 아주 잘 되어있어 편리하기 때문입니다.\\n앞으로 영어공부도 할 겸 일석 삼조 효과를 거둘 수 있는 스터디가 되었으면 좋겠습니다.</p>\\n<p>Sort부터 해서 차례대로 나아가도록 하겠습니다.\\n<a href=\\\"https://www.hackerrank.com/challenges/insertionsort1/problem\\\">HackerRank - Sort - Insertion Sort Part 1</a></p>\\n<h2>0. Intro</h2>\\n<p>Insertion Sort는 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다.\\nInsertion Sort은 왼쪽부터 정렬하여 정렬된 수 모두 비교하여 정렬된 수보다 크면 오른쪽에, 작으면 왼쪽에 정렬해 나간다.</p>\\n<ul>\\n<li>\\n<p>Example)</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">5 3 4 2 1</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<p>5 3 4 2 1\\n3 5 4 2 1\\n3 4 5 2 1\\n2 3 4 5 1\\n1 2 3 4 5</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Selection Sort이나 Bubble Sort같은 O(n2) 알고리즘에 비교하여 빠르며, 안정 정렬이고 in-place 알고리즘이다.\\n**중요한 것은 이번 문제는 앞에서부터가 아니라 뒤에서부터 비교를 원한다. 이점을 유의하면서 풀어야 합니다.**\\n\\n## 1. Question\\n- Sample Input</code></pre>\\n      </div>\\n<p>5\\n2 4 6 8 3</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">- Sample Output</code></pre>\\n      </div>\\n<p>2 4 6 8 8\\n2 4 6 6 8\\n2 4 4 6 8\\n2 3 4 6 8</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">## 2. Process\\n1. 마지막 인덱스의 값을 앞의 값과 비교한다.\\n2. 해당 값을 잠시 저장한다.\\n3. 앞의 값이 더 크면 해당 값을 앞의 값과 자리를 교체한 후 log를 찍는다.\\n4. 해당 값을 앞의 값에 넣어준다.\\n5. 바꾼 값의 기준(n-1), 2 ~ 4번을 반복한다.\\n6. 전체 값을 확인 한 후 큰게 없으면 넘어간다.\\n7. 마지막에 결과값을 출력한다.\\n8. 배열 값이 기대값이 아니므로 join(&#39; &#39;) 메소드로 원하는 형태로 바꿔준다.\\n\\n## 3. Code\\n```tsx\\nfunction insertionSort1(n, arr) {\\n  for(var i = n - 1; i &gt; 0; i--) {\\n    var temp = arr[i];\\n    if(arr[i-1] &gt; arr[i]) {\\n      arr[i] = arr[i - 1];\\n      console.log(arr.join(&#39; &#39;));\\n      arr[i - 1] = temp;\\n      return insertionSort1(n-1, arr);\\n    }\\n  }\\n  console.log(arr.join(&#39; &#39;));\\n}\\n\\nfunction main() {\\n    var n = parseInt(readLine());\\n    arr = readLine().split(&#39; &#39;);\\n    arr = arr.map(Number);\\n    insertionSort1(n, arr);\\n}</code></pre>\\n      </div>\",\"htmlAst\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"안녕하세요, 설훈입니다.\\n이번에 친구와 함께 해커랭크에 1일 1알고리즘을 스터디를 시작하였습니다.\\n알고리즘 사이트는 \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"HackerRank\"}]},{\"type\":\"text\",\"value\":\"로 선정하였습니다. 깃허브와 연동 및 기록도 남고 오류 확인 등 사이트가 아주 잘 되어있어 편리하기 때문입니다.\\n앞으로 영어공부도 할 겸 일석 삼조 효과를 거둘 수 있는 스터디가 되었으면 좋겠습니다.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Sort부터 해서 차례대로 나아가도록 하겠습니다.\\n\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.hackerrank.com/challenges/insertionsort1/problem\"},\"children\":[{\"type\":\"text\",\"value\":\"HackerRank - Sort - Insertion Sort Part 1\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h2\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"0. Intro\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Insertion Sort는 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다.\\nInsertion Sort은 왼쪽부터 정렬하여 정렬된 수 모두 비교하여 정렬된 수보다 크면 오른쪽에, 작으면 왼쪽에 정렬해 나간다.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"ul\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"li\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Example)\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"5 3 4 2 1\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"5 3 4 2 1\\n3 5 4 2 1\\n3 4 5 2 1\\n2 3 4 5 1\\n1 2 3 4 5\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"Selection Sort이나 Bubble Sort같은 O(n2) 알고리즘에 비교하여 빠르며, 안정 정렬이고 in-place 알고리즘이다.\\n**중요한 것은 이번 문제는 앞에서부터가 아니라 뒤에서부터 비교를 원한다. 이점을 유의하면서 풀어야 합니다.**\\n\\n## 1. Question\\n- Sample Input\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"5\\n2 4 6 8 3\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"- Sample Output\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"2 4 6 8 8\\n2 4 6 6 8\\n2 4 4 6 8\\n2 3 4 6 8\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"## 2. Process\\n1. 마지막 인덱스의 값을 앞의 값과 비교한다.\\n2. 해당 값을 잠시 저장한다.\\n3. 앞의 값이 더 크면 해당 값을 앞의 값과 자리를 교체한 후 log를 찍는다.\\n4. 해당 값을 앞의 값에 넣어준다.\\n5. 바꾼 값의 기준(n-1), 2 ~ 4번을 반복한다.\\n6. 전체 값을 확인 한 후 큰게 없으면 넘어간다.\\n7. 마지막에 결과값을 출력한다.\\n8. 배열 값이 기대값이 아니므로 join(' ') 메소드로 원하는 형태로 바꿔준다.\\n\\n## 3. Code\\n```tsx\\nfunction insertionSort1(n, arr) {\\n  for(var i = n - 1; i > 0; i--) {\\n    var temp = arr[i];\\n    if(arr[i-1] > arr[i]) {\\n      arr[i] = arr[i - 1];\\n      console.log(arr.join(' '));\\n      arr[i - 1] = temp;\\n      return insertionSort1(n-1, arr);\\n    }\\n  }\\n  console.log(arr.join(' '));\\n}\\n\\nfunction main() {\\n    var n = parseInt(readLine());\\n    arr = readLine().split(' ');\\n    arr = arr.map(Number);\\n    insertionSort1(n, arr);\\n}\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]}],\"data\":{\"quirksMode\":false}},\"fields\":{\"slug\":\"/JS-InsertionSort1/\",\"prefix\":\"2018-03-21\"},\"frontmatter\":{\"title\":\"[Algorithm/JavaScript] HackerRank - InsertionSort Part 1\",\"subTitle\":null,\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/javascript-6d93ec51422bb2939dc8b1b76d7e42fc-ada8c.jpeg\"}}}}},\"author\":{\"id\":\"/Users/hunseol/git/seolhun.github.io/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>코드로 세상에 기여하고 싶은 개발자 설훈입니다. JavaScript와 TypeScript, React, Vue를 좋아하며 재사용할 수 있는 코드에 지대한 관심을 가지고 있습니다. 현재 TypeScript를 기반으로 React-Component를 만들고 있으며, Github 기반의 개발자 커뮤니티를 구축하고 있습니다.</p>\"},\"footnote\":{\"id\":\"/Users/hunseol/git/seolhun.github.io/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"<ul>\\n<li>This is Seolhun Tech blog : <a href=\\\"https://seolhun.github.io/\\\">Seolhun - Tech Blog</a></li>\\n<li>Built by <a href=\\\"https://github.com/Seolhun\\\">Seolhun</a></li>\\n<li>contact : <a href=\\\"mailto:shun10116@gmail.com\\\">shun10116@gmail.com</a></li>\\n</ul>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"543531359431658\"}}}},\"pathContext\":{\"slug\":\"/JS-InsertionSort1/\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---js-insertion-sort-1-10ae3a36141d8ebe2641.js","module.exports = {\"data\":{\"post\":{\"id\":\"/Users/hunseol/git/seolhun.github.io/content/posts/2018-03-21--JS-InsertionSort1/index.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>안녕하세요, 설훈입니다.\\n이번에 친구와 함께 해커랭크에 1일 1알고리즘을 스터디를 시작하였습니다.\\n알고리즘 사이트는 <code class=\\\"language-text\\\">HackerRank</code>로 선정하였습니다. 깃허브와 연동 및 기록도 남고 오류 확인 등 사이트가 아주 잘 되어있어 편리하기 때문입니다.\\n앞으로 영어공부도 할 겸 일석 삼조 효과를 거둘 수 있는 스터디가 되었으면 좋겠습니다.</p>\\n<p>Sort부터 해서 차례대로 나아가도록 하겠습니다.\\n<a href=\\\"https://www.hackerrank.com/challenges/insertionsort1/problem\\\">HackerRank - Sort - Insertion Sort Part 1</a></p>\\n<h2>0. Intro</h2>\\n<p>Insertion Sort는 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다.\\nInsertion Sort은 왼쪽부터 정렬하여 정렬된 수 모두 비교하여 정렬된 수보다 크면 오른쪽에, 작으면 왼쪽에 정렬해 나간다.</p>\\n<ul>\\n<li>\\n<p>Example)</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">5 3 4 2 1</code></pre>\\n      </div>\\n</li>\\n</ul>\\n<p>5 3 4 2 1\\n3 5 4 2 1\\n3 4 5 2 1\\n2 3 4 5 1\\n1 2 3 4 5</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">Selection Sort이나 Bubble Sort같은 O(n2) 알고리즘에 비교하여 빠르며, 안정 정렬이고 in-place 알고리즘이다.\\n**중요한 것은 이번 문제는 앞에서부터가 아니라 뒤에서부터 비교를 원한다. 이점을 유의하면서 풀어야 합니다.**\\n\\n## 1. Question\\n- Sample Input</code></pre>\\n      </div>\\n<p>5\\n2 4 6 8 3</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">- Sample Output</code></pre>\\n      </div>\\n<p>2 4 6 8 8\\n2 4 6 6 8\\n2 4 4 6 8\\n2 3 4 6 8</p>\\n<div class=\\\"gatsby-highlight\\\" data-language=\\\"text\\\">\\n      <pre class=\\\"language-text\\\"><code class=\\\"language-text\\\">## 2. Process\\n1. 마지막 인덱스의 값을 앞의 값과 비교한다.\\n2. 해당 값을 잠시 저장한다.\\n3. 앞의 값이 더 크면 해당 값을 앞의 값과 자리를 교체한 후 log를 찍는다.\\n4. 해당 값을 앞의 값에 넣어준다.\\n5. 바꾼 값의 기준(n-1), 2 ~ 4번을 반복한다.\\n6. 전체 값을 확인 한 후 큰게 없으면 넘어간다.\\n7. 마지막에 결과값을 출력한다.\\n8. 배열 값이 기대값이 아니므로 join(&#39; &#39;) 메소드로 원하는 형태로 바꿔준다.\\n\\n## 3. Code\\n```tsx\\nfunction insertionSort1(n, arr) {\\n  for(var i = n - 1; i &gt; 0; i--) {\\n    var temp = arr[i];\\n    if(arr[i-1] &gt; arr[i]) {\\n      arr[i] = arr[i - 1];\\n      console.log(arr.join(&#39; &#39;));\\n      arr[i - 1] = temp;\\n      return insertionSort1(n-1, arr);\\n    }\\n  }\\n  console.log(arr.join(&#39; &#39;));\\n}\\n\\nfunction main() {\\n    var n = parseInt(readLine());\\n    arr = readLine().split(&#39; &#39;);\\n    arr = arr.map(Number);\\n    insertionSort1(n, arr);\\n}</code></pre>\\n      </div>\",\"htmlAst\":{\"type\":\"root\",\"children\":[{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"안녕하세요, 설훈입니다.\\n이번에 친구와 함께 해커랭크에 1일 1알고리즘을 스터디를 시작하였습니다.\\n알고리즘 사이트는 \"},{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"HackerRank\"}]},{\"type\":\"text\",\"value\":\"로 선정하였습니다. 깃허브와 연동 및 기록도 남고 오류 확인 등 사이트가 아주 잘 되어있어 편리하기 때문입니다.\\n앞으로 영어공부도 할 겸 일석 삼조 효과를 거둘 수 있는 스터디가 되었으면 좋겠습니다.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Sort부터 해서 차례대로 나아가도록 하겠습니다.\\n\"},{\"type\":\"element\",\"tagName\":\"a\",\"properties\":{\"href\":\"https://www.hackerrank.com/challenges/insertionsort1/problem\"},\"children\":[{\"type\":\"text\",\"value\":\"HackerRank - Sort - Insertion Sort Part 1\"}]}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"h2\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"0. Intro\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Insertion Sort는 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다.\\nInsertion Sort은 왼쪽부터 정렬하여 정렬된 수 모두 비교하여 정렬된 수보다 크면 오른쪽에, 작으면 왼쪽에 정렬해 나간다.\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"ul\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"li\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"Example)\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"5 3 4 2 1\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"5 3 4 2 1\\n3 5 4 2 1\\n3 4 5 2 1\\n2 3 4 5 1\\n1 2 3 4 5\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"Selection Sort이나 Bubble Sort같은 O(n2) 알고리즘에 비교하여 빠르며, 안정 정렬이고 in-place 알고리즘이다.\\n**중요한 것은 이번 문제는 앞에서부터가 아니라 뒤에서부터 비교를 원한다. 이점을 유의하면서 풀어야 합니다.**\\n\\n## 1. Question\\n- Sample Input\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"5\\n2 4 6 8 3\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"- Sample Output\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"p\",\"properties\":{},\"children\":[{\"type\":\"text\",\"value\":\"2 4 6 8 8\\n2 4 6 6 8\\n2 4 4 6 8\\n2 3 4 6 8\"}]},{\"type\":\"text\",\"value\":\"\\n\"},{\"type\":\"element\",\"tagName\":\"div\",\"properties\":{\"className\":[\"gatsby-highlight\"],\"dataLanguage\":\"text\"},\"children\":[{\"type\":\"text\",\"value\":\"\\n      \"},{\"type\":\"element\",\"tagName\":\"pre\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"element\",\"tagName\":\"code\",\"properties\":{\"className\":[\"language-text\"]},\"children\":[{\"type\":\"text\",\"value\":\"## 2. Process\\n1. 마지막 인덱스의 값을 앞의 값과 비교한다.\\n2. 해당 값을 잠시 저장한다.\\n3. 앞의 값이 더 크면 해당 값을 앞의 값과 자리를 교체한 후 log를 찍는다.\\n4. 해당 값을 앞의 값에 넣어준다.\\n5. 바꾼 값의 기준(n-1), 2 ~ 4번을 반복한다.\\n6. 전체 값을 확인 한 후 큰게 없으면 넘어간다.\\n7. 마지막에 결과값을 출력한다.\\n8. 배열 값이 기대값이 아니므로 join(' ') 메소드로 원하는 형태로 바꿔준다.\\n\\n## 3. Code\\n```tsx\\nfunction insertionSort1(n, arr) {\\n  for(var i = n - 1; i > 0; i--) {\\n    var temp = arr[i];\\n    if(arr[i-1] > arr[i]) {\\n      arr[i] = arr[i - 1];\\n      console.log(arr.join(' '));\\n      arr[i - 1] = temp;\\n      return insertionSort1(n-1, arr);\\n    }\\n  }\\n  console.log(arr.join(' '));\\n}\\n\\nfunction main() {\\n    var n = parseInt(readLine());\\n    arr = readLine().split(' ');\\n    arr = arr.map(Number);\\n    insertionSort1(n, arr);\\n}\"}]}]},{\"type\":\"text\",\"value\":\"\\n      \"}]}],\"data\":{\"quirksMode\":false}},\"fields\":{\"slug\":\"/JS-InsertionSort1/\",\"prefix\":\"2018-03-21\"},\"frontmatter\":{\"title\":\"[Algorithm/JavaScript] HackerRank - InsertionSort Part 1\",\"subTitle\":null,\"cover\":{\"childImageSharp\":{\"resize\":{\"src\":\"/static/javascript-6d93ec51422bb2939dc8b1b76d7e42fc-ada8c.jpeg\"}}}}},\"author\":{\"id\":\"/Users/hunseol/git/seolhun.github.io/content/parts/author.md absPath of file >>> MarkdownRemark\",\"html\":\"<p>코드로 세상에 기여하고 싶은 개발자 설훈입니다. JavaScript와 TypeScript, React, Vue를 좋아하며 재사용할 수 있는 코드에 지대한 관심을 가지고 있습니다. 현재 TypeScript를 기반으로 React-Component를 만들고 있으며, Github 기반의 개발자 커뮤니티를 구축하고 있습니다.</p>\"},\"footnote\":{\"id\":\"/Users/hunseol/git/seolhun.github.io/content/parts/footnote.md absPath of file >>> MarkdownRemark\",\"html\":\"<ul>\\n<li>This is Seolhun Tech blog : <a href=\\\"https://seolhun.github.io/\\\">Seolhun - Tech Blog</a></li>\\n<li>Built by <a href=\\\"https://github.com/Seolhun\\\">Seolhun</a></li>\\n<li>contact : <a href=\\\"mailto:shun10116@gmail.com\\\">shun10116@gmail.com</a></li>\\n</ul>\"},\"site\":{\"siteMetadata\":{\"facebook\":{\"appId\":\"543531359431658\"}}}},\"pathContext\":{\"slug\":\"/JS-InsertionSort1/\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/js-insertion-sort-1.json\n// module id = 823\n// module chunks = 203609798636730"],"sourceRoot":""}
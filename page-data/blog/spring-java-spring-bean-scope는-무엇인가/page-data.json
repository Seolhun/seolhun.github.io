{"componentChunkName":"component---src-templates-post-tsx","path":"/blog/spring-java-spring-bean-scope는-무엇인가","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"html":"<p>오늘 N사 면접을 보면서 개인적으로 몰랐었던 부분을 몇가지 정리하는 시간을 가져볼까 합니다. Spring을 최근에 이용하지 않은지가 반년이 넘어서 가물가물해서 더 어려웠던 면접이었는데요, 변명을 뒤로하고 몰랐던 부분은 알아가는 것이 더 중요한 것이니까, 이번 기회에 관련된 질문에 대해 정리하려합니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>잘 대답하지 못했던 부분이나 전혀 알지 못했던 3가지를 추려서 정리를 하려고합니다. 3가지는 아래와 같이 선정하였습니다.</p>\n<ul>\n<li>Spring, Bean Scope</li>\n<li>Java Garbage Collector</li>\n<li>\n<p>Log Service Architecture &#x26; Module</p>\n<ul>\n<li>Lambda Architecture</li>\n<li>...</li>\n</ul>\n</li>\n</ul>\n<p>먼저, 작성하고자 하는것은 Spring에서 Bean Scope라는 개념입니다. 개인적으로 Spring의 Bean은 Singleton으로만 알고/사용했었습니다. 필요에 따라 인스턴스가 다를 수 있겠다라는 생각도하여 잘 대답을 못했습니다. 그러나, Bean Scope에 대한 질문의 핵심은 IoC와 DI에 대한 응용질문이라고 생각합니다. Spring은 Container에 의해 Bean을 관리하고 인스턴스화하여 주입하는 것이 기본적인 핵심개념입니다. 여기서 더 나아가 생각하면 해당 Bean을 인스턴스화 할때마다 Singleton이 아닌 다른 방법으로 인스턴스화하는 것이 더 효율일 수 있다는 추론을 할 수 있습니다. (개인적으로 경험해보지는 못했지만, 각 경우에 따라 실행되어야 할 인스턴스가 있을 수 있습니다.) 이러한 상황에 사용되는것이 바로 Bean Scope입니다.</p>\n<h2 id=\"bean-scope란\"><a href=\"#bean-scope%EB%9E%80\" aria-label=\"bean scope란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bean Scope란?</h2>\n<p>Spring의 Bean Scope는 Spring에서 Bean 생성의 범위를 설정할 수 있도록 만들어준 기능입니다.</p>\n<p>Spring에서 Bean Scope의 기본 설정은 <code class=\"language-text\">singleton</code>으로, 해당 Container 안에서 DI가 일어날 때 scope의 범위를 확인하여 Container에서 인스턴스를 생성합니다. 만약, 해당 Bean에 대해서 Scope를 설정하지 않으면 1개의 인스턴스만 생성하여 사용됩니다. 그 외에 getBean() 메소드를 콜할 때, Request 요청 때, Session을 이용할 때 등 다양한 Scope가 존재합니다. 이와 관련된 Bean Scope 종류에 대해 간단히 알아보겠습니다.</p>\n<h2 id=\"bean-scope-종류\"><a href=\"#bean-scope-%EC%A2%85%EB%A5%98\" aria-label=\"bean scope 종류 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Bean Scope 종류</h2>\n<table class=\"table table-dark\">\n  <tr>\n    <th>\n      Scope\n    </th>\n    <th>\n      Description\n    </th>\n  </tr>\n  <tr>\n    <td>\n      singleton\n    </td>\n    <td>\n      단일 Bean 정의를 Spring IoC 컨테이너별로 하나의 객체 인스턴스로 범위 지정한다.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      prototype\n    </td>\n    <td>\n      단일 Bean 정의를 원하는 수의 오브젝트 인스턴스로 확장합니다.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      request\n    </td>\n    <td>\n      단일 Bean 정의를 단일 HTTP 요청의 라이프 사이클 범위로 범위 지정합니다. 즉, 각각의 모든 HTTP 요청은 단일 Bean 정의의 뒤쪽에서 생성 된 자체 Bean 인스턴스를 갖게됩니다. 웹 인식 Spring ApplicationContext의 컨텍스트에서만 유효합니다.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      session\n    </td>\n    <td>\n      단일 Bean 정의를 HTTP 세션의 라이프 사이클 범위로 범위 지정합니다. 웹 인식 Spring ApplicationContext의 컨텍스트에서만 유효합니다.\n    </td>\n  </tr>\n  <tr>\n    <td>\n      global session\n    </td>\n    <td>\n      단일 Bean 정의를 전역 HTTP 세션의 라이프 사이클 범위로 확장합니다. 일반적으로 portlet context에서 사용되는 경우에만 유효합니다. 웹 인식 Spring ApplicationContext의 컨텍스트에서만 유효합니다.\n    </td>\n  </tr>\n    <tr>\n    <td>\n      application\n    </td>\n    <td>\n      단일 Bean 정의를 ServletContext의 라이프 사이클 범위로 범위 지정합니다. 웹 인식 Spring ApplicationContext의 컨텍스트에서만 유효합니다.\n    </td>\n  </tr>\n  </tr>\n    <tr>\n    <td>\n      websocket\n    </td>\n    <td>\n      단일 bean 정의를 WebSocket의 라이프 사이클 범위로 범위 지정합니다. 웹 인식 Spring ApplicationContext의 컨텍스트에서만 유효합니다.\n    </td>\n  </tr>\n</table>\n<h5 id=\"--주의사항\"><a href=\"#--%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"  주의사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 주의사항</h5>\n<blockquote>\n<p>request, session, global session, application, websocket의 Scope는 일반 Spring 어플리케이션이 아닌, Spring MVC Web Application에서만 사용되는 용도입니다. 이러한 범위를 벗어나 ClassPathXmlApplicationContext와 같은 일반적인 Spring IoC 컨테이너와 함께 사용하면 알 수 없는 Bean Scope에 대해 IllegalStateException이 발생합니다.</p>\n</blockquote>\n<h2 id=\"singleton\"><a href=\"#singleton\" aria-label=\"singleton permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Singleton</h2>\n<p>Bean의 하나의 인스턴스만 관리되고, 그 Bean 정의와 일치하는 id를 가진 모든 Bean 요청은 Spring 컨테이너에 의해 하나의 인스턴스만을 반환하게 됩니다. 즉, Bean 설정을 정의하고 Singleton으로 범위를 지정하면 Spring IoC 컨테이너는 해당 Bean 객체의 인스턴스 하나만 정확히 생성합니다. <code class=\"language-text\">이 단일 인스턴스는 이러한 Singleton Bean의 캐시에 저장되며 그 이후의 모든 요청 및 참조 된 해당 Bean에 대한 참조로 인해 캐시 된 객체가 반환됩니다.</code></p>\n<h4 id=\"--간단한-사용방법\"><a href=\"#--%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95\" aria-label=\"  간단한 사용방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 간단한 사용방법</h4>\n<ul>\n<li>\n<p>Annotation</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>context<span class=\"token punctuation\">.</span>annotation</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scope</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">org<span class=\"token punctuation\">.</span>springframework<span class=\"token punctuation\">.</span>stereotype</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Service</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>@Service(\"singletonService\")\n@Scope(\"singletone\")\npublic class SingletonService {\n// ...\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- XML\n```xml\n&lt;bean id=&quot;singletonService&quot; class=&quot;com.foo.SingletonService&quot;/&gt;\n&lt;bean id=&quot;singletonService&quot; class=&quot;com.foo.SingletonService&quot; scope=&quot;singleton&quot;/&gt;\n&lt;bean id=&quot;singletonService&quot; class=&quot;com.foo.SingletonService&quot; singleton=&quot;true&quot;/&gt;</code></pre></div>\n<p>Annotation을 이용하여 해당 Bean을 등록할 때, 간단하게 스코프를 설정할 수 있습니다. 혹은, XML에 위와 같이 설정할 수 있습니다. 아무설정이 없어도 Default 값이 Singleton이기 때문에 Spring은 해당 Bean을 Singleton으로 생성합니다.</p>\n<h2 id=\"prototpye\"><a href=\"#prototpye\" aria-label=\"prototpye permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prototpye</h2>\n<p>Bean 구현의 non-singleton, Prototype 범위는 특정 Bean에 대한 요청이 만들어 질 때마다 즉, 다른 Bean에 주입되거나 프로그래밍 방식의 getBean() 메소드를 통해 요청 될 때마다 새로운 Bean 인스턴스를 컨테이너에 요청하여 생성합니다. 일반적으로 상태 기반 Bean에 대해서는 Prototype Bean을 사용하고 상태없는 Bean에는 Singleton Scope를 사용해야합니다. (개인적으로 이부분이 어려운데, 해당 Bean이 상태값을 가지고 있어 고유한 값이 필요할 경우 Prototype을 사용하는 것이 좋다는 것으로 해석됩니다.)</p>\n<p>Prototype Scope는 다른 Scope와 달리 Spring Container에서 라이프 사이클을 관리하지 않습니다. 즉, 컨테이너는 Prototype 객체의 인스턴스화, 구성 및 어셈블 한 다음 Prototpye 인스턴스를 더 이상 기록하지 않고 클라이언트에 전달합니다. 즉, 클라이언트 코드는 Prototype Scope 객체를 정리하고 Prototype Bean이 보유하고있는 값 비싼 리소스를 제거해야합니다. Spring 컨테이너가 프로토 타입 범위의 빈에 의해 보유 된 리소스를 해제하려면 <a href=\"https://docs.spring.io/spring/docs/4.3.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-extension-bpp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Customizing beans using a BeanPostProcessor</a>를 참조하시기 바랍니다.</p>\n<h4 id=\"--prototype을-singleton과-함께-사용-할-경우-주의사항\"><a href=\"#--prototype%EC%9D%84-singleton%EA%B3%BC-%ED%95%A8%EA%BB%98-%EC%82%AC%EC%9A%A9-%ED%95%A0-%EA%B2%BD%EC%9A%B0-%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"  prototype을 singleton과 함께 사용 할 경우 주의사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Prototype을 Singleton과 함께 사용 할 경우 주의사항</h4>\n<p>Prototype Bean에 종속성이 있는 Singleton Scope Bean을 사용하는 경우 인스턴스화시 종속성이 해결된다는 점에 유의하십시오. 따라서 Prototype 범위의 Bean을 Singleton 범위의 Bean에 종속성을 주입하면 새로운 Prototype Bean이 인스턴스화 된 Singleton Bean에 종속성이 주입됩니다. Prototype 인스턴스는 Singleton Scope의 빈에 제공되는 유일한 인스턴스입니다.</p>\n<p>그러나, Single Scope의 Bean이 Prototype Scope의 Bean의 새로운 인스턴스를 런타임 마다 반복적으로 획득하기를 원할 때 문제가 발생합니다. 왜냐하면, Spring 컨테이너가 Singleton Bean을 인스턴스화하고 Prototype Scope의 Bean의 의존성을 해결하고 주입 할 때, Prototype의 Bean 인스턴스화는 한 번만 발생하기 때문입니다.</p>\n<p><code class=\"language-text\">즉, 런타임에 Prototype Bean의 새로운 인스턴스가 두 번 이상 필요할 경우, 해결책은 IoC를 수동적으로 통제하는 것입니다.</code> 예로, ApplicationContextAware 인터페이스를 구현하여 컨테이너가 이를 인식하게 만든 뒤, Singleton Bean(A)이 의존성이 주입된 Prototype Scope(B)의 Bean을 필요로 할 때마다 컨테이너에 대한 getBean('B') 호출로 Bean B 새로운 인스턴스를 요청할 수 있습니다.</p>\n<p>이와 관련된 자세한 방법은 <a href=\"https://docs.spring.io/spring/docs/4.3.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-method-injection\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Method injection</a>을 참조하면 도움이 될 것으로 생각합니다.</p>\n<h2 id=\"request\"><a href=\"#request\" aria-label=\"request permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Request</h2>\n<p><code class=\"language-text\">Spring 컨테이너는 각 HTTP 요청마다 request Bean으로 정의된 Bean을 새로운 인스턴스로 생성합니다.</code> 즉, 아래 예제를 이용하면 requestAction Bean의 범위는 HTTP 요청 레벨로 지정(한정)됩니다. 동일한 requestAction Bean 정의에서 작성된 다른 인스턴스는 상태에서 이러한 변경 사항을 볼 수 없기 때문에 원하는만큼 작성된 인스턴스의 내부 상태를 변경할 수 있습니다. 그것들은 개별 요청에 특정적입니다. <code class=\"language-text\">요청이 처리를 완료하면 요청에 적용되는 Bean은 삭제됩니다.</code></p>\n<p>Annotation 또는 Java Config를 사용하는 경우 <code class=\"language-text\">@RequestScope</code> Annotation을 사용하여 요청 범위에 구성 요소를 할당 할 수 있습니다.</p>\n<h4 id=\"--간단한-사용방법-1\"><a href=\"#--%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95-1\" aria-label=\"  간단한 사용방법 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 간단한 사용방법</h4>\n<ul>\n<li>\n<p>Annotation</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@RequestScope</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RequestAction</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>XML</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>requestAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.foo.RequestAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>request<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"session\"><a href=\"#session\" aria-label=\"session permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Session</h2>\n<p><code class=\"language-text\">Spring 컨테이너는 단일 HTTP 세션의 유효 기간 동안 sessionAction Bean 정의를 사용하여 SessionAction bean의 새로운 인스턴스를 생성합니다.</code> 즉, sessionAction Bean은 HTTP Session 레벨에서 유효 범위가 지정됩니다. 요청 범위 Bean과 마찬가지로 원하는만큼 생성 된 인스턴스의 내부 상태를 변경할 수 있습니다. 하지만, 동일한 sessionAction Bean을 정의에서 생성 된 인스턴스들은 다른 HTTP Session 인스턴스가 이러한 변경 상태를 인식하지 못합니다. <code class=\"language-text\">이는 개별 HTTP 세션에 고유하기 때문입니다. 즉, HTTP 세션이 결국 만료(폐기)되면 해당 특정 HTTP 세션으로 범위가 지정된 Bean도 삭제됩니다.</code></p>\n<p>주석 기반 구성 요소 또는 Java Config를 사용하는 경우 @SessionScope 주석을 사용하여 세션 범위에 구성 요소를 할당 할 수 있습니다.</p>\n<h4 id=\"--간단한-사용방법-2\"><a href=\"#--%EA%B0%84%EB%8B%A8%ED%95%9C-%EC%82%AC%EC%9A%A9%EB%B0%A9%EB%B2%95-2\" aria-label=\"  간단한 사용방법 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 간단한 사용방법</h4>\n<ul>\n<li>\n<p>Annotation</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token annotation punctuation\">@SessionScope</span>\n<span class=\"token annotation punctuation\">@Component</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SessionAction</span> <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>XML</p>\n<div class=\"gatsby-highlight\" data-language=\"xml\"><pre class=\"language-xml\"><code class=\"language-xml\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>bean</span> <span class=\"token attr-name\">id</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>sessionAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>com.foo.SessionAction<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">scope</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>session<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">/></span></span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>Bean Scope가 중요한 이유는, Spring의 IoC(Inversion of Control)라는 핵심 개념때문입니다. Spring을 이용하면 개발자가 어플리케이션에 필요한 메모리를 관리해야하는 부분이 거의 존재하지 않습니다. 하지만, 이러한 장점은 개발자에게 단점으로 작용할 수 있습니다. 간단한 예로, 해당 Bean을 특정한 경우에만 인스턴스화하고 싶을 경우입니다. 해당 Bean 인스턴스에 대한 상태 값 같은 것을 포함하여 해당 인스턴스에 대한 변화값을 추적해야 할 경우가 Bean Scope가 필요한 경우라고 말할 수 있습니다.</p>\n<p>또한, 위에서도 언급했지만 Prototype Bean을 Singleton Bean의 주입하여 이용할 경우 IoC가 이를 알 수 없어 개발자가 직접 Context에 명시하여 해당 인스턴스를 관리해야 합니다. 이러한 경우 필요한 것이 BeanPostProcessor, ApplicationContextAware 등과 같은 인터페이스입니다. 여기서 중요한 것은 IoC의 개념과 장단점을 이해하여 왜 이러한 구현체(인터페이스)가 필요한지를 이해한다면 Spring을 더 잘 이용할 수 있다고 생각합니다.</p>\n<p>결론적으로, 이번 정리를 통해 Bean Scope에 대해 답한다면 <code class=\"language-text\">Spring Bean Scope는, 해당 Bean이 필요에 따라 인스턴스화할 수 있게 만들어 효과적인 메모리를 관리를 가능하게 만드는 기능</code>이라고 말할 것 같습니다. 이상 부족한 글을 마치고자 합니다.</p>\n<p>간단히 Spring Scope에 대해 정리해보려고 했지만, 간단한 키워드로는 용도를 추론해내는데 어려움이 스프링 문서를 기반으로 정독하면서 알아보았습니다. 또한, Bean이란 개념 자체가 Spring에 IoC, DI와 같은 핵심개념과 밀접한 개념이기 때문에 이와 관련한 내용에 대한 이해가 선행되어야 되기때문에 자세히 들어갈수록 많은 어려움이 있었습니다. 부족한 것은 차차 수정하면서 해결하겠습니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://docs.spring.io/spring/docs/4.3.9.RELEASE/spring-framework-reference/html/beans.html#beans-factory-scopes\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Spring Reference 4.3.9 Release</a></li>\n<li><a href=\"https://www.slipp.net/wiki/pages/viewpage.action?pageId=25528177\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Java Slipp - Bean Scope</a></li>\n</ul>","fields":{"slug":"spring-java-spring-bean-scope는-무엇인가"},"frontmatter":{"title":"[Spring/Java] Spring Bean Scope는 무엇인가?","date":"25.04.2018","category":"Spring","tags":["Spring","Java","Bean","Scope","Singleton","Prototype"],"banner":null},"timeToRead":7}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"spring-java-spring-bean-scope는-무엇인가","prev":{"excerpt":"이번에는 웹사이트를 개선하기 위한 구글에서 추천하는 방법들에 간단히 정리해볼까 합니다. 서비스의 성공을 위해 이제는 프론트엔드의 중요성이 많이 커진 만큼 유저들이 불편하지 않도록 만들기 위한 웹 사이트 최적화 방법을 이해/숙지하면 큰 도움이 될 것이라 생각하였습니다. Intro 구글에서 잘 정리한 웹 사이트를 개선하기 위한…","html":"<p>이번에는 웹사이트를 개선하기 위한 구글에서 추천하는 방법들에 간단히 정리해볼까 합니다. 서비스의 성공을 위해 이제는 프론트엔드의 중요성이 많이 커진 만큼 유저들이 불편하지 않도록 만들기 위한 웹 사이트 최적화 방법을 이해/숙지하면 큰 도움이 될 것이라 생각하였습니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>구글에서 잘 정리한 웹 사이트를 개선하기 위한 9가지 방법에 대해서 필요한 정보들을 모아서 정리해보는 시간을 가져볼까 합니다. 너무 잘 작성된 글이지만, 이를 한번 더 정독하면서 조금씩 정리하면 이해하고 숙지하는데 더 큰 도움이 되어 이런 시간을 가져볼까 합니다.</p>\n<p>목차는 내용이 커질것으로 생각하여 아래와 같이 2개의 파트로 나눠서 적어볼까 합니다.</p>\n<h4 id=\"--part-1\"><a href=\"#--part-1\" aria-label=\"  part 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <a href=\"/posts/web/20180423-web-howtooptimizeweb1/\">Part 1</a></h4>\n<ul>\n<li>방문 페이지 리디렉션 사용 안함</li>\n<li>압축 사용</li>\n<li>서버 응답 시간 개선</li>\n<li>브라우저 캐싱 활용</li>\n</ul>\n<h4 id=\"--part-2\"><a href=\"#--part-2\" aria-label=\"  part 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <a href=\"/posts/web/20180423-web-howtooptimizeweb2/\">Part 2</a></h4>\n<ul>\n<li>리소스 축소</li>\n<li>이미지 최적화</li>\n<li>CSS 전송 최적화</li>\n<li>표시되는 콘텐츠의 우선순위 지정</li>\n<li>렌더링 차단 자바스크립트 삭제</li>\n</ul>\n<h2 id=\"1-방문-페이지-리디렉션-방지\"><a href=\"#1-%EB%B0%A9%EB%AC%B8-%ED%8E%98%EC%9D%B4%EC%A7%80-%EB%A6%AC%EB%94%94%EB%A0%89%EC%85%98-%EB%B0%A9%EC%A7%80\" aria-label=\"1 방문 페이지 리디렉션 방지 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 방문 페이지 리디렉션 방지</h2>\n<p>이 규칙은 지정된 URL에서 최종 방문 페이지로의 리디렉션이 둘 이상 있음이 PageSpeed Insights에서 감지되면 트리거됩니다.</p>\n<h4 id=\"--개요\"><a href=\"#--%EA%B0%9C%EC%9A%94\" aria-label=\"  개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p><code class=\"language-text\">리디렉션은 HTTP 요청과 응답 간 주기를 추가로 트리거하고 페이지 렌더링을 지연시킵니다.</code> 각 리디렉션이 단일 왕복(HTTP 요청과 응답 간)을 추가하면 가장 좋지만, 최악의 경우 DNS 조회, TCP 핸드셰이크, TLS 협상을 위한 여러 추가적인 왕복에 더해 HTTP 요청과 응답 간 주기가 추가로 발생합니다. 따라서 사이트 속도를 개선하려면 리디렉션의 사용을 최소화해야 합니다.</p>\n<h4 id=\"--다음은-리디렉션-패턴의-예\"><a href=\"#--%EB%8B%A4%EC%9D%8C%EC%9D%80-%EB%A6%AC%EB%94%94%EB%A0%89%EC%85%98-%ED%8C%A8%ED%84%B4%EC%9D%98-%EC%98%88\" aria-label=\"  다음은 리디렉션 패턴의 예 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 다음은 리디렉션 패턴의 예</h4>\n<ol>\n<li>example.com에서는 반응형 웹 디자인을 사용하여 리디렉션이 필요하지 않으며 빠르고 최적화된 상태입니다.</li>\n<li>example.com → m.example.com/home - 모바일 사용자가 여러 번 왕복해야 하는 불편함이 있습니다.</li>\n<li>example.com → www.example.com → m.example.com - 모바일 환경이 매우 느립니다.</li>\n</ol>\n<h4 id=\"--해결책\"><a href=\"#--%ED%95%B4%EA%B2%B0%EC%B1%85\" aria-label=\"  해결책 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 해결책</h4>\n<ul>\n<li>Responsive Design 적용하기</li>\n<li>\n<p>ViewPort 적용하기</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width, initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>meta viewport 값 width=device-width를 사용하면 기기 독립적 픽셀에서 화면 너비에 맞게 페이지를 맞춥니다. 이렇게 하면 렌더링되는 화면이 작은 휴대폰이든 큰 데스크톱 모니터에든 상관없이, 다양한 화면 크기에 맞게 페이지의 콘텐츠를 재배치할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>CSS 미디어 쿼리 적용</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>print.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>print<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"css\"><pre class=\"language-css\"><code class=\"language-css\"><span class=\"token atrule\"><span class=\"token rule\">@media</span> print</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* print style sheets go here */</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token atrule\"><span class=\"token rule\">@import</span> <span class=\"token url\"><span class=\"token function\">url</span><span class=\"token punctuation\">(</span>print.css<span class=\"token punctuation\">)</span></span> print<span class=\"token punctuation\">;</span></span></code></pre></div>\n</li>\n<li>\n<p>미디어 중단점을 활용한 CSS 작성</p>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>weather.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(max-width:600px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>weather-2-small.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(min-width:601px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>weather-2-large.css<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n</li>\n</ul>\n<h4 id=\"--더-보기\"><a href=\"#--%EB%8D%94-%EB%B3%B4%EA%B8%B0\" aria-label=\"  더 보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 더 보기</h4>\n<p>위의 사항을 더 알고싶으신 분들은 여기를 정독하세요. <a href=\"https://developers.google.com/web/fundamentals/design-and-ux/responsive/#responsive-web-design\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google - Responsive-web-design</a></p>\n<h2 id=\"2-압축-사용\"><a href=\"#2-%EC%95%95%EC%B6%95-%EC%82%AC%EC%9A%A9\" aria-label=\"2 압축 사용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 압축 사용</h2>\n<p>이 규칙은 PageSpeed Insights에서 압축 가능한 리소스가 gzip으로 압축되지 않은 상태로 전송되었음이 감지되면 트리거됩니다.</p>\n<h4 id=\"--개요-1\"><a href=\"#--%EA%B0%9C%EC%9A%94-1\" aria-label=\"  개요 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p><code class=\"language-text\">모든 최신 브라우저는 모든 HTTP 요청에서 gzip 압축을 지원하고 자동으로 협상합니다.</code> gzip 압축을 사용하면 전송되는 응답의 크기를 최대 90%까지 줄일 수 있으며, 이를 통해 리소스 다운로드 시간을 크게 낮추고 클라이언트의 데이터 사용량을 줄이며 페이지의 첫 번째 렌더링 시간을 향상할 수 있습니다. 자세히 알아보려면 <a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/optimize-encoding-and-transfer#text-compression-with-gzip\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GZIP을 사용한 텍스트 압축을 참조</a>하세요.</p>\n<h4 id=\"--권장사항\"><a href=\"#--%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD\" aria-label=\"  권장사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 권장사항</h4>\n<p>웹 서버에서 gzip 압축 지원을 사용 설정하고 테스트하세요. HTML5 Boilerplate 프로젝트에는 가장 많이 사용되는 모든 서버용 샘플 구성 파일과 각 구성 플래그 및 설정에 관한 자세한 설명이 포함되어 있습니다. 목록에서 원하는 서버를 찾고 gzip 섹션을 찾은 다음 사용하는 서버가 권장 설정과 같이 구성되어 있는지 확인하세요.</p>\n<ul>\n<li>\n<p>웹 서버에서 압축을 사용하는 방법은 아래 사이트에서 참조하세요.</p>\n<ul>\n<li>Apache: <a href=\"http://httpd.apache.org/docs/current/mod/mod_deflate.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">mod_deflate 사용</a></li>\n<li>Nginx: <a href=\"http://nginx.org/en/docs/http/ngx_http_gzip_module.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ngx<em>http</em>gzip_module 사용</a></li>\n<li>IIS: <a href=\"https://docs.microsoft.com/en-us/previous-versions/windows/it-pro/windows-server-2008-R2-and-2008/cc771003(v=ws.10)\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTTP 압축 구성</a></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-서버-응답-시간-개선\"><a href=\"#3-%EC%84%9C%EB%B2%84-%EC%9D%91%EB%8B%B5-%EC%8B%9C%EA%B0%84-%EA%B0%9C%EC%84%A0\" aria-label=\"3 서버 응답 시간 개선 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 서버 응답 시간 개선</h2>\n<p>이 규칙은 PageSpeed Insights에서 서버 응답 시간이 200 ms 이상임이 감지되면 트리거됩니다.</p>\n<h4 id=\"--개요-2\"><a href=\"#--%EA%B0%9C%EC%9A%94-2\" aria-label=\"  개요 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p>서버 응답 시간은 서버에서 페이지 렌더링을 시작하기 위해 필요한 HTML을 로드하는 데 걸리는 시간에서 Google과 서버 간 네트워크 지연 시간을 차감하여 측정합니다. 실행할 때마다 변동이 있을 수 있지만 차이는 별로 크지 않습니다. 실제로 변동이 심한 서버 응답 시간은 기반 성능에 문제가 있음을 나타낼 수 있습니다.</p>\n<h4 id=\"--권장사항-1\"><a href=\"#--%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD-1\" aria-label=\"  권장사항 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 권장사항</h4>\n<p><code class=\"language-text\">서버 응답 시간을 200 ms 아래로 줄여야 합니다.</code> 서버의 응답 속도를 저하시키는 요인으로는 느린 애플리케이션 로직, 느린 데이터베이스 쿼리, 느린 라우팅, 프레임워크, 라이브러리, 리소스 CPU 부족 현상 또는 메모리 부족 현상 등 수십 가지가 있습니다. 서버의 응답 시간을 개선하려면 이러한 모든 요인을 고려해야 합니다.</p>\n<p><code class=\"language-text\">서버 응답 시간이 높은 이유를 밝히기 위한 첫 단계는 측정입니다.</code> 그런 다음 데이터를 갖추고 문제 해결 방법에 관한 적절한 가이드를 참조하세요. 문제를 해결한 후에도 서버 응답 시간을 계속 측정하여 향후 성능 병목 현상을 해결해야 합니다.</p>\n<ol>\n<li>기존 성능과 데이터를 수집 및 검사합니다. 사용 가능한 성능과 데이터가 없으면 자동화된 웹 애플리케이션 모니터링 솔루션을 사용하여 평가하거나 맞춤 계측 도구를 추가하세요. 대부분의 플랫폼에서 사용할 수 있는 호스팅된 오픈소스 버전의 솔루션이 있습니다.</li>\n<li>상위 성능 병목 현상을 식별 및 해결합니다. 많이 사용되는 웹 프레임워크나 콘텐츠 관리 플랫폼을 사용하는 경우 성능 최적화 권장사항 도움말을 참조하세요.</li>\n<li>향후 있을 수 있는 성능 퇴행을 모니터링 및 경고합니다.</li>\n</ol>\n<h2 id=\"4-브라우저-캐싱-활용\"><a href=\"#4-%EB%B8%8C%EB%9D%BC%EC%9A%B0%EC%A0%80-%EC%BA%90%EC%8B%B1-%ED%99%9C%EC%9A%A9\" aria-label=\"4 브라우저 캐싱 활용 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 브라우저 캐싱 활용</h2>\n<p>이 규칙은 PageSpeed Insights에서 서버의 응답에 캐싱 헤더가 포함되어 있지 않음을 감지하거나 리소스가 잠깐 동안만 캐시되도록 지정된 경우 트리거됩니다.</p>\n<h4 id=\"--개요-3\"><a href=\"#--%EA%B0%9C%EC%9A%94-3\" aria-label=\"  개요 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p>네트워크를 통해 리소스를 가져오면 속도도 느리고 비용도 많이 듭니다. 즉, 다운로드하는 데 클라이언트와 서버 간에 왕복이 여러 번 발생할 수 있으며 이로 인해 처리가 지연되고 페이지 렌더링이 차단되며 방문자에게 데이터 비용이 부과될 수도 있습니다. <code class=\"language-text\">모든 서버 응답은 캐싱 정책을 지정해야 클라이언트에서 이전에 가져온 응답을 재사용할 수 있는지 여부와 시기를 판단하는 데 도움이 됩니다.</code></p>\n<h4 id=\"--권장사항-2\"><a href=\"#--%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD-2\" aria-label=\"  권장사항 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 권장사항</h4>\n<p>각 리소스는 이 리소스가 캐시될 수 있는지, 리소스를 누가 얼마 동안 캐시할 수 있는지, 가능한 경우 캐싱 정책이 만료되면 어떻게 효율적으로 재확인될 수 있는지와 같은 질문에 부합하는 명시적인 캐싱 정책을 지정해야 합니다. <code class=\"language-text\">서버에서 응답을 반환할 때 Cache-Control 및 ETag 헤더를 제공해야 합니다.</code></p>\n<ol>\n<li>Cache-Control 헤더는 브라우저 및 기타 중간 캐시에서 개별 응답을 캐시할 수 있는 방법과 기간을 정의합니다. 자세히 알아보려면 <a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#cache-control\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Cache-Control로 캐싱</a>을 참조하세요.</li>\n<li>ETag 헤더에서는 리소스가 마지막으로 요청된 후 변경되었는지 확인하기 위해 브라우저에서 자동으로 보내는 재확인 토큰을 제공합니다. 자세히 알아보려면 <a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#validating-cached-responses-with-etags\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ETag로 캐시된 응답의 유효성 검사</a>를 참조하세요.</li>\n<li>\n<p>사이트에 가장 적합한 캐싱 정책을 확인하려면 다음 가이드를 참조하세요.</p>\n<ol>\n<li>최적의 Cache-Control 정책 정의</li>\n<li>캐시된 응답 무효화 및 업데이트</li>\n<li>캐싱 검사 목록</li>\n</ol>\n</li>\n</ol>\n<p><code class=\"language-text\">최소 캐시 시간은 1주일이 좋으며 정적 애셋 또는 드물게 변경되는 애셋의 경우 최대 1년이 좋습니다.</code> 리소스가 무효화되는 시기를 정확히 관리해야 하는 경우 URL 지문이나 버전 기술을 사용하는 것이 좋습니다. 위의 캐시된 응답 무효화 및 업데이트 링크를 참조하세요.</p>\n<h4 id=\"--직접-확인해보기\"><a href=\"#--%EC%A7%81%EC%A0%91-%ED%99%95%EC%9D%B8%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"  직접 확인해보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 직접 확인해보기</h4>\n<p>참고하고 있는 사이트에서 Google Chrome Dev-Tools Network에 들어가서 Resources에 아래와 같은 Response(응답)을 확인할 수 있었습니다. 더 많은 정보가 있지만 관련된 정보만 가져왔고, 간단히 설명하기 위해 수정하였습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cache-control: public, max-age<span class=\"token operator\">=</span><span class=\"token number\">120</span>\ncontent-encoding: <span class=\"token function\">gzip</span>\ncontent-length: <span class=\"token number\">25852</span>\netag: <span class=\"token string\">\"aInfpg\"</span>\nstatus: <span class=\"token number\">200</span></code></pre></div>\n<p>서버가 응답을 반환할 때는 응답의 콘텐츠 유형, 길이, 캐싱 지시문, 유효성 검사 토큰 등을 설명하는 HTTP 헤더 모음도 방출합니다.\n예를 들어, 서버는 25852바이트의 응답을 반환하고, 클라이언트에 최대 120초 동안 이를 캐시하도록 지시하고, 응답이 만료된 후 리소스가 수정되었는지 확인하는 데 사용할 수 있는 유효성 검사 토큰('aInfpg')을 제공합니다.</p>\n<p>만약, 캐시가 종료된 후에 다시 Resources를 요청할 때, 변경사항이 없다면, 'If-None-Match' HTTP 요청 헤더 내에서 ETag 토큰을 자동으로 제공합니다. <code class=\"language-text\">서버는 현재 리소스와 비교하여 이 토큰을 검사하여 토큰이 변경되지 않은 경우, 서버는 &#39;304 Not Modified&#39; 응답을 반환합니다.</code> 이 응답은 캐시에 저장된 응답이 변경되지 않았고 추가로 120초 동안 갱신될 수 있음을 브라우저에 알립니다. 참고로, 응답을 다시 다운로드할 필요가 없으므로 시간과 대역폭이 절약됩니다.</p>\n<h4 id=\"--최적의-cache-control-정책-정의\"><a href=\"#--%EC%B5%9C%EC%A0%81%EC%9D%98-cache-control-%EC%A0%95%EC%B1%85-%EC%A0%95%EC%9D%98\" aria-label=\"  최적의 cache control 정책 정의 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 최적의 Cache-Control 정책 정의</h4>\n<div class='text-center'>\n  <img src=\"../../images/contents/20180423/optimization/http-cache-decision-tree.png\" width=\"50%\">\n</div>\n<h4 id=\"--더-보기-1\"><a href=\"#--%EB%8D%94-%EB%B3%B4%EA%B8%B0-1\" aria-label=\"  더 보기 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 더 보기</h4>\n<p>위의 사항을 자세히 보고싶으신 분들은 여기를 정독해주세요. <a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/http-caching#cache-control\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google - Cache Control</a></p>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>구글에서 참 잘정리된 문서를 통해 많은 내용을 학습할 수 있었습니다. 그 중 가장 흥미로운 글은 Cache-Control이라고 할 수 있었습니다. 이는 HTTP-완정정복 관련한 책에서도 나오는 내용입니다. HTTP관련한 최적화에는 Cache-Control을 반드시 잘 사용하라라는 내용을 담고 있는데, 이와 관련하여 브라우저와 네트워크 내용을 잘 정리하여 알려주었다고 생각합니다. 다음 5가지 관련사항은 Part2에서 정리해보겠습니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developers.google.com/speed/docs/insights/rules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google PageSpeed Insights</a></li>\n</ul>","id":"aa025e65-74d8-5381-bb64-1199e7b1d361","fields":{"slug":"web-웹사이트의-속도를-개선할-수-있는-방법-9-가지-정리-part-1"},"frontmatter":{"date":"2018-04-23T00:00:00.000Z","title":"[Web] 웹사이트의 속도를 개선할 수 있는 방법 9가지 정리 - Part 1","category":null,"tags":["Web","Optimization","Cache","HTTP","gzip","Priority"],"banner":null},"timeToRead":8},"next":{"excerpt":"알고리즘 문제해결 전략을 정리하면서 간단한 문제도 함께 풀어보고자 합니다. 이번에는 알고리즘 문제해결 전략의 142 ~ 172 Page 에 해당되며, 필요한 부분을 정리하고 관련된 문제를 코드와 함께 공유해보고자 합니다. Into 알고리즘 문제 해결 전략의 첫 도입이며, 시간복잡도 계산과 관련된 내용은 좋은 글들이 많고, 책에서 더 자세히 설명해있어서 넘어가고,…","html":"<p>알고리즘 문제해결 전략을 정리하면서 간단한 문제도 함께 풀어보고자 합니다. 이번에는 알고리즘 문제해결 전략의 142 ~ 172 Page 에 해당되며, 필요한 부분을 정리하고 관련된 문제를 코드와 함께 공유해보고자 합니다.</p>\n<h2 id=\"into\"><a href=\"#into\" aria-label=\"into permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Into</h2>\n<p>알고리즘 문제 해결 전략의 첫 도입이며, 시간복잡도 계산과 관련된 내용은 좋은 글들이 많고, 책에서 더 자세히 설명해있어서 넘어가고, 3 번 알고리즘 설계 패러다임부터 정리하는 것이 더 좋을것으로 판단하였습니다. 그리고, 알고리즘이라는 것이 꾸준히 하지 않으면 어렵고, 처음이 특히, 더 어렵기 때문에 가장 손쉽게 들어갈 수 있는 부분을 선택했습니다. 간단하게 정리하겠습니다.</p>\n<h4 id=\"03-알고리즘-설계-패러다임\"><a href=\"#03-%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98-%EC%84%A4%EA%B3%84-%ED%8C%A8%EB%9F%AC%EB%8B%A4%EC%9E%84\" aria-label=\"03 알고리즘 설계 패러다임 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>03. 알고리즘 설계 패러다임</h4>\n<ul>\n<li>\n<p>무식하게 풀기</p>\n<ul>\n<li>도입</li>\n<li>재귀호출과 완전탐색</li>\n<li>문제: 소풍(Picnic, 난이도 : 하) 맟 풀이</li>\n<li>문제: 게임판 덮기(BoardCover, 난이도 : 하) 맟 풀이</li>\n<li>최적화 문제</li>\n<li>문제: 시계 맞추기(ClockSync, 난이도 : 중) 맟 풀이</li>\n<li>많이 등장하는 완전 탐색 유형</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"1-도입\"><a href=\"#1-%EB%8F%84%EC%9E%85\" aria-label=\"1 도입 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 도입</h2>\n<p>완전 탐색(Exhaustive Search)이란? 모든 경우의 수를 만들어보는 알고리즘입니다. 컴퓨터의 자원을 잘 활용한 가장 손 쉬운 방법이라고 말할 수 있습니다.</p>\n<h2 id=\"2-재귀호출과-완전탐색\"><a href=\"#2-%EC%9E%AC%EA%B7%80%ED%98%B8%EC%B6%9C%EA%B3%BC-%EC%99%84%EC%A0%84%ED%83%90%EC%83%89\" aria-label=\"2 재귀호출과 완전탐색 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 재귀호출과 완전탐색</h2>\n<p>재귀함수(Recursive Function) 혹은 재귀호출(Recursion)은 반복되야 하는 작업을 나눌 수 있는 조각으로 쪼갠뒤에 한 조각을 수행하고, 나머지를 자기 자신을 호출해 점진적으로 실행하는 함수를 가리킵니다.</p>\n<p>반복문을 재귀호출로 바꿔보는 것이 가장 좋은 예입니다. 간단하게 만들어보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      result <span class=\"token operator\">+=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">recursiveSum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> n <span class=\"token operator\">+</span> <span class=\"token function\">recursiveSum</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위처럼 재귀호출은 포문을 대체할 수 있습니다. 또한, 추가적인 로직을 통해서 훨씬 더 간단하고 효율적으로 로직을 구성할 수 있습니다.</p>\n<h2 id=\"3-문제-소풍picnic-난이도--하-맟-풀이\"><a href=\"#3-%EB%AC%B8%EC%A0%9C-%EC%86%8C%ED%92%8Dpicnic-%EB%82%9C%EC%9D%B4%EB%8F%84--%ED%95%98-%EB%A7%9F-%ED%92%80%EC%9D%B4\" aria-label=\"3 문제 소풍picnic 난이도  하 맟 풀이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 문제: 소풍(Picnic, 난이도 : 하) 맟 풀이</h2>\n<p>서로 친구인 학생들끼리만 짝을 지어주는 방법을 모두 구하시오. 예를 들어, (1, 3), (3, 1)은 같은 짝으로 판단합니다.</p>\n<ul>\n<li>첫 줄에 테스트케이스 개수 T</li>\n<li>다음 줄에는 인원 수 N 과 짝으로 맺을 수 있는 쌍 수 M</li>\n<li>\n<p>다음 줄에는 친구배열 0 1 1 2 2 3 3 0 0 2 1 3</p>\n<ul>\n<li>[0, 1], [1, 2], [2, 3] ... 순으로 친구에 해당함.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"입력\"><a href=\"#%EC%9E%85%EB%A0%A5\" aria-label=\"입력 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3\n2 1\n0 1\n4 6\n0 1 1 2 2 3 3 0 0 2 1 3\n6 10\n0 1 0 2 1 2 1 3 1 4 2 3 2 4 3 4 3 5 4 5</code></pre></div>\n<h5 id=\"출력\"><a href=\"#%EC%B6%9C%EB%A0%A5\" aria-label=\"출력 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1\n3\n4</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> areFriends<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> taken<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BufferedReader</span> bf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>bf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> bf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 인원 수</span>\n            n <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 친구 쌍 수</span>\n            m <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            areFriends <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">F</span> <span class=\"token operator\">=</span> bf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 친구 인지, 아닌지 확인하는 로직</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> m <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">F</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">F</span><span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                areFriends<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                areFriends<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 짝으로 설정되었는지 안되었는지 확인하는 곳</span>\n            taken <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token function\">countPairngs</span><span class=\"token punctuation\">(</span>taken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        bf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">countPairngs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> taken<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> firstFree <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>taken<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                firstFree <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 기저 사례 : 모든 학생이 짝을 찾았으면 한 가지 방법을 찾았으니 종료한다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>firstFree <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">// firstFree의 해당하는 친구 짝 구하는 로직</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pair <span class=\"token operator\">=</span> firstFree <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> pair <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> pair<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 친구로 정해져있지 않고, 친구이면 해당 조건문을 통과한다.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>taken<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> areFriends<span class=\"token punctuation\">[</span>firstFree<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                taken<span class=\"token punctuation\">[</span>firstFree<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> taken<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token function\">countPairngs</span><span class=\"token punctuation\">(</span>taken<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token comment\">// 짝을 맺은 뒤 다음 친구에서 다시 짝을 맺을 경우의 수를 구하기 위해 false로 변경함.</span>\n                taken<span class=\"token punctuation\">[</span>firstFree<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> taken<span class=\"token punctuation\">[</span>pair<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> sb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 알고리즘에서 가장 중요한 것은 중복을 제거하는 것입니다. (1, 3)이나 (3, 1)은 결국 같다고 봐야합니다. 즉, 앞의 작은 수를 기준으로 큰 수를 짝으로 지어나가면 중복 없이 이를 해결해나갈 수 있다고 얘기합니다. 그러므로, 가장 큰 시간복잡도를 구하는 방법은 10(10 개로 한정)개의 친구가 모두 짝으로 선정할 수 있는 경우이며 이를 9 _ 7 _ 5 _ 3 _ 1 = 945 라고 얘기하는 것입니다. 9 부터 곱하는 이유는 자기 자신에서 9 개의 경우의 수가 나오기 때문입니다.</p>\n<p>책에 알고리즘 내용은 설명만을 위한 것이지 구현하여 테스트해보면 결과가 나오지 않습니다. C 언어를 잘 몰라 C 언어와 자바의 차이점인가도 싶었지만, 중요한 부분은 초기 값을 설정해주는 부분이 생략되어있는 것으로 판단됩니다.\n책에서는 areFriends 라는 변수를 선언하고 해당 값의 어떠한 값도 설정도 사용되지 않았으며, 문제의 최대 변수인 10 이라는 변수를 사용함으로써 독자들을 오해시키는 부분이 있습니다. 정독과 테스트를하면 이정도는 쉽게 찾을 수 있었지만, 이러한 부분을 놓친다면 예제를 이해하는데 큰 어려움이 있을 것이라고 생각합니다.</p>\n<h2 id=\"문제-게임판-덮기boardcover-난이도--하-맟-풀이\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EA%B2%8C%EC%9E%84%ED%8C%90-%EB%8D%AE%EA%B8%B0boardcover-%EB%82%9C%EC%9D%B4%EB%8F%84--%ED%95%98-%EB%A7%9F-%ED%92%80%EC%9D%B4\" aria-label=\"문제 게임판 덮기boardcover 난이도  하 맟 풀이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제: 게임판 덮기(BoardCover, 난이도 : 하) 맟 풀이</h2>\n<p>3 개의 칸을 차지하는 블록을 이용하여 주어진 게임판을 전부 덮는 경우의 수를 모두 구하시오.</p>\n<ul>\n<li>첫 줄에 테스트케이스 개수 T</li>\n<li>다음 줄에는 H(높이), W(넓이)가 주어집니다.</li>\n<li>\n<p>다음 줄에는 W 만큼의 게임 판 값이 H 개 주어집니다.</p>\n<ul>\n<li>#검은 칸, .는 흰 칸을 나타냅니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"입력-1\"><a href=\"#%EC%9E%85%EB%A0%A5-1\" aria-label=\"입력 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3\n3 7\n#.....#\n#.....#\n##...##\n3 7\n#.....#\n#.....#\n##..###\n8 10\n##########\n#........#\n#........#\n#........#\n#........#\n#........#\n#........#\n##########</code></pre></div>\n<h5 id=\"출력-1\"><a href=\"#%EC%B6%9C%EB%A0%A5-1\" aria-label=\"출력 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0\n2\n1514</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">H</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">W</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> boardMap<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BufferedReader</span> bf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>bf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> bf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 게임 판 높이</span>\n            <span class=\"token class-name\">H</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 게임 판 넓이</span>\n            <span class=\"token class-name\">W</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n            <span class=\"token comment\">// boardMap[y][x] = # = 1 이미 덮인 칸 혹은 검은 칸</span>\n            <span class=\"token comment\">// boardMap[y][x] = . = 0 아직 덮이지 않은 칸</span>\n            boardMap <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">H</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token class-name\">W</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> boardMap<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">String</span> width <span class=\"token operator\">=</span> bf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> boardMap<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> v <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>width<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>k<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">'.'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        v <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    boardMap<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token function\">cover</span><span class=\"token punctuation\">(</span>boardMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        bf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// delta 값을 통해 채우기/치우기 둘 다 가능하게 만든다.</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> boardMap<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> delta<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">boolean</span> result <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> coverType<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> ny <span class=\"token operator\">=</span> y <span class=\"token operator\">+</span> coverType<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> nx <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> coverType<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ny <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> ny <span class=\"token operator\">>=</span> boardMap<span class=\"token punctuation\">.</span>length <span class=\"token operator\">||</span> nx <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> nx <span class=\"token operator\">>=</span> boardMap<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>boardMap<span class=\"token punctuation\">[</span>ny<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>nx<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> delta<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">cover</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> boardMap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 아직 채우지 못한 칸 중 가장 윗줄 왼쪽에 있는 칸을 찾는다.</span>\n        <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> boardMap<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> boardMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>boardMap<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    y <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n                    x <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">// 기저 사례 : 모든 칸을 채웠으면 1을 반환한다.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> type <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> type <span class=\"token operator\">&lt;</span> coverType<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> type<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// 만약 board[y][x]를 type 형태로 덮을 수 있으면 재귀 호출한다.</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>boardMap<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                result <span class=\"token operator\">+=</span> <span class=\"token function\">cover</span><span class=\"token punctuation\">(</span>boardMap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 덮었던 블록을 치운다.</span>\n            <span class=\"token function\">set</span><span class=\"token punctuation\">(</span>boardMap<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> sb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>이번 문제도 중요한 것은, 순서를 강제하는 것입니다. 위에 소풍 문제에서는 짝을 지어줄 때 앞의 작은 수를 강제하여 중복이 나타나지 않게 하였습니다. 이번에도 게임 판을 덮을 때 3 개의 칸의 퍼즐에 기준점을 두고 중복을 제거하였습니다. 첫 번재의 출력 값이 0 인 이유는, 3 게의 칸으로 된 퍼즐로 13 개의 칸을 모두 채울 수 없기 때문입니다.</p>\n<p>이번 로직에서 이해해야 될 부분은 cover()의 중간 부분입니다. 덮었던 것을 다시 치우는데, 덮을 수 있는지 없는지를 확인 한 후 덮을 수 있다면, 하나씩 덮으면서 개수만 파악하면 되기 때문입니다. 덮었던 것을 치우기 때문에, 해당 조건하에서 1 개의 변수로 모든 경우의 수를 확인할 수 있는 것입니다.</p>\n<h2 id=\"최적화-문제\"><a href=\"#%EC%B5%9C%EC%A0%81%ED%99%94-%EB%AC%B8%EC%A0%9C\" aria-label=\"최적화 문제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>최적화 문제</h2>\n<p>알고리즘에서 최적화(Optimization) 문제란, 가장 좋은 답을 찾는 것이지만 복잡한 문제일수록 한번의 최적화하는 답을 찾기란 쉽지 않습니다. 그래서, 가장 손쉽게 접근할 수 있는 방법은 완전 탐색을 통해서 가능한 답을 모두 생성하고 가장 좋은 것만 찾아내는 로직으로 변경하는 것입니다.</p>\n<p>간단한 예제로는, 여행하는 외판원 문제가 있습니다. 시간안에 돌아와야하기 때문에, 완전탐색으로 가능한 수를 찾은 뒤 해당 도시의 순서만 정해주는 로직을 추가하면 해당 문제를 쉽게 풀 수 있습니다. 해당 문제는 나중에 한번 풀어보겠습니다.</p>\n<h2 id=\"문제-시계-맞추기clocksync-난이도--중-맟-풀이\"><a href=\"#%EB%AC%B8%EC%A0%9C-%EC%8B%9C%EA%B3%84-%EB%A7%9E%EC%B6%94%EA%B8%B0clocksync-%EB%82%9C%EC%9D%B4%EB%8F%84--%EC%A4%91-%EB%A7%9F-%ED%92%80%EC%9D%B4\" aria-label=\"문제 시계 맞추기clocksync 난이도  중 맟 풀이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>문제: 시계 맞추기(ClockSync, 난이도 : 중) 맟 풀이</h2>\n<p>4 * 4 개의 격자 형태로 배치된 열여섯 개의 시계가 있습니다. 각 시계들은 12 시 3 시 6 시 9 시를 가리키고 있는데, 모든 시계를 12 시를 가리키도록 바꾸고 싶습니다.</p>\n<p>스위치를 누르면 연결된 시계들은 3 시간씩 앞으로 움직입니다. 스위치와 연결된 시계는 아래와 같습니다. 스위치와 시계는 최소 3 개, 최대 5 개 연결됩니다.</p>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n      스위치 번호\n    </th>\n    <th>\n      연결된 시계들\n    </th>\n    <th>\n      스위치 번호\n    </th>\n    <th>\n      연결된 시계들\n    </th>\n  </tr>\n  <tr>\n    <td>\n      0\n    </td>\n    <td>\n      0, 1, 2\n    </td>\n    <td>\n      5\n    </td>\n    <td>\n      0, 2, 14, 15\n    </td>\n  </tr>\n  <tr>\n    <td>\n      1\n    </td>\n    <td>\n      3, 7, 9, 11\n    </td>\n    <td>\n      6\n    </td>\n    <td>\n      3, 14, 15\n    </td>\n  </tr>\n  <tr>\n    <td>\n      2\n    </td>\n    <td>\n      4, 10, 14, 15\n    </td>\n    <td>\n      7\n    </td>\n    <td>\n      4, 5, 7, 14, 15\n    </td>\n  </tr>\n  <tr>\n    <td>\n      3\n    </td>\n    <td>\n      0, 4, 5, 6, 7\n    </td>\n    <td>\n      8\n    </td>\n    <td>\n      1, 2, 3, 4, 5\n    </td>\n  </tr>\n  <tr>\n    <td>\n      4\n    </td>\n    <td>\n      6, 7, 8, 10, 12\n    </td>\n    <td>\n      9\n    </td>\n    <td>\n      3, 4, 5, 9, 13\n    </td>\n  </tr>\n</table>\n<ul>\n<li>첫 줄에는 테스트케이스 갯수가 주어집니다.</li>\n<li>다음 줄에는 16 개의 숫자가 가르치는 시계방향이 주어집니다.</li>\n</ul>\n<h5 id=\"입력-2\"><a href=\"#%EC%9E%85%EB%A0%A5-2\" aria-label=\"입력 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>입력</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">2\n12 6 6 6 6 6 12 12 12 12 12 12 12 12 12 12\n12 9 3 12 6 6 9 3 12 9 12 9 12 12 6 6</code></pre></div>\n<h5 id=\"출력-2\"><a href=\"#%EC%B6%9C%EB%A0%A5-2\" aria-label=\"출력 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>출력</h5>\n<ul>\n<li>2</li>\n<li>9</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">IOException</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>io</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> INF <span class=\"token operator\">=</span> <span class=\"token number\">9999</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SWITCHES <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> CLOCK <span class=\"token operator\">=</span> <span class=\"token number\">16</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 현재 시계들의 상태</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> clocks <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>CLOCK<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 스위치와 연결된 시계상태</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> linked <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throws</span> <span class=\"token class-name\">IOException</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">BufferedReader</span> bf <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">BufferedReader</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">InputStreamReader</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span>bf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">N</span> <span class=\"token operator\">=</span> bf<span class=\"token punctuation\">.</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">N</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                clocks<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">N</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 게임 판 높이</span>\n            <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>clocks<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        bf<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">areSynced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clock <span class=\"token operator\">:</span> clocks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clock <span class=\"token operator\">!=</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">passTime</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> clocks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> swtch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> clock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> clock <span class=\"token operator\">&lt;</span> CLOCK<span class=\"token punctuation\">;</span> clock<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>linked<span class=\"token punctuation\">[</span>swtch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>clock<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                clocks<span class=\"token punctuation\">[</span>clock<span class=\"token punctuation\">]</span> <span class=\"token operator\">+=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>clocks<span class=\"token punctuation\">[</span>clock<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    clocks<span class=\"token punctuation\">[</span>clock<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> clocks<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> swtch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>swtch <span class=\"token operator\">==</span> SWITCHES<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">areSynced</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> INF<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">int</span> result <span class=\"token operator\">=</span> INF<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> cnt <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> cnt <span class=\"token operator\">&lt;</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> cnt<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            result <span class=\"token operator\">=</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> cnt <span class=\"token operator\">+</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>clocks<span class=\"token punctuation\">,</span> swtch <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">passTime</span><span class=\"token punctuation\">(</span>clocks<span class=\"token punctuation\">,</span> swtch<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> sb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>위 문제에서 중요한 것은 getResult() 메소드를 재귀호출하는 것입니다. +1 씩 재귀호출 함으로써 최대 SWITCHES(10)에 도달할때까지 위 함수는 모든 시계가 12 시를 가르칠때까지 모든 버튼을 최대 4 번씩 누르게 됩니다.</p>\n<p>위의 방법은 책 내용에서도 얘기하듯이 스위치를 누르는 순서를 바꾼다고 해서 그 결과가 바뀌지 않으며, 4 번을 누르면 모든 시계가 다시 원래 가르치는 방향으로 돌아옵니다. 즉, 10 개의 시계를 4 번씩 누루는 최대 경우의 수는 4^10 = 1,048,576 개가 됩니다. 열개의 스위치를 최대 4 번씩 모두 누르는 경우의 수를 구하는 방법(완전탐색)으로 문제를 해결할 수 있습니다.</p>\n<h2 id=\"많이-등장하는-완전-탐색-유형\"><a href=\"#%EB%A7%8E%EC%9D%B4-%EB%93%B1%EC%9E%A5%ED%95%98%EB%8A%94-%EC%99%84%EC%A0%84-%ED%83%90%EC%83%89-%EC%9C%A0%ED%98%95\" aria-label=\"많이 등장하는 완전 탐색 유형 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>많이 등장하는 완전 탐색 유형</h2>\n<ul>\n<li>모든 순열 만들기</li>\n<li>모든 조합 만들기</li>\n<li>2^n 가지 경우의 수 만들기</li>\n<li>...</li>\n</ul>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li>알고리즘 문제 해결전략</li>\n</ul>","id":"d50a3102-fcec-52a3-8e20-6d68eb2bbed1","fields":{"slug":"algorithm-알고리즘-문제-해결전략-무식하게-풀기-weeks-1"},"frontmatter":{"date":"2018-05-02T00:00:00.000Z","title":"[Algorithm] 알고리즘 문제 해결전략 - 무식하게 풀기 - Weeks 1","category":"Algorithm","tags":["Algorithm","Reculsive","Exhaustive","Linear"],"banner":null},"timeToRead":11}}}}
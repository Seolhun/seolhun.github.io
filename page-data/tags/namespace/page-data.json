{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/namespace","webpackCompilationHash":"3421a461549ce11fe9c4","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"excerpt":"Typescript의 라이브러리 모듈을 사용하다보면은 namespace를 자주 접하게 됩니다. 해당 module을 만들 수 있도록 도와주는 namespace에 대해 간단히 공부했습니다. Overview 는 일정양의 코드를 조직화할 때 사용합니다. 이를 조직화하여 로 만드는 것이 주 목적입니다. 코드 묶음에 이름을 부여하여 해당 이름을 통해 어디서든 접근할 수 있게 만드는 것입니다. 어디서든 접근하기를 만들기 위해서는 처럼 namespace…","html":"<p>Typescript의 라이브러리 모듈을 사용하다보면은 namespace를 자주 접하게 됩니다. 해당 module을 만들 수 있도록 도와주는 namespace에 대해 간단히 공부했습니다.</p>\n<h2 id=\"overview\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p><code class=\"language-text\">namespaces</code>는 일정양의 코드를 조직화할 때 사용합니다. 이를 조직화하여 <code class=\"language-text\">Internal Modules</code>로 만드는 것이 주 목적입니다. 코드 묶음에 이름을 부여하여 해당 이름을 통해 어디서든 접근할 수 있게 만드는 것입니다.</p>\n<p>어디서든 접근하기를 만들기 위해서는 <code class=\"language-text\">declare namespace Validation {}</code>처럼 namespace를 <code class=\"language-text\">declare(선언)</code>을 해주어야 합니다.</p>\n<h2 id=\"examples\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<h4 id=\"--singlefile---not-using-code-classlanguage-textnamespacecode\"><a href=\"#--singlefile---not-using-code-classlanguage-textnamespacecode\" aria-label=\"  singlefile   not using code classlanguage textnamespacecode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Singlefile - Not using <code class=\"language-text\">Namespace</code></h4>\n<ul>\n<li>해당 파일에서만 정의되어 해당 type 별 사용만 가능합니다. 전혀 연관성이나 조직화되어 보이지 않습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">let</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[A-Za-z]+$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Some samples to try</span>\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'98052'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'101'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validators to use</span>\n<span class=\"token keyword\">let</span> validators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> StringValidator<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">'ZIP code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">'Letters only'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LettersOnlyValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Show whether each string passed each validator</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> s <span class=\"token keyword\">of</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> validators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> isMatch <span class=\"token operator\">=</span> validators<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> s <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> isMatch <span class=\"token operator\">?</span> <span class=\"token string\">'matches'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'does not match'</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> '</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">'.</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"--using-code-classlanguage-textnamespacecode-file\"><a href=\"#--using-code-classlanguage-textnamespacecode-file\" aria-label=\"  using code classlanguage textnamespacecode file permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Using <code class=\"language-text\">Namespace</code> File</h4>\n<ul>\n<li>해당 코드들을 Validation이라는 namespace로 묶어주어 Validation을 통해 접근이 가능해집니다.</li>\n<li>이제야 연관성이나 조직성을 갖추어져 있는 것으로 보입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[A-Za-z]+$/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Some samples to try</span>\n<span class=\"token keyword\">let</span> strings <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'98052'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'101'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Validators to use</span>\n<span class=\"token keyword\">let</span> validators<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">:</span> Validation<span class=\"token punctuation\">.</span>StringValidator<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">'ZIP code'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation<span class=\"token punctuation\">.</span>ZipCodeValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nvalidators<span class=\"token punctuation\">[</span><span class=\"token string\">'Letters only'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Validation<span class=\"token punctuation\">.</span>LettersOnlyValidator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Show whether each string passed each validator</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> s <span class=\"token keyword\">of</span> strings<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> name <span class=\"token keyword\">in</span> validators<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">'</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> s <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">' - </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> validators<span class=\"token punctuation\">[</span>name<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">'matches'</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">'does not match'</span> <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span> name <span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"--multiple-using-code-classlanguage-textnamespacescode\"><a href=\"#--multiple-using-code-classlanguage-textnamespacescode\" aria-label=\"  multiple using code classlanguage textnamespacescode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Multiple using <code class=\"language-text\">namespaces</code></h4>\n<ul>\n<li>namespace를 사용하면 같은 namespace를 가져도 참조하여 사용할 수 있습니다.</li>\n<li>\n<h2 id=\"각각의-파일을-참조하여-새롭게-정의하여주면-해당-namespace에-code-classlanguage-text오버로딩code되어-조직화-할-수-있습니다\"><a href=\"#%EA%B0%81%EA%B0%81%EC%9D%98-%ED%8C%8C%EC%9D%BC%EC%9D%84-%EC%B0%B8%EC%A1%B0%ED%95%98%EC%97%AC-%EC%83%88%EB%A1%AD%EA%B2%8C-%EC%A0%95%EC%9D%98%ED%95%98%EC%97%AC%EC%A3%BC%EB%A9%B4-%ED%95%B4%EB%8B%B9-namespace%EC%97%90-code-classlanguage-text%EC%98%A4%EB%B2%84%EB%A1%9C%EB%94%A9code%EB%90%98%EC%96%B4-%EC%A1%B0%EC%A7%81%ED%99%94-%ED%95%A0-%EC%88%98-%EC%9E%88%EC%8A%B5%EB%8B%88%EB%8B%A4\" aria-label=\"각각의 파일을 참조하여 새롭게 정의하여주면 해당 namespace에 code classlanguage text오버로딩code되어 조직화 할 수 있습니다 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>각각의 파일을 참조하여 새롭게 정의하여주면, 해당 namespace에 <code class=\"language-text\">오버로딩</code>되어 조직화 할 수 있습니다.</h2>\n</li>\n<li>\n<p>Validation.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">boolean</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>LettersOnlyValidator.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/// &lt;reference path='Validation.ts' /></span>\n<span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> lettersRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[A-Za-z]+$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">LettersOnlyValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> lettersRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>ZipCodeValidator.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/// &lt;reference path='Validation.ts' /></span>\n<span class=\"token keyword\">namespace</span> Validation <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">const</span> numberRegexp <span class=\"token operator\">=</span> <span class=\"token regex\">/^[0-9]+$/</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ZipCodeValidator</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">StringValidator</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">isAcceptable</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">s<span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span>length <span class=\"token operator\">===</span> <span class=\"token number\">5</span> <span class=\"token operator\">&amp;&amp;</span> numberRegexp<span class=\"token punctuation\">.</span><span class=\"token function\">test</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Test.ts</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">/// &lt;reference path='Validation.ts' /></span>\n<span class=\"token comment\">/// &lt;reference path='LettersOnlyValidator.ts' /></span>\n<span class=\"token comment\">/// &lt;reference path='ZipCodeValidator.ts' /></span></code></pre></div>\n</li>\n</ul>\n<p>// Some samples to try\nlet strings = ['Hello', '98052', '101'];</p>\n<p>// Validators to use\nlet validators: { [s: string]: Validation.StringValidator; } = {};\nvalidators['ZIP code'] = new Validation.ZipCodeValidator();\nvalidators['Letters only'] = new Validation.LettersOnlyValidator();</p>\n<p>// Show whether each string passed each validator\nfor (let s of strings) {\nfor (let name in validators) {\nconsole.log(<code class=\"language-text\">&#39;${ s }&#39; - ${ validators[name].isAcceptable(s) ? &#39;matches&#39; : &#39;does not match&#39; } ${ name }</code>);\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## References\n- [Typescript - Namespaces](https://www.typescriptlang.org/docs/handbook/namespaces.html)</code></pre></div>","id":"c82efa39-1524-5620-a83b-48a4bd555466","fields":{"slug":"typescript-namespace란"},"frontmatter":{"title":"[Typescript] Namespace란?","date":"2018-03-08T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/typescript.png","category":"Typescript","tags":["Javascript","Typescript","Namespace","Declare","Module"]},"timeToRead":3}],"tagsName":"Namespace"}}}
{"componentChunkName":"component---src-templates-tag-tsx","path":"/tags/insertion-sort","webpackCompilationHash":"49be629eb11e28dbb0c9","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"excerpt":"저번 시간에 삽입 정렬 1번을 풀었고 이번에는 2번을 풀어보도록 하겠습니다.\nHackerRank - Sort - Insertion Sort Part 2 1. Question 2번 문제는 문자가 많아 다로 간단히 첨부하지는 않겠습니다.\n샘플 인풋과 아웃풋만 넣도록 하겠습니다. Sample Input Sample Output 2. Process 1번은 항상 기준정렬로 되어있기때문에 0이 아닌 1부터 루프를 실행한다. 2차 루프는 i…","html":"<p>저번 시간에 삽입 정렬 1번을 풀었고 이번에는 2번을 풀어보도록 하겠습니다.\n<a href=\"https://www.hackerrank.com/challenges/insertionsort2/problem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HackerRank - Sort - Insertion Sort Part 2</a></p>\n<h2 id=\"1-question\"><a href=\"#1-question\" aria-label=\"1 question permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Question</h2>\n<p>2번 문제는 문자가 많아 다로 간단히 첨부하지는 않겠습니다.\n샘플 인풋과 아웃풋만 넣도록 하겠습니다.</p>\n<ul>\n<li>\n<p>Sample Input</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">6\n1 4 3 5 6 2</code></pre></div>\n</li>\n<li>\n<p>Sample Output</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1 4 3 5 6 2\n1 3 4 5 6 2\n1 3 4 5 6 2\n1 3 4 5 6 2\n1 2 3 4 5 6</code></pre></div>\n</li>\n</ul>\n<h2 id=\"2-process\"><a href=\"#2-process\" aria-label=\"2 process permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Process</h2>\n<ol>\n<li>1번은 항상 기준정렬로 되어있기때문에 0이 아닌 1부터 루프를 실행한다.</li>\n<li>2차 루프는 i값 보다 작게, 즉 정렬된 값하고만 비교할 수 있게 루프를 실행한다.</li>\n<li>\n<p>정렬할 값과 정렬된 값의 크기를 비교하여, 정렬된 값이 더 크면 해당 값과 바꾼다(반복한다)</p>\n<ul>\n<li>해당 값 앞에 배열에 넣는것이 안되므로 값을 바꿔준뒤 값을 교체해나간다.</li>\n</ul>\n</li>\n<li>한 루프당 정렬된 값을 출력한다.</li>\n</ol>\n<h2 id=\"3-code\"><a href=\"#3-code\" aria-label=\"3 code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">insertionSort2</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">n<span class=\"token punctuation\">,</span> arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">var</span> temp <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr <span class=\"token operator\">=</span> <span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">insertionSort2</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token punctuation\">}</span></code></pre></div>","id":"9c08699b-ac5b-5f67-872b-d282dc37dc91","fields":{"slug":"algorithm-javascript-hacker-rank-insertion-sort-part-2"},"frontmatter":{"title":"[Algorithm/Javascript] HackerRank - InsertionSort Part 2","date":"2018-03-22T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/js.png","category":"Algorithm","tags":["Algorithm","Javascript","HackerRank","InsertionSort"]},"timeToRead":1},{"excerpt":"안녕하세요, 설훈입니다.\n이번에 친구와 함께 해커랭크에 1일 1알고리즘을 스터디를 시작하였습니다.\n알고리즘 사이트는 로 선정하였습니다. 깃허브와 연동 및 기록도 남고 오류 확인 등 사이트가 아주 잘 되어있어 편리하기 때문입니다.\n앞으로 영어공부도 할 겸 일석 삼조 효과를 거둘 수 있는 스터디가 되었으면 좋겠습니다. Sort부터 해서 차례대로 나아가도록 하겠습니다.\nHackerRank - Sort - Insertion Sort Part 1…","html":"<p>안녕하세요, 설훈입니다.\n이번에 친구와 함께 해커랭크에 1일 1알고리즘을 스터디를 시작하였습니다.\n알고리즘 사이트는 <code class=\"language-text\">HackerRank</code>로 선정하였습니다. 깃허브와 연동 및 기록도 남고 오류 확인 등 사이트가 아주 잘 되어있어 편리하기 때문입니다.\n앞으로 영어공부도 할 겸 일석 삼조 효과를 거둘 수 있는 스터디가 되었으면 좋겠습니다.</p>\n<p>Sort부터 해서 차례대로 나아가도록 하겠습니다.\n<a href=\"https://www.hackerrank.com/challenges/insertionsort1/problem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HackerRank - Sort - Insertion Sort Part 1</a></p>\n<h2 id=\"0-intro\"><a href=\"#0-intro\" aria-label=\"0 intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>0. Intro</h2>\n<p>Insertion Sort는 자료 배열의 모든 요소를 앞에서부터 차례대로 이미 정렬된 배열 부분과 비교하여, 자신의 위치를 찾아 삽입함으로써 정렬을 완성하는 알고리즘이다.\nInsertion Sort은 왼쪽부터 정렬하여 정렬된 수 모두 비교하여 정렬된 수보다 크면 오른쪽에, 작으면 왼쪽에 정렬해 나간다.</p>\n<ul>\n<li>\n<p>Example)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">5 3 4 2 1</code></pre></div>\n</li>\n</ul>\n<p>5 3 4 2 1\n3 5 4 2 1\n3 4 5 2 1\n2 3 4 5 1\n1 2 3 4 5</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Selection Sort이나 Bubble Sort같은 O(n2) 알고리즘에 비교하여 빠르며, 안정 정렬이고 in-place 알고리즘이다.\n**중요한 것은 이번 문제는 앞에서부터가 아니라 뒤에서부터 비교를 원한다. 이점을 유의하면서 풀어야 합니다.**\n\n## 1. Question\n- Sample Input</code></pre></div>\n<p>5\n2 4 6 8 3</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">- Sample Output</code></pre></div>\n<p>2 4 6 8 8\n2 4 6 6 8\n2 4 4 6 8\n2 3 4 6 8</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 2. Process\n1. 마지막 인덱스의 값을 앞의 값과 비교한다.\n2. 해당 값을 잠시 저장한다.\n3. 앞의 값이 더 크면 해당 값을 앞의 값과 자리를 교체한 후 log를 찍는다.\n4. 해당 값을 앞의 값에 넣어준다.\n5. 바꾼 값의 기준(n-1), 2 ~ 4번을 반복한다.\n6. 전체 값을 확인 한 후 큰게 없으면 넘어간다.\n7. 마지막에 결과값을 출력한다.\n8. 배열 값이 기대값이 아니므로 join(&#39; &#39;) 메소드로 원하는 형태로 바꿔준다.\n\n## 3. Code\n```tsx\nfunction insertionSort1(n, arr) {\n  for(var i = n - 1; i &gt; 0; i--) {\n    var temp = arr[i];\n    if(arr[i-1] &gt; arr[i]) {\n      arr[i] = arr[i - 1];\n      console.log(arr.join(&#39; &#39;));\n      arr[i - 1] = temp;\n      return insertionSort1(n-1, arr);\n    }\n  }\n  console.log(arr.join(&#39; &#39;));\n}\n\nfunction main() {\n    var n = parseInt(readLine());\n    arr = readLine().split(&#39; &#39;);\n    arr = arr.map(Number);\n    insertionSort1(n, arr);\n}</code></pre></div>","id":"4065e931-27ad-5635-9b01-34a094244fb4","fields":{"slug":"algorithm-javascript-hacker-rank-insertion-sort-part-1"},"frontmatter":{"title":"[Algorithm/Javascript] HackerRank - InsertionSort Part 1","date":"2018-03-21T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/js.png","category":"Algorithm","tags":["Algorithm","Javascript","HackerRank","InsertionSort","삽입정렬"]},"timeToRead":1}],"tagsName":"InsertionSort"}}}
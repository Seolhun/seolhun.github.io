{"componentChunkName":"component---src-templates-category-tsx","path":"/categories/ts","result":{"pageContext":{"posts":[{"excerpt":"Table of Contents Table of Contents Intro Contents 1. Hoisting 2. TDZ(Temporal Dead Zone) 3. 블록 레벨 스코프(Block-level-scope) 4. Global 5. (Re-)Assign Outro References Intro 이번에는 면접에도 종종 물어보게되는 var, let, const…","fields":{"slug":"코드로-알아보는-var-let-const의-차이"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/typescript.png","category":"TS","date":"2020.06.09","subTitle":"코드로 알아보는 Javascript, var, let, const의 차이는 무엇인가?","tags":["ts","typescript","js","javscript","es5","es6'. 'how to'"],"title":"코드로 알아보는 var, let, const의 차이"},"html":"<h2 id=\"table-of-contents\" style=\"position:relative;\"><a href=\"#table-of-contents\" aria-label=\"table of contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Table of Contents</h2>\n<ul>\n<li><a href=\"#table-of-contents\">Table of Contents</a></li>\n<li><a href=\"#intro\">Intro</a></li>\n<li>\n<p><a href=\"#contents\">Contents</a></p>\n<ul>\n<li><a href=\"#1-hoisting\">1. Hoisting</a></li>\n<li><a href=\"#2-tdztemporal-dead-zone\">2. TDZ(Temporal Dead Zone)</a></li>\n<li><a href=\"#3-%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84block-level-scope\">3. 블록 레벨 스코프(Block-level-scope)</a></li>\n<li><a href=\"#4-global\">4. Global</a></li>\n<li><a href=\"#5-re-assign\">5. (Re-)Assign</a></li>\n</ul>\n</li>\n<li><a href=\"#outro\">Outro</a></li>\n<li><a href=\"#references\">References</a></li>\n</ul>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>이번에는 면접에도 종종 물어보게되는 var, let, const 대해서 간략히 설명해보고자 합니다.\n너무나 많은 블로그에서 많은 설명을 해주었기 떼문에 예제를 통해서 간략하게 알아보겠습니다.</p>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<h3 id=\"1-hoisting\" style=\"position:relative;\"><a href=\"#1-hoisting\" aria-label=\"1 hoisting permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Hoisting</h3>\n<p>해당 질문을 받으면, 첫번째로 언급해야되는 것은 변수의 생성 순서입니다.\n자바스크립트에서 변수는 보통 <code class=\"language-text\">선언 &gt; 초기화 &gt; 할당</code>을 구분되어 생성됩니다. 또한, 이 3가지를 구분하여 var, let, const를 구분할 수도 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// VAR</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span>\n<span class=\"token keyword\">var</span> foo<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<ol>\n<li>var는 호이스팅된다는 것을 알 수 있습니다. console.log보다 나중에 선언되었음에도 불구하고 not defined가 아닌 undefined가 출력되기 때문입니다.</li>\n<li>var는 선언과 함께 초기화가 발생된다는 것을 알 수 있습니다. undefined가 출력되는 것을 보고 알 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>boo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught ReferenceError: boo is not defined</span>\n<span class=\"token keyword\">let</span> boo<span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// undefined</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>coo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught SyntaxError: Missing initializer in const declaration</span>\n<span class=\"token keyword\">const</span> coo<span class=\"token punctuation\">;</span>  </code></pre></div>\n<ol>\n<li>let, const는 선언 전에 값을 참조할 수 없습니다. 이 사실로, let과 const가 호이스팅이 되지 않는다고 착각하기 쉽습니다. 하지만, 에러메세지를 보면 var, let, const를 구분하고 있다는 것을 눈치채칠 수 있습니다. 즉, let과 const는 호이스팅되는 것은 맞습니다.</li>\n<li>let과 const가 에러가 나는 이유는 TDZ(Temporal Dead Zone)에 대한 언급과 Scope의 개념으로 설명되어야 하므로 순서대로 예제코드를 통해 설명드리도록 하겠습니다.</li>\n<li>const는 var, let과 다르게 생성과 함께 초기화가 되지 않습니다. 그러므로, 선언을 하면 메모리에 초기화되지 않기 때문에, Missing initializer 에러가 발생됩니다. 그러므로, const는 항상 값을 할당해주어야 생성과 함께 초기화될 수 있습니다.</li>\n</ol>\n<blockquote>\n<p>여기서 중요한 것은, 호이스팅은 선언단계에서 발생된다.</p>\n</blockquote>\n<h3 id=\"2-tdztemporal-dead-zone\" style=\"position:relative;\"><a href=\"#2-tdztemporal-dead-zone\" aria-label=\"2 tdztemporal dead zone permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. TDZ(Temporal Dead Zone)</h3>\n<p>이미 우리는 위 예제에서 TDZ를 맛보았습니다.</p>\n<p>하지만, 위의 예제로 TDZ를 명하기에는 부족함이 많습니다. 간략하게 TDZ에 대해 짚고 넘어가보고자 합니다.</p>\n<p>let, const의 선언은, 실행중인 실행 컨텍스트의 어휘적 환경으로서 어휘적 환경 내에서 지정된 변수를 정의됩니다.\n즉, 변수는 어휘적 환경에 포함되지만 어휘적 환경이 바인딩 되기 전까지 실행 될 수 없습니다. </p>\n<p>그러므로, let과 const는 어휘정 환경 내에서 실행이 되어야만 해당 값을 에러 없이 확인 할 수 있습니다. </p>\n<blockquote>\n<p>NHN에서 스코프와 클로져에 대해서 상당히 글을 잘 써주었습니다. 읽으면 큰 도움이 될 것입니다. 아래 그림만 보아도 많은 도움이 됩니다.</p>\n</blockquote>\n<p><img src=\"./executioncontext.png\" alt=\"NHN - executioncontext\"></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> dev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Uncaught ReferenceError: dev is not defined</span>\n<span class=\"token keyword\">let</span> dev <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dev <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> dev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span></code></pre></div>\n<h3 id=\"3-블록-레벨-스코프block-level-scope\" style=\"position:relative;\"><a href=\"#3-%EB%B8%94%EB%A1%9D-%EB%A0%88%EB%B2%A8-%EC%8A%A4%EC%BD%94%ED%94%84block-level-scope\" aria-label=\"3 블록 레벨 스코프block level scope permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 블록 레벨 스코프(Block-level-scope)</h3>\n<p>코드로 알아봅시다. let과 const는 블록 레벨 스코프(Block-level-scope)입니다.</p>\n<blockquote>\n<p>블록 레벨 스코프란, 코드 블록 내에서만 유효하며 코드 블록 외부에서는 참조할 수 없습니다. 즉, 코드 블록 내부에서 선언한 변수는 지역 변수입니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'seolhun'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> dev <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> dev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seolhun'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hun'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//undefined</span></code></pre></div>\n<p>var는 함수레벨 스코프이기 때문에, if의 블록을 넘어서 isDev에서 참조가 가능합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">isDev</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>name <span class=\"token operator\">===</span> <span class=\"token string\">'seolhun'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> dev <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span>\n    <span class=\"token keyword\">return</span> dev<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> dev<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token string\">'seolhun'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token function\">isDev</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hun'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//Uncaught ReferenceError: dev is not defined</span></code></pre></div>\n<p>let은 블록 레벨 스코프이기 때문에, if문 밖에서 메모리가 수거되며 참조할 수 없습니다.</p>\n<h3 id=\"4-global\" style=\"position:relative;\"><a href=\"#4-global\" aria-label=\"4 global permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Global</h3>\n<p>let은 var와 다르게 전역변수에 포함되지 않는다. </p>\n<p>위에서 언급했듯이 let은 블록레벨 스코프로서, 보이지 않는 블록 내에 존재하는 것으로 이해하면 쉽다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> foo <span class=\"token operator\">=</span> <span class=\"token number\">123</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>window<span class=\"token punctuation\">.</span>foo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 123</span></code></pre></div>\n<h3 id=\"5-re-assign\" style=\"position:relative;\"><a href=\"#5-re-assign\" aria-label=\"5 re assign permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. (Re-)Assign</h3>\n<p>const는 보통 상수로 많이 사용됩니다. const는 재할당이 되지 않습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">IS_DEV</span> <span class=\"token operator\">=</span> process<span class=\"token punctuation\">.</span>env<span class=\"token punctuation\">.</span><span class=\"token constant\">NODE_ENV</span> <span class=\"token operator\">===</span> <span class=\"token string\">'development'</span><span class=\"token punctuation\">;</span>\n<span class=\"token constant\">IS_DEV</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Uncaught TypeError: Assignment to constant variable. </span></code></pre></div>\n<p>하지만, 재밌는것은 Array와 Object내에 인덱스 값을 변경(추가/삭제 등)하거나, 키 값을 추가하는 등의 행위는 허용됩니다.\n그렇기 때문에, Immutable 같은 라이브러리나 <a href=\"https://developer.mozilla.org/ko/docs/Web/JavaScript/Reference/Global_Objects/Object/freeze\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Object.freeze()</a>와 같은 API가 존재합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> apple <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\napple <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>let은 이렇게 재할당이 가능합니다. </p>\n<blockquote>\n<p>상수로서 사용되지는 않기 때문에, 소문자로 선언하였습니다.</p>\n</blockquote>\n<h2 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>var, let, const만을 이해하기 위해서도 호이스팅과 스코프 등 다양한 Javascript의 지식이 필요합니다.\n다 믾은 기능을 나열하자면 끝도 없지만, 개인적인 기준으로 나열한 것들만 이해하여도 큰 도움이 될 것이라고 생각합니다.</p>\n<p>이제는 너무도 당연하게 const, let부터 배우게 되며, var를 사용할 일은 거의 없을 것입니다.\n간혹, SDK와 같은 모든 브라우저 호환 라이브러리를 만드는 전문적인 자바스크립트 엔지니어가 되지 않는이상, 주로 사용될 확률은 높지 않습니다.\n그럼에도 불구하고 이렇게 정리하는 이유는, 각각의 기능의 차이점을 이해하고 새로운 기능의 배경을 이해하면, 현재의 자바스크립에 대해서 더 잘 이해할 것이라고 믿기에 간략히 정리해보았습니다.</p>\n<p>읽어주셔서 감사합니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://tc39.es/ecma262/#sec-let-and-const-declarations\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TC39 - sec-let-and-const-declarations</a></li>\n<li><a href=\"https://ponyfoo.com/articles/es6-let-const-and-temporal-dead-zone-in-depth\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Ponyfoo - es6-let-const-and-temporal-dead-zone-in-depth</a></li>\n<li><a href=\"https://meetup.toast.com/posts/86\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NHN - Scope and Closure</a></li>\n<li><a href=\"https://poiemaweb.com/es6-block-scope\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PromiseWeb - es6-block-scope</a></li>\n</ul>","id":"7b50443d-7e06-52e8-bb89-aa79e009aebb","timeToRead":4},{"excerpt":"Intro 웹 개발을 하다보면 가장 많이 사용되는 기능은 Form이라고 생각합니다.\n대부분의 웹 사이트에 방문하면 회원가입과 로그인이 없는 사이트는 거의 없을 것이며, 최소한 고객문의와 Contact 등에 대한 페이지는 어느 사이트에서나 필요하기 때문입니다. 그렇다면, 개발자로서 이렇게 많이 사용되는 Form을 구현하기 위해서는 어떻게 접근하는 것이 가장 좋을까요?\n이러한 질문을 던져보면, Form을 자동화할 수 있는 Module…","fields":{"slug":"js-javascript로-reactive한-form-group-builder-만들어보기"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/typescript.png","category":"TS","date":"2019.09.25","subTitle":"Create a form group.","tags":["JS","Form","FormGroup"],"title":"[JS] Javascript로 Reactive한 FormGroup Builder 만들어보기"},"html":"<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>웹 개발을 하다보면 가장 많이 사용되는 기능은 Form이라고 생각합니다.\n대부분의 웹 사이트에 방문하면 회원가입과 로그인이 없는 사이트는 거의 없을 것이며, 최소한 고객문의와 Contact 등에 대한 페이지는 어느 사이트에서나 필요하기 때문입니다.</p>\n<p>그렇다면, 개발자로서 이렇게 많이 사용되는 Form을 구현하기 위해서는 어떻게 접근하는 것이 가장 좋을까요?\n이러한 질문을 던져보면, Form을 자동화할 수 있는 Module을 만드는 것이 가장 좋을 것입니다. 그 중에서도 React, Vue, Agnular와 같은 Library(혹은 Framework)를 사용하면 쉽게 만들 수 있습니다. 하지만, 어느 곳에서나 사용할 수 있게 만들려면, 순수한 JS로만 작성하는 것이 가장 좋을 것입니다. 그래서 이번 블로그를 통해서 제가 직접 순수한 JS로 만들어 본 코드에 대해서 정리하고 공유드리는 시간을 가져보고자 합니다.</p>\n<p>먼저, 현재 JS 생태계를 지배하고 있는 React와 Vue, Agnular의 입장에서 JS 코드를 바라보아야 합니다. 왜냐하면, UI와 관련된 모든 JS는 현재 3개의 Library(혹은 Framework)에 영향이 너무나 지대하므로, 이점을 간과할 수 없기 때문입니다.</p>\n<p>그러므로 FormBuilder는 어느 UI Library(혹은 Framework)와 함께 사용하더라도 작동할 수 있게 구현 할 예정입니다.</p>\n<p>둘째, 우리가 사용하는 UI는 결국 HTML과 CSS, JS의 결합입니다. 그 중 이번 FormBuilder는 UI와 결합되기 전까지의 JS로 구성할 수 있는 독립적인 부분을 고려하여 설계할 것입니다.\n너무 추상적이라고 느낄 수 있습니다. 그래서 더 간단하게 얘기하면, HTML과 CSS에 사용될 값들을 JS에서 모두 다룰 수 있도록 할 예정입니다.</p>\n<h2 id=\"pre-requirement\" style=\"position:relative;\"><a href=\"#pre-requirement\" aria-label=\"pre requirement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre-requirement</h2>\n<ul>\n<li>\n<p>Javascript, Typescript</p>\n<ul>\n<li>ES6</li>\n</ul>\n</li>\n</ul>\n<p>JS로만 코드를 짤 예정이며, Jest를 이용하여 테스트로 코드의 유효성을 확인해볼 것입니다.</p>\n<h2 id=\"goals\" style=\"position:relative;\"><a href=\"#goals\" aria-label=\"goals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goals</h2>\n<p>먼저, 이번 FromGroup을 만들기 위한 3가지 목표를 세웠습니다.</p>\n<ol>\n<li>Form Attribution 값을 호환시켜야 합니다. 간단한 속성값으로는 아래와 같습니다.</li>\n<li>\n<p>Form Attributes</p>\n<ul>\n<li>disabled</li>\n<li>reqired</li>\n<li>...</li>\n</ul>\n</li>\n</ol>\n<p>Form 관련 Attributes의 값을 JS에서 다룰 예정이며, 특히, disabled와 requried는 필수로 다룰 에정입니다.\n이유는 아래 항목인 Validation 항목과 아주 연관이 된 값이기 떄문입니다.</p>\n<ol start=\"2\">\n<li>Form에 들어가는 값들에 유효성 검사가 원활해야 합니다. 메세지도 포함해서요~</li>\n<li>\n<p>Validation</p>\n<ul>\n<li>Group Validation</li>\n<li>Form Valition</li>\n<li>Message</li>\n</ul>\n</li>\n</ol>\n<p>Form의 핵심은 Validation에 있다고 생각하며, 편리하게 UI를 만들어주는 것이 중요합니다.\n하지만, 서버로 전송되기전에 데이터 형식에 어긋나는 부분들을 알기 쉽고, 정확하게 알려주어 데이터의 정합성을 높이는 것이 더 바람직합니다.\n이러한 부분들로 UI에 필요한 3개의 기능을 이번에 만들것입니다.</p>\n<ol start=\"3\">\n<li>Library(혹은 Framework)에 상관없는 값의 Observable한 코드</li>\n<li>Reactive</li>\n</ol>\n<p>Reactive는 코드로 보는 것이 가장 빠른 방법입니다.\n당연히 UI에 Reactive함은 State(React), data(Vue)... 등을 이용하여 쉽게 해결할 수 있습니다.(랜더링 이슈)\n하지만, JS는 Reactive한 코드를 통해 Library(혹은 Framework)에 상관없이 이를 쉽게 값이 변하는 것을 구현할 수 있습니다.</p>\n<h2 id=\"code--description\" style=\"position:relative;\"><a href=\"#code--description\" aria-label=\"code  description permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code &#x26; Description</h2>\n<p>이제 코드로 알아 볼 시간입니다. 위의 목적을 달성하는 것을 차례로 코드를 작성해 봅시다.</p>\n<p>FormGroup을 만들기 위해서는 먼저, Group안에 들어가는 Form의 input을 이용하여 진행 할 예정입니다.\ninput에는 text, checkbox 등이 있습니다. 먼저, text로 간단한 양식을 만들어보는 것을 진행해보겠습니다.</p>\n<p>FormBuilder를 먼저 만들어봅시다. 이후에 FormGroupBuilder를 만들어봅시다.</p>\n<h2 id=\"formbuilder\" style=\"position:relative;\"><a href=\"#formbuilder\" aria-label=\"formbuilder permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FormBuilder</h2>\n<p>이제 FormBuilder를 만들어 봅시다.</p>\n<p>위에서 언급했듯이 우리에게 필요한 Goal은 3가지 입니다.</p>\n<ol>\n<li>Form Attributes</li>\n<li>Validation</li>\n<li>Reactive Code</li>\n</ol>\n<p>이 3가지를 채우기 위한 변수로 무엇이 있을까요? 한번 생각해봅시다.</p>\n<h2 id=\"1-build--set-properties\" style=\"position:relative;\"><a href=\"#1-build--set-properties\" aria-label=\"1 build  set properties permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Build &#x26; Set Properties</h2>\n<p>음. 생각해보셨나요?, 제가 선정한 값은 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FORM_VALUES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @requires\n   * @type string\n   */</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @requires\n   * @type string\n   */</span>\n  htmlFor<span class=\"token operator\">:</span> <span class=\"token string\">'htmlFor'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// isNotRequired</span>\n  <span class=\"token comment\">/**\n   * @default '''\n   * @type string\n   */</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  hasError<span class=\"token operator\">:</span> <span class=\"token string\">'hasError'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default 'text'\n   * @type string\n   */</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  isFocus<span class=\"token operator\">:</span> <span class=\"token string\">'isFocus'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  isRequired<span class=\"token operator\">:</span> <span class=\"token string\">'isRequired'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FORM_PROPERTIES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token constant\">FORM_VALUES</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default ''\n   * @type string\n   */</span>\n  requiredMessage<span class=\"token operator\">:</span> <span class=\"token string\">'requiredMessage'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default () => { hassError: false, message: '' }\n   * @type function\n   */</span>\n  onValidation<span class=\"token operator\">:</span> <span class=\"token string\">'onValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default { hassError: false, message: '' }\n   * @type function\n   */</span>\n  onGroupValidation<span class=\"token operator\">:</span> <span class=\"token string\">'onGroupValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  isOnCreatedValidation<span class=\"token operator\">:</span> <span class=\"token string\">'isOnCreatedValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default true\n   * @type boolean\n   */</span>\n  isOnChangeValidation<span class=\"token operator\">:</span> <span class=\"token string\">'isOnChangeValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Object에 담은 이유는 2가지 입니다.</p>\n<ol>\n<li>정의 된 값만을 사용하기 위함입니다. 이는 나중에 어떠한 값이 Props에 있고 유효하게 사용할 수 있는지 쉽게 알게해줍니다.</li>\n<li>해당 값이 생성될 때 키 값을 이용하여 Props의 타입을 체크할 예정이기 때문입니다.</li>\n</ol>\n<p>2번 사항에 더 알아보겠습니다.</p>\n<p>올바른 값이 오지 않았을 때 생성되면 컨트롤 할수 없는 버그를 만들 수 있기 때문에, 해당 값의 타입이 잘못되었음을 미리 알려주는 것이 제일 좋습니다.</p>\n<p>그래서 추가로 타입을 체크하기 위한 값이 필요합니다. 해당 값은 typeof와 비교되어 사용될 값입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">REQUIRED_CHECKING_TYPES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Values</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  hasError<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  isRequired<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  requiredMessage<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Events</span>\n  onValidation<span class=\"token operator\">:</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Options</span>\n  isOnCreatedValidation<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  isOnChangeValidation<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  onGroupValidation<span class=\"token operator\">:</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>이 방법은 고려할게 더 많습니다. 특히, IE 9 이전 브라우저에서 function에 typeof를 사용하면 object의 값을 받게됩니다. 그러므로 해당 브라우저까지 호환시키려면 브라우저를 고려한 함수를 사용하여 값과 매칭시키는게 제일 좋을 것 같습니다.</p>\n</blockquote>\n<p>차후 더 업데이트하면서 개선되어야 하지만, 간단하게는 현재 FormBuilder의 안정성을 위해 만들어졌습니다.</p>\n<p>코드로 알아봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FormBuilder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">properties<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. 함수를 생성할 때 가장 먼저 실행되는 것이 생성자이므로 생성자에서 유효성 검사를 실시합니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_checkPropertiesValidation</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 4. 주어진 값에 문제가 있다면, 어디에 문제가 있는지를 사용자(개발자)에게 알려줍니다.</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Properties types are not right'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 5. 각 값들의 default 값을 만들어주기 위해 함수로 만들었습니다.</span>\n    <span class=\"token keyword\">const</span> formProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_initForm</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> formProperties<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> formProperties<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">_checkPropertiesValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">properties</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2. 유효성 검사는 위에서 언급한 Object 값을 이용하여 실행시켜줍니다.</span>\n    <span class=\"token keyword\">const</span> isValidProperty <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REQUIRED_CHECKING_TYPES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// 3. 주어진 변수에 값이 있다면, 해당 키를 이용하여 타입이 올바른지 확인합니다.</span>\n        <span class=\"token keyword\">const</span> propertyType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> properties<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> validType <span class=\"token operator\">=</span> <span class=\"token constant\">REQUIRED_CHECKING_TYPES</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> validType <span class=\"token operator\">===</span> propertyType<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> isValidProperty<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 초기 선언된 js-doc에 맞게 만들어줍니다.</span>\n  _initForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Values</span>\n      htmlFor<span class=\"token punctuation\">,</span>\n      key<span class=\"token punctuation\">,</span>\n      value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      type <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n      hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      message <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      isRequired <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      requiredMessage <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      isFocus <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">onValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Options</span>\n      <span class=\"token function-variable function\">onGroupValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      isOnCreatedValidation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isOnChangeValidation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>htmlFor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'htmlFor property is required. Set unique name to use Object key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key property is required. Set unique name to use Object key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> isValidObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnCreatedValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isValidObject <span class=\"token operator\">=</span> <span class=\"token function\">onValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      htmlFor<span class=\"token punctuation\">,</span>\n      key<span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">,</span>\n      type<span class=\"token punctuation\">,</span>\n      hasError<span class=\"token operator\">:</span> isValidObject<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> isValidObject<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n      isRequired<span class=\"token punctuation\">,</span>\n      requiredMessage<span class=\"token punctuation\">,</span>\n      isFocus<span class=\"token punctuation\">,</span>\n      onValidation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      isOnCreatedValidation<span class=\"token punctuation\">,</span>\n      isOnChangeValidation<span class=\"token punctuation\">,</span>\n      onGroupValidation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      properties<span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"2-set---get--properties--values\" style=\"position:relative;\"><a href=\"#2-set---get--properties--values\" aria-label=\"2 set   get  properties  values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Set - Get : Properties &#x26; Values</h2>\n<p>다음으로는 properties에 담긴 값들을 Set &#x26; Get 하기 위한 함수들입니다.</p>\n<p>중요한 것은 항상 모든 함수에는 return이 있어야한다는 것입니다. 이유는, 우리는 Reactive하게 사용하려면 함수의 연속된 호출을 위한 현재 객체를 return하는 것이 가장 바람직합니다.</p>\n<blockquote>\n<p>저도 고민이 많은데, class를 이용하는 순간 객체지향 코드로 구성하겠다는 것과 같습니다. 즉, 그 둘을 완벽하게 분리해서 코드를 구성할 수도 있겠지만, 우리가 생각하는 FormBuilder에는 객체지향 요소로 고려하면 장점이 되는 것이 많습니다. 그래서, 객체지향 내부 함수를 최대한 Functional하게 구성하는게 여기서 더 좋은 방법이라고 생각합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FormBuilder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">// 1. 새로운 newProperties의 있는 값만 기존 properties를 덮어줍니다.</span>\n  <span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newProperties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>newProperties<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 2. 값을 바꿀 때, 유효성 감사를 할 것인지에 대한 Option이 true라면 유효성 검사를 합니다.</span>\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>isOnChangeValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleOnValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 3. Properties 중 유효성 검사에 대한 값만 가져오기 위함입니다.</span>\n  <span class=\"token function\">getValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 4. Properties 중 우리가 필요한 값만 가져오기 위함입니다.</span>\n  <span class=\"token function\">getPropertyValueBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propertyKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 5. 현재 갖고있는 모든 Properties를 가져오기 위함입니다.</span>\n  <span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// 6. Form에 값으로 사용되어야 할 Properties를 가져옵니다.</span>\n  <span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> hasError<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n      hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-handlevalidation\" style=\"position:relative;\"><a href=\"#3-handlevalidation\" aria-label=\"3 handlevalidation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. HandleValidation</h2>\n<p>Properties로 주어진 onValidation과 onGroupValidation 함수를 이용하여 FormBuilder의 유효성 Properties를 변경할 예정입니다.</p>\n<p>주의 할 점은 onValidation과 onGroupValidation의 return 값은 <code class=\"language-text\">{ hasError, message }</code> 구조를 가져야 한다는 것입니다.</p>\n<p>또한, GroupValidation은 key값을 이용하여 해당 key값과 매칭되는 부분만 값을 변경합니다. 이는 FormGroupBuilder를 포스팅 할 때 다시 설명드리겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FormBuilder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token comment\">// 1. 해당 값의 유효성 감사를 실행하여 줍니다.</span>\n  <span class=\"token function-variable function\">handleOnValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필수 값의 옵션은 쉽게 체크할 수 있어 FomrBuilder 내에 구현해놓았습니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>isRequired <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>requiredMessage<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// onValidation의 외부 Props값을 받았다면 해당 함수를 이용하여 유효성 검사값을 반영합니다.</span>\n    <span class=\"token keyword\">const</span> isValidObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">onValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>isValidObject<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 에러가 없다면, 그룹 값과 비교한 유효성 검사를 한 번 더 실시합니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleOnGroupValidation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 8. 그룹 유효성 검사를 실시합니다.</span>\n  <span class=\"token function-variable function\">handleOnGroupValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">currentKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> hasError<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">onGroupValidation</span><span class=\"token punctuation\">(</span>currentKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&amp;&amp;</span> hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        key<span class=\"token punctuation\">,</span>\n        hasError<span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<blockquote>\n<p>현재 _를 사용한 이유는 private에 대한 개념이 없기에 이를 명시하기 위함입니다.</p>\n<blockquote>\n<p>ModulePattern을 이용하여 클로저와 스코프를 이용하면 class 내에는 private을 사용할 수 있습니다만, class에 현재 스펙이는 private이 없으므로, 이렇게 작업하였습니다.</p>\n</blockquote>\n</blockquote>\n<h2 id=\"6-formbuilder-completion\" style=\"position:relative;\"><a href=\"#6-formbuilder-completion\" aria-label=\"6 formbuilder completion permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. FormBuilder Completion</h2>\n<p>완성된 FormBuilder 코드는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-disable no-underscore-dangle */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FORM_VALUES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/**\n   * @requires\n   * @type string\n   */</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @requires\n   * @type string\n   */</span>\n  htmlFor<span class=\"token operator\">:</span> <span class=\"token string\">'htmlFor'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// isNotRequired</span>\n  <span class=\"token comment\">/**\n   * @default '''\n   * @type string\n   */</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  hasError<span class=\"token operator\">:</span> <span class=\"token string\">'hasError'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default 'text'\n   * @type string\n   */</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'type'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  isFocus<span class=\"token operator\">:</span> <span class=\"token string\">'isFocus'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  isRequired<span class=\"token operator\">:</span> <span class=\"token string\">'isRequired'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FORM_PROPERTIES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token operator\">...</span><span class=\"token constant\">FORM_VALUES</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default ''\n   * @type string\n   */</span>\n  requiredMessage<span class=\"token operator\">:</span> <span class=\"token string\">'requiredMessage'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default () => { hassError: false, message: '' }\n   * @type function\n   */</span>\n  onValidation<span class=\"token operator\">:</span> <span class=\"token string\">'onValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default { hassError: false, message: '' }\n   * @type function\n   */</span>\n  onGroupValidation<span class=\"token operator\">:</span> <span class=\"token string\">'onGroupValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n  isOnCreatedValidation<span class=\"token operator\">:</span> <span class=\"token string\">'isOnCreatedValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default true\n   * @type boolean\n   */</span>\n  isOnChangeValidation<span class=\"token operator\">:</span> <span class=\"token string\">'isOnChangeValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">/**\n   * @default false\n   * @type boolean\n   */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Will be improvement considering browser</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REQUIRED_CHECKING_TYPES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  htmlFor<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  hasError<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  isFocus<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  isRequired<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  onValidation<span class=\"token operator\">:</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n  requiredMessage<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Group Options</span>\n  onGroupValidation<span class=\"token operator\">:</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n  isOnCreatedValidation<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  isOnChangeValidation<span class=\"token operator\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">FormBuilder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">properties<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_checkPropertiesValidation</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Properties types are not right'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">const</span> formProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_initForm</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> formProperties<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options <span class=\"token operator\">=</span> formProperties<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">_checkPropertiesValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">properties</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> isValidProperty <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REQUIRED_CHECKING_TYPES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> propertyType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> properties<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> validType <span class=\"token operator\">=</span> <span class=\"token constant\">REQUIRED_CHECKING_TYPES</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> validType <span class=\"token operator\">===</span> propertyType<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> isValidProperty<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  _initForm <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Values</span>\n      htmlFor<span class=\"token punctuation\">,</span>\n      key<span class=\"token punctuation\">,</span>\n      value <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      type <span class=\"token operator\">=</span> <span class=\"token string\">'text'</span><span class=\"token punctuation\">,</span>\n      hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      message <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      isRequired <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      requiredMessage <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      isFocus <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Events</span>\n      <span class=\"token function-variable function\">onValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">onGroupValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      isOnCreatedValidation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isOnChangeValidation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>htmlFor<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'htmlFor property is required. Set unique name to use Object key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'key property is required. Set unique name to use Object key'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">let</span> isValidObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnCreatedValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isValidObject <span class=\"token operator\">=</span> <span class=\"token function\">onValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      htmlFor<span class=\"token punctuation\">,</span>\n      key<span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">,</span>\n      type<span class=\"token punctuation\">,</span>\n      hasError<span class=\"token operator\">:</span> isValidObject<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> isValidObject<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n      isRequired<span class=\"token punctuation\">,</span>\n      requiredMessage<span class=\"token punctuation\">,</span>\n      isFocus<span class=\"token punctuation\">,</span>\n      onValidation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> options <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      isOnCreatedValidation<span class=\"token punctuation\">,</span>\n      isOnChangeValidation<span class=\"token punctuation\">,</span>\n      onGroupValidation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      properties<span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleOnValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>isRequired <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>requiredMessage<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> isValidObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span><span class=\"token function\">onValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>isValidObject<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleOnGroupValidation</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function-variable function\">handleOnGroupValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">currentKey</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">onGroupValidation</span><span class=\"token punctuation\">(</span>currentKey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newProperties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>newProperties<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">.</span>isOnChangeValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">handleOnValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token operator\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getPropertyValueBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propertyKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> hasError<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n      hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> FormBuilder<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이번 FormBuilder를 이용하여 ES6 기반의 많은 feature들을 이용할 수 있었습니다. 또한, 객체를 return하여 함수를 쉽게 재호출할 수 있다는 것을 알게되었습니다. 이러한 형식을 monad라고 많이 부릅니다. 특히, JQuery가 이러한 방식을 사용하였다는 것을 알 수 있습니다. 함수형에서도 compose, flow 등을 같이 사용하면 이러한 함수를 구현할 수 있습니다.</p>\n<p>FormBuilder를 만들면서 가장 좋은 것은, FormGroup과 연계되어 생각하면 좋은데 React, Vue 등 을 이용할 때 해당 Builder를 이용하여 해당 객체를 State에 주입하여 사용하면 아주 쉽게 사용할 수 있다는 것입니다.</p>\n<p>즉, 어떠한 Library(Framework)에서도 매번 함수를 새로 구성하여 쉽게 파편화되고 하드코딩되는 부분들을 구조적으로 방지할 수 있다는 것입니다. 당연히 아직 개선할 점이 있지만, Form을 생성하는데는 무리가 없어보입니다.</p>\n<p>여기까지 글 읽어주셔서 감사합니다! :)</p>\n<img src='/assets/images/contents/2019/FormBuilderJsTest.png' width='100%' height='100%'>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://www.w3schools.com/html/html_form_attributes.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Form Attributes - w3schools</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Reference/Operators/typeof\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">typeof - MDN</a></li>\n<li><a href=\"https://stackoverflow.com/questions/10496932/is-jquery-a-monad\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JQuery - Monad - stackoverflow</a></li>\n</ul>","id":"d13399e3-0ce9-59f8-afd8-3ab585996ab5","timeToRead":9}],"categoryName":"TS"}}}
{"componentChunkName":"component---src-templates-category-tsx","path":"/categories/graph-ql","webpackCompilationHash":"aab94e70ae11ee7caf13","result":{"pageContext":{"isCreatedByStatefulCreatePages":false,"posts":[{"excerpt":"이번에 간단히 NodeJS와 GraphQL로 회사에 직원들과 책을 관리할 수 있는 프로젝트를 만들어보았습니다.\n이와 관련하여 간단히 정리해보자 합니다. Example-GraphQL Repositroy Intro GraphQL…","html":"<p>이번에 간단히 NodeJS와 GraphQL로 회사에 직원들과 책을 관리할 수 있는 프로젝트를 만들어보았습니다.\n이와 관련하여 간단히 정리해보자 합니다.</p>\n<ul>\n<li><a href=\"https://github.com/Seolhun/example-graphql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Example-GraphQL Repositroy</a></li>\n</ul>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>GraphQL로 프로젝트를 진행하면서 개인적으로 <code class=\"language-text\">GraphQL은 객체지향</code>의 가치를 갖고 있다고 얘기하고 싶습니다. 이유는, 각각의 타입을 정의하여 재사용 할 수 있으며, 그 안에서 유혀성 검사 및 다양한 기능들을 쉽게 이용할 수 있기 때문입니다.</p>\n<p>공식 홈페이지는 아래와 같이 설명하고 있습니다.</p>\n<blockquote>\n<p>GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn't tied to any specific database or storage engine and is instead backed by your existing code and data.</p>\n</blockquote>\n<ol>\n<li>\n<p>A query language for your API</p>\n<ul>\n<li>API 호출을 쿼리처럼 질의하여 가져옵니다.</li>\n</ul>\n</li>\n<li>\n<p>Executing queries by using a type system you define for your data</p>\n<ul>\n<li>데이터를 정의한 타입을 이용하여 쿼리를 실행합니다.</li>\n</ul>\n</li>\n<li>\n<p>GraphQL isn't tied to any specific database or storage engine</p>\n<ul>\n<li>GraphQL은 데이터베이스나 스토리지 엔진에 묶여있지 않습니다.</li>\n</ul>\n</li>\n</ol>\n<p>위의 3가지 사항은 앞으로 간단히 코드를 짜면서 확인할 수 있습니다. GraphQL을 사용하므로써 REST로 JSON을 주고받는 일반적인 형식에서 벗어날 수 있는 추가사항이 생길 수 있습니다.\n일반적인 REST처럼 GraphQL은 자원에 주소값을 부여하지 않고, Query로 이를 접근할 수 있는 HTTP Interface입니다. 즉, GraphQL은 HTTP 통신을 위한 interface 역할을 수행합니다. HTTP Request 형식을 Query로 요청하며, 해당 서버가 이를 이해할 수 있게 변환시켜 사용할 수 있는 것입니다. 그래서, Server에서 설정시에도 GraphQL-HTTP 등 다양한 Interface와 MiddleWare를 설정하여 서버가 이해할 수 있는 방법으로 바뀌는 것입니다.</p>\n<p>가장 중요한 것은 GraphQL도 모든 것을 정의해주어야 합니다. 뭐 개발자로서 당연한 얘기겠지요. 공식 홈페이지의 2번 내용에 해당하는 것입니다. 해당 Type을 다 정의하여 GraphQL이 해당 객체를 인식하고 있어야 합니다. 기존의 'REST도 해당 언어에서 Domain(Model)을 구현하면 같은거 아니야?'라고 생각할 수 있습니다. 하지만, HTTP 계층에서 데이터를 세세하게 요청할 수는 없었습니다(Request Layer에서 인식하지 못한다는 것입니다). 그냥 해당 Domain을 JSON 형식으로 전송해준 것 뿐이죠.</p>\n<p>간단한 예를 들어, Github API를 이용해보시면 알 수 있습니다. Github에서 REST로 구성된 API.V3를 호출하면, 필요없는 데이터가 모두 Response로 나옵니다. 이에 반해 GraphQL API.V4은 필요한 데이터만 요청하여 가져올 수 있습니다.</p>\n<p>이제 간단히 GraphQL을 사용해보겠습니다.</p>\n<h5 id=\"1-내용순서\"><a href=\"#1-%EB%82%B4%EC%9A%A9%EC%88%9C%EC%84%9C\" aria-label=\"1 내용순서 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 내용순서</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. Express 서버 설정하기\n2. GraphQL 시작하기\n3. Schema와 Type이란?\n4. Query와 Mutation이란?\n5. Test</code></pre></div>\n<h5 id=\"2-dev-environments\"><a href=\"#2-dev-environments\" aria-label=\"2 dev environments permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Dev Environments</h5>\n<ul>\n<li>\n<p>Language</p>\n<ul>\n<li>NodeJS 8.9.4</li>\n<li>Typescript 2.7.1</li>\n</ul>\n</li>\n<li>\n<p>IDE</p>\n<ul>\n<li>Visual Studio Code</li>\n</ul>\n</li>\n</ul>\n<p>이번 설명은 NodeJS와 Typescript를 사용하였습니다. 개인적으로 JS는 거의 Typescript로 사용하고 있습니다. 객체의 타입을 정의하는 것에 강한 집념을 가지고 있습니다.\n그래서 Java도 좋아하지만, Script 언어의 매력도 있고 Java보다 훨씬 자유롭고 편리해서 JS를 좋아합니다.</p>\n<h2 id=\"contents\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<h5 id=\"1-express-서버-설정하기\"><a href=\"#1-express-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"1 express 서버 설정하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Express 서버 설정하기</h5>\n<p>기본 패키지를 설치하겠습니다. Express Framework를 사용할 예정입니다. 그리고, 타입스크립트를 사용하므로써 타입이 정의된 Package도 같이 설치하여줍니다.</p>\n<ol>\n<li>npm install -g typescript</li>\n<li>npm init -y</li>\n<li>tsc --init</li>\n<li>strict는 제거해줍니다.</li>\n<li>npm install --save express express-graphql graphql typescript ts-node json-server axios</li>\n<li>npm install --save-dev @types/express @types/express-graphql @types/graphql</li>\n</ol>\n<p>마지막으로 index.ts 파일을 만들어주고 package.json에 있는 main 부분을 <code class=\"language-text\">&quot;main&quot;: &quot;app/index.ts&quot;</code>로 바꾸어주고, scripts부분에 <code class=\"language-text\">&quot;dev&quot;: &quot;ts-node app/index.ts&quot;</code>를 작성하여 줍니다.\n이렇게하여 GraphQL에 필요한 서버 패키지 설정이 끝났습니다.</p>\n<h5 id=\"2-graphql-시작하기\"><a href=\"#2-graphql-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"2 graphql 시작하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. GraphQL 시작하기</h5>\n<ol>\n<li>간단하게 서버를 실행시킬 코드를 작성하여 줍니다. root에 <code class=\"language-text\">app/index.ts</code> 파일을 만들어줍니다.</li>\n<li>\n<p>Express와 GraphQL 설정을 같이 작성하였습니다.</p>\n<ul>\n<li>GraphQL를 사용하기 위해서는 <code class=\"language-text\">API를 쿼리로 호출했을 때, 무엇을 전송해줄 것인가? 즉, schema를 정의해야합니다.</code></li>\n<li>아래 코드에서 해당 schema 안에 앞으로 GraphQL 설정에 필요한 내용들이 들어갑니다.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> graphqlHTTP <span class=\"token keyword\">from</span> <span class=\"token string\">'express-graphql'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/graphql/schema'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// GraphQL</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span> <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    schema<span class=\"token punctuation\">,</span>\n    graphiql<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// GraphQL 쿼리를 테스트할 수 있는 Dev Tool입니다.</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run Server</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">7000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'=========================app.ts==========================='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening the server 7000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'===================================================='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>현재 에러가 나있는 부분을 3,4번의 과정을 통해 해결해나가겠습니다.</p>\n<h5 id=\"3-schema와-type이란\"><a href=\"#3-schema%EC%99%80-type%EC%9D%B4%EB%9E%80\" aria-label=\"3 schema와 type이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Schema와 Type이란?</h5>\n<p>GraphQL에 Schema는 간단하게 <code class=\"language-text\">GraphQL이 인식할 수 있는 구조</code>를 말합니다. GraphQL은 강타입 구조를 가지고 있어 해당 구조 안에 다양한 Type들을 정의하여야만 사용할 수 있습니다.\nGraphQL Query 내에서 타입체크 및 유효성 검사 기능도 있어 해당 구조 안에 정의에 맞게 사용하여야 합니다. 기본적으로 사용되는 Type은 Query와 Muation Type입니다.</p>\n<ul>\n<li>간단하게 schema 코드를 작성해보겠습니다. 경로는 <code class=\"language-text\">/app/routes/graphql/schema/index.ts</code> 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLSchema<span class=\"token punctuation\">,</span> printSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../mutation'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../query'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSchemaString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">printSchema</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  query<span class=\"token punctuation\">,</span>\n  mutation<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>Query와 Mutation에는 기본적으로 Domain과 같은 객체 Type을 지정해주어야합니다.</p>\n<ul>\n<li>간단하게 객체 type 코드를 작성해보겠습니다. 해당 파일의 경로는 <code class=\"language-text\">/app/routes/graphql/type/index.ts</code> 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLList<span class=\"token punctuation\">,</span> GraphQLObjectType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLInt<span class=\"token punctuation\">,</span> GraphQLString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql/type/scalars'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UserType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span>\n  fields<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    birth<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token punctuation\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> UserType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>schema 안에는 기본적으로 사용되는 query와 mutation이 들어갑니다. 다음에는 query와 mutation을 정의하겠습니다.</p>\n<h5 id=\"4-query와-mutation이란\"><a href=\"#4-query%EC%99%80-mutation%EC%9D%B4%EB%9E%80\" aria-label=\"4 query와 mutation이란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Query와 Mutation이란?</h5>\n<p>query와 mutation은 헷갈릴 수 있지만, 둘다 Query입니다. 하지만, 둘의 명확한 차이점이 있습니다.</p>\n<p>둘의 가장 근본적인 차이는 <code class=\"language-text\">Query 필드는 병렬로 실행되지만, Mutation 필드는 순차적으로 실행됩니다.</code> 즉, 해당 Query 안에서 여러개의 요청이 주어지면 Mutation은 순차적으로 프로세스를 완료시킵니다. 그렇기 때문에 query를 사용하여 데이터를 변이시키는 작업은 적합하지 않습니다. 병렬로 실행되어 원하는 프로세스로 작동되지 않기 때문입니다.</p>\n<p>이제 간단하게 query와 mutation 코드를 작성해볼 예정입니다. 들어가기에 앞서 제한사항을 말씀드리겠습니다. GraphQL은 database나 storage에 묶여있지 않습니다. 반대로, 해당 데이터가 쿼리되는 과정을 보기위해서는 데이터베이스나 스토리지와 묶여있는 코드를 작성해야합니다. 그렇게되면 설명할게 늘어나므로, <code class=\"language-text\">json-server</code>를 간단하게 사용하여 <code class=\"language-text\">axios</code>로 해당 json-server의 있는 데이터를 호출해서 사용하도록 하겠습니다.</p>\n<ol>\n<li>root 경로에 <code class=\"language-text\">db.json</code> 파일을 만들어 줍니다.</li>\n<li>\n<p>package.json에 <code class=\"language-text\">&quot;json-server&quot;: &quot;json-server --watch db.json&quot;</code>를 넣어줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n<span class=\"token property\">\"users\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1990-01-26\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"seolhun@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Seolhun\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1980-11-11\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mark@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1977-03-15\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"john@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1987-07-17\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gabriel@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Gabriel\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1983-05-16\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chris\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1990-01-26\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chan@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chan\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1994-02-28\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"solomon@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Solomon\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1992-04-05\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ruby@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ruby\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1983-10-10\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"python@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Python\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1985-05-25\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"james@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"James\"</span><span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>간단하게 <code class=\"language-text\">query</code> 코드를 작성해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLFieldConfigMap<span class=\"token punctuation\">,</span> GraphQLList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLInt<span class=\"token punctuation\">,</span> GraphQLString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql/type/scalars'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UserType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../type/index'</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>import { User } from '../../../types';</p>\n<p>import axios from 'axios';</p>\n<p>const UserQuery: GraphQLFieldConfigMap&#x3C;any, any> = {\nuser: {\ntype: UserType,\nargs: {\nid: { type: GraphQLInt },\nemail: { type: GraphQLString },\nname: { type: GraphQLString },\n},\nasync resolve(parent, { id, email, name }: User, context, info) {\nconst result = await axios.get(<code class=\"language-text\">http://localhost:3000/users/${name}</code>);\nreturn result.data;\n},\n},\nusers: {\ntype: new GraphQLList(UserType),\nasync resolve(parent, args, context, info) {\nconst result = await axios.get('<a href=\"http://localhost:3000/users&#x27;\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:3000/users'</a>);\nreturn result.data;\n},\n},\n};</p>\n<p>export { UserQuery };</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\n- 간단하게 `mutation` 코드를 작성해보겠습니다.\n```tsx\nimport { GraphQLFieldConfigMap, GraphQLNonNull } from &#39;graphql&#39;;\nimport { GraphQLInt, GraphQLString } from &#39;graphql/type/scalars&#39;;\nimport { UserType } from &#39;../type/index&#39;;\n\nimport { User } from &#39;../../../types&#39;;\n\nimport axios from &#39;axios&#39;;\n\nconst UserMutation: GraphQLFieldConfigMap&lt;any, any&gt; = {\n  // Basic\n  addUser: {\n    type: UserType,\n    args: {\n      email: { type: new GraphQLNonNull(GraphQLString) },\n      name: { type: new GraphQLNonNull(GraphQLString) },\n      birth: { type: new GraphQLNonNull(GraphQLString) },\n    },\n    async resolve(parent, { email, name, birth }: User, context, info) {\n      const result = await axios.post(&#39;http://localhost:3000/users&#39;, {\n        email,\n        name,\n        birth,\n      } as User);\n      return result.data;\n    },\n  },\n  editUser: {\n    type: UserType,\n    args: {\n      id: { type: GraphQLInt },\n      email: { type: GraphQLString },\n      name: { type: GraphQLString },\n      birth: { type: GraphQLString },\n    },\n    async resolve(parent, { id, email, name, birth }: User, context, info) {\n      const result = await axios.patch(`http://localhost:3000/users/${id}`, {\n        email,\n        name,\n        birth,\n      } as User);\n      return result.data;\n    },\n  },\n  deleteUser: {\n    type: UserType,\n    args: {\n      id: { type: GraphQLInt },\n      email: { type: GraphQLString },\n    },\n    async resolve(parent, { id, email }: User, context, info) {\n      const result = await axios.delete(`http://localhost:3000/${id}`);\n      return result.data;\n    },\n  },\n};\n\nexport { UserMutation };</code></pre></div>\n<hr>\n<ul>\n<li>\n<p>Type을 미리 정의해두면 여러 곳에서 객체 안의 값을 제한하여 개발속도 향상에 좋은 효과를 거둘 수 있습니다.\n코드에서 <code class=\"language-text\">types</code>에 들어가있는 코드 내용입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\nid<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\nemail<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\nname<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\nbirth<span class=\"token operator\">?</span><span class=\"token punctuation\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>export { User };</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">##### 5. Test\n이렇게 작성되었으면 처음 설정하였던 `graphiql`를 이용하여 테스트해보겠습니다. [http://localhost:7000/graphql](http://localhost:7000/graphql)\n\n1. Query 사용해보기 - 1\n```gql\nquery {\n  users {\n    id\n    birth\n    email\n    name\n  }\n}</code></pre></div>\n<ol>\n<li>\n<p>Query 사용해보기 - 2</p>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">query {\nusers {\nid\nbirth\nemail\nname\n}</code></pre></div>\n</li>\n</ol>\n<p>  employees: users {\nid\nbirth\nemail\nname\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">---\n2. Mutation 사용해보기 - 1\n```gql\nmutation {\n  addUser(name:&quot;Ronaldo&quot;, email:&quot;ronaldo@seolhun.com&quot;, birth:&quot;1990-07-21&quot;){\n    id\n    name\n    email\n    birth\n  }\n}</code></pre></div>\n<ol start=\"2\">\n<li>\n<p>Mutation 사용해보기 - 2</p>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">mutation {\naddUser(name:&quot;Ronaldo&quot;, email:&quot;ronaldo@seolhun.com&quot;, birth:&quot;1990-07-21&quot;){\nid\nname\nemail\nbirth\n}</code></pre></div>\n</li>\n</ol>\n<p>  editUser(id: 11, name:\"Messi\"){\nid\nname\nemail\nbirth\n}\n}</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">4. 기타 Fragment 사용해보기.\n```gql\nquery {\n  users {\n    ...onlyUK\n  }\n}\n\nfragment onlyUK on User {\n  id\n  email\n}</code></pre></div>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이렇게하여 간단하게 GraphQL을 체험해보았습니다. schema 구성부터 query, mutation 등등 기본적인 것을 코드로 작성해보면서 GraphQL이란 것을 간단히 알 수 있었을 것이라고 생각합니다. Query의 장점은 <code class=\"language-text\">서로가 원하는 것을 약속한 데로 이행한다.</code>라고 생각합니다. 기존의 모든 데이터를 받는 것보다 Query 내에서 해당 객체들을 조정할 수 있는 부분이 참 긍정적으로 보여집니다. 또한, 해당 Query들을 잘 구성하면 재사용이 쉽게 가능할 수 있습니다.</p>\n<p>문제점으로는 해당 객체들을 변경하는 부분들이 연속적으로 일어나 변경되는 부분에서의 큰 어려움이 있을 것이라고 생각합니다. 또한 Resolver를 통해 통신되기 때문에 속도가 생각보다 느려집니다. 속도 개선 오픈소스는 페이스북에서 <a href=\"https://github.com/facebook/dataloader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dataloader</a>이란 것이 있습니다.</p>\n<p>추가적으로, 페이스북에서는 GraphQL의 속도문제를 해결하기 위해, 대부분의 데이터를 Cache Storage에 적재시켜 Cache에서 바로 꺼내쓸 수 있게 만든다는 얘기도 들었습니다. DB에서 계속 호출하여 네트워크와 서버비용을 감당하는 것보다, Cache를 통해 서버 비용만을 감당하는 것이 더 합리적일 수도 있다라는 이야기로 보입니다.</p>\n<p>이 외에도 GraphQL을 실무적으로 더 접근하면 권한문제를 해결해야 합니다. 요청하는 데이터의 Depth 제한, 권한에 따른 Field 값 제한 등 다양한 부분을 해결해주어야 합니다. 이 또한 오픈소스를 통해 개발들이 일어나고 있으니 블로그나 오픈소스를 찾아보시면 도움이 될 것이라고 생각합니다.</p>\n<p>부족하지만, 간단하게 GraphQL에 대해서 알아보는 시간은 여기까지하겠습니다. 이상한 부분이나 부족한 부분은 글로 써주시면 감사합니다.\n<code class=\"language-text\">다음 블로그는 GraphQL을 수치적으로 접근하여 어떠한 성능이 나오는지와 개선이 일어나는지를 알아보겠습니다.</code></p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"http://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL.org</a></li>\n<li><a href=\"https://github.com/graphql/express-graphql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Express-GraphQL</a></li>\n</ul>","id":"c17ea39c-4913-5a1f-82c4-ee4d175f17f2","fields":{"slug":"js-ts-graph-ql-graph-ql-시작해보기-part-1"},"frontmatter":{"title":"[JS/TS/GraphQL] GraphQL 시작해보기 - Part 1","date":"2018-04-03T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/js.png","category":"GraphQL","tags":["Javascript","Typescript","NodeJS","GraphQL"]},"timeToRead":8}],"categoryName":"GraphQL"}}}
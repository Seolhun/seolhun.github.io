{"componentChunkName":"component---src-templates-post-tsx","path":"/blogs/java-thread-java-thread-pool을-이용한-thread를-이해하기-thread-runnable","webpackCompilationHash":"","result":{"data":{"markdownRemark":{"html":"<p>안녕하세요, 설훈입니다.\n이번에는 Java의 Thread, Runnable, Task 등에 대해서 알아보겠습니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<ol>\n<li>Thread로 간단한 게임 프로젝트 진행 중 Thread에 대한 관리가 명확하지 않아 Thread Pool을 통해 Thread에 관리 가능정도와 효율성 장단점을 이해하고 싶었다.</li>\n<li>Multi Thread 간 자원공유가 이루어지는 방식에 대해 더 자세히 알아보고 싶었다.</li>\n<li>Thread Life Cycle에 대한 이해의 부족으로 필요한 메소드를 사용하지 못했으며, 이를 해결하기 위해 Life Cycle에 따른 상태관리와 필요한 메소드에 알아보고자 한다.</li>\n</ol>\n<h2 id=\"goal\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h2>\n<ol>\n<li>Java에서 제공하는 Executors를 통해 Thread Pool을 구현해보고 이에 대한 장단점을 이해한다.</li>\n<li>MultiThread를 예제를 통해 Thread의 작업 순서와 자원공유 등에 대한 필요지식을 이해한다.</li>\n<li>Thread에 Join, Wait, Notify, Yield 등의 API를 통해 Thread의 Life Cycle을 이해한다.</li>\n</ol>\n<h2 id=\"keywords\"><a href=\"#keywords\" aria-label=\"keywords permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Keywords</h2>\n<ol>\n<li>Thread\n스레드(thread)는 어떠한 프로그램 내에서, 특히 프로세스 내에서 실행되는 흐름의 단위를 말한다. 일반적으로 한 프로그램은 하나의 스레드를 가지고 있지만, 프로그램 환경에 따라 둘 이상의 스레드를 동시에 실행할 수 있다. 이러한 실행 방식을 멀티스레드(multithread)라고 한다.</li>\n<li>Process\n프로세스(process)는 컴퓨터에서 연속적으로 실행되고 있는 컴퓨터 프로그램을 말한다. 종종 스케줄링의 대상이 되는 작업(task)이라는 용어와 거의 같은 의미로 쓰인다. 여러 개의 프로세서를 사용하는 것을 멀티프로세싱이라고 하며 같은 시간에 여러 개의 프로그램을 띄우는 시분할 방식을 멀티태스킹이라고 한다. 프로세스 관리는 운영 체제의 중요한 부분이 되었다.</li>\n<li>Process Vs Thread\n멀티프로세스와 멀티스레드는 양쪽 모두 여러 흐름이 동시에 진행된다는 공통점을 가지고 있다. 하지만 멀티프로세스에서 각 프로세스는 독립적으로 실행되며 각각 별개의 메모리를 차지하고 있는 것과 달리 멀티스레드는 프로세스 내의 메모리를 공유해 사용할 수 있다. 또한 프로세스 간의 전환 속도보다 스레드 간의 전환 속도가 빠르다.</li>\n</ol>\n<p>멀티스레드의 다른 장점은 CPU가 여러 개일 경우에 각각의 CPU가 스레드 하나씩을 담당하는 방법으로 속도를 높일 수 있다는 것이다. 이러한 시스템에서는 여러 스레드가 실제 시간상으로 동시에 수행될 수 있기 때문이다.</p>\n<p>멀티스레드의 단점에는 각각의 스레드 중 어떤 것이 먼저 실행될지 그 순서를 알 수 없다는 것이 있다.</p>\n<ol start=\"4\">\n<li>Multi Tasking\n전산학 분야에서 멀티태스킹(multitasking) 또는 다중작업(이하 멀티태스킹)은 다수의 작업(혹은 프로세스, 이하 태스크)이 중앙 처리 장치(이하 CPU)와 같은 공용자원을 나누어 사용하는 것을 말한다. 엄밀히 말해 한 개의 CPU를 가진 개인용 컴퓨터가 특정 순간에 수행할 수 있는 태스크의 개수는 하나뿐이다. 따라서 멀티태스킹은 스케줄링이라는 방식을 사용하여 컴퓨터 사용자에게 병렬 연산이 이루어지는 것과 같은 환경을 제공한다. 스케줄링 방식은 CPU 사용시간을 일정한 기준에 따라 나누어 각 태스크가 사용할 수 있도록 분배한다. 분배받은 시간동안 태스크가 CPU를 사용할 때 다른 태스크들은 자신의 차례가 오기를 기다린다. 분배받은 시간이 종료되어 태스크가 사용하던 CPU를 다른 태스크가 사용할 수 있도록 재배정하는 것을 문맥교환이라 하는데 스케줄링에서 이 문맥교환이 충분히 자주 발생하게 되면 컴퓨터 사용자는 병렬 연산이 이루어진 것처럼 느끼게 된다.</li>\n</ol>\n<p>멀티태스킹은 다수의 CPU를 내장한 컴퓨터(즉, 멀티프로세서)에서도 유효한데, 멀티태스킹을 사용하게 되면 탑재한 CPU의 숫자보다 많은 수의 태스크를 동시에 수행할 수 있게 된다.</p>\n<p>일반적으로 운영 체제는 아래 나열된 스케줄링 방식중 하나를 채택해서 사용한다.\n멀티프로그래밍 시스템에서는 현재 실행되고 있는 태스크는 다른 외부 이벤트를 기다려야 하는 상황이 되거나, 컴퓨터의 스케줄러가 강제로 실행 중인 태스크를 중단시킬 때까지 계속 진행된다. 멀티 프로그램 시스템은 CPU 사용률을 극대화할 수 있도록 설계되었다.</p>\n<ul>\n<li>시분할 시스템에서는 현재 실행되고 있는 태스크가 스스로 혹은 하드웨어 인터럽트 따위의 외부적인 이유로 중앙 처리 장치의 점유를 포기해야 한다. 시분할 시스템은 다수의 프로그램이 거의 동시에 수행될 수 있도록 해준다. '시간을 분할한다'라는 표현은 단말에 위치한 사용자가 함께 공유할 수 있는 IBM사의 TSO, CP/CMS와 같은 컴퓨터를 가리키기 위해 쓰였다.</li>\n<li>실시간 시스템에서는 외부 이벤트가 발생하였을 때 몇 개의 대기 중인 태스크들이 CPU를 점유할 수 있도록 보장해 준다. 실시간 시스템은 시간 내에 처리하여야 하는 산업 로봇과 같은 기계적인 장치를 제어하기 위해 사용된다.</li>\n</ul>\n<p>동일한 시스템을 여러 명이 공유해서 쓰는 것을 나타내던 시분할이라는 용어는 개인용 컴퓨터와 워크스테이션의 발전으로 인해 멀티태스킹이라는 용어로 대체되어 특수한 경우를 제외하고 현재는 거의 사용되지 않는다.</p>\n<h2 id=\"contents\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<h4 id=\"1-thread와-runnable을-통한-thread-만들기-방식과-생성의-차이점-알아보기\"><a href=\"#1-thread%EC%99%80-runnable%EC%9D%84-%ED%86%B5%ED%95%9C-thread-%EB%A7%8C%EB%93%A4%EA%B8%B0-%EB%B0%A9%EC%8B%9D%EA%B3%BC-%EC%83%9D%EC%84%B1%EC%9D%98-%EC%B0%A8%EC%9D%B4%EC%A0%90-%EC%95%8C%EC%95%84%EB%B3%B4%EA%B8%B0\" aria-label=\"1 thread와 runnable을 통한 thread 만들기 방식과 생성의 차이점 알아보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1) Thread와 Runnable을 통한 Thread 만들기 방식과 생성의 차이점 알아보기.</h4>\n<h4 id=\"차이점\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90\" aria-label=\"차이점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점.</h4>\n<ol>\n<li>Thread는 Class로서 Extends(상속), Runnable은 Interfacle로서 Implements(구현)을 사용한다.</li>\n<li>Thread 자체를 다시 만드는 것과 Thread에 작동되는 부분(run)을 Interface로 구현하는 것의 차이가 있다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">shooney<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span>extendsinterface</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadExntedsExample</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Thread</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/* Thread의 run method 재정의하기. */</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* 작업내용 */</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">ThreadExntedsExample</span> threadExntedsExample<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadExntedsExample</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tthreadExntedsExample<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">package</span> <span class=\"token namespace\">shooney<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>thread<span class=\"token punctuation\">.</span>extendsinterface</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">RunnableInterface</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/* Interface의 run method 구현하기. */</span>\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* 작업내용 */</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* Interface Instance */</span>\n\t\t<span class=\"token class-name\">RunnableInterface</span> runnableInterface<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">RunnableInterface</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">/* Oracle 문서 : Runnable Interface는 Thread에 의해 실행될 class에 Implements 되어야 합니다. 이 클래스에는 인자가 없는 run() method를 재정의해아합니다.*/</span>\n\t\t<span class=\"token class-name\">Thread</span> thread<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">Thread</span><span class=\"token punctuation\">(</span>runnableInterface<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tthread<span class=\"token punctuation\">.</span><span class=\"token function\">setPriority</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tthread<span class=\"token punctuation\">.</span><span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span> <span class=\"token operator\">/</span>highlight  <span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n#### <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>과 <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>의 차이\n<span class=\"token operator\">-</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>메소드는 단순히 클래스에 오버라이딩 된 메소드를 호출해서 사용하는 것으로 생각하면 쉽다<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>메소드는 새로운 쓰레드가 작업을 실행하는데 필요한 호출스택<span class=\"token punctuation\">(</span>공간<span class=\"token punctuation\">)</span>을 생성한 다음 <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>을 호출해서 그 안<span class=\"token punctuation\">(</span>스택<span class=\"token punctuation\">)</span>에 <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>이 저장되는 것이다<span class=\"token punctuation\">.</span> 즉<span class=\"token punctuation\">,</span> 쓰레드를 사용하기 위해 <span class=\"token function\">start</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>를\n\n실행시키는 순간 쓰레드만의 독립적인 작업 공간인 호출스택이 만들어지는 것이다<span class=\"token punctuation\">.</span> 그 후에 호출 스택안에 각 실행하고자 하는 예를 들면 <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>과 같은 메소드들이 저장되는 것이다<span class=\"token punctuation\">.</span> 호출 스택에 있는 내용들이 모두 수행하고 나면 쓰레드는 호출스택 공간과 함께 메모리 상에서 소멸된다<span class=\"token punctuation\">.</span>\n\n#### <span class=\"token class-name\">Thread</span>의 우선순위<span class=\"token punctuation\">(</span><span class=\"token class-name\">Proiority</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">-</span> <span class=\"token class-name\">Thread</span>가 가질 수 있는 우선순위의 범위는 <span class=\"token number\">1</span> <span class=\"token operator\">~</span> <span class=\"token number\">10</span> 이며<span class=\"token punctuation\">,</span> 숫자가 높을수록 우선순위가 높다<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> 우선순위라는 속성<span class=\"token punctuation\">(</span>멤버변수<span class=\"token punctuation\">)</span>을 가지고 있는데<span class=\"token punctuation\">,</span> 이 우선순위의 값에 따라 <span class=\"token class-name\">Thread</span>가 얻는 실행시간이 달라진다<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> 수행하는 작업의 중요도에 따라 <span class=\"token class-name\">Thread</span>의 우선순위를 서로 다르게 지정하여 특정 <span class=\"token class-name\">Thread</span>가 더 많은 작업시간을 갖도록 할 수 있다<span class=\"token punctuation\">.</span>\n<span class=\"token operator\">-</span> <span class=\"token class-name\">Thread</span>의 우선순위는 <span class=\"token class-name\">Thread</span>를 생성한 <span class=\"token class-name\">Thread</span>로부터 상속받는다<span class=\"token punctuation\">.</span>\n\n### <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Thread</span> pool을 이용한 <span class=\"token class-name\">Thread</span> 작동 방식 보기<span class=\"token punctuation\">.</span>\n```java\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ThreadPool1</span> <span class=\"token keyword\">implements</span> <span class=\"token class-name\">Runnable</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span> threadName<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">ThreadPool1</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> threadName<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadName<span class=\"token operator\">=</span>threadName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'의 '</span><span class=\"token operator\">+</span>threadName<span class=\"token operator\">+</span><span class=\"token string\">'이 시작되었습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sleepThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">currentThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">'가 종료되었습니다'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sleepThread</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Thread</span><span class=\"token punctuation\">.</span><span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token number\">2000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\">InterruptedException</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\te<span class=\"token punctuation\">.</span><span class=\"token function\">printStackTrace</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token annotation punctuation\">@Override</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>threadName<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">ExecutorService</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MainClass</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> args<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">/* 5개의 Pool을 Fix한다. */</span>\n\t\t<span class=\"token class-name\">ExecutorService</span> executorService<span class=\"token operator\">=</span><span class=\"token class-name\">Executors</span><span class=\"token punctuation\">.</span><span class=\"token function\">newFixedThreadPool</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token class-name\">Runnable</span> doThread<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">ThreadPool1</span><span class=\"token punctuation\">(</span><span class=\"token string\">'SleepThread'</span><span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\texecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">execute</span><span class=\"token punctuation\">(</span>doThread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">/* ExecutorService의 모든 작업 이후 다른 thread 호출을 10초 동안 차단합니다.\n\t\texecutorService.awaitTermination(10, TimeUnit.SECONDS);\n\t\t*/</span>\n\n\t\t<span class=\"token comment\">/* ExecutorService 종료 */</span>\n\t\texecutorService<span class=\"token punctuation\">.</span><span class=\"token function\">shutdown</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">/* ExecutorService 종료되었는지 확인. */</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>executorService<span class=\"token punctuation\">.</span><span class=\"token function\">isTerminated</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">'모든 Thread가 종료되었습니다.'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<sub>\n    <p>- Result</p>\n    <img src='/images/contents/20170422/1.jpg' width='100%' height='100%'>\n</sub>\n<h3 id=\"3-excutorservice-method-이해하기\"><a href=\"#3-excutorservice-method-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"3 excutorservice method 이해하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. ExcutorService Method 이해하기.</h3>\n<ul>\n<li>\n<p>shutdown()</p>\n<ul>\n<li>이 메소드는 Excuotrs의 작업을 기다리고 종료시킵니다. 다른 작업의 종료를 기다려줍니다.</li>\n</ul>\n</li>\n<li>\n<p>shutdownNow()</p>\n<ul>\n<li>이 메소드는 Excutors를 바로 종료시킵니다. 이 메소드는 다른 작업의 종료까지 기다려주지 않습니다. (위 에러에서 이 메소드를 선언 시 Sleep을 기다리지 않고 종료하기 때문에 InterruptedException에러를 발생시킵니다.)</li>\n</ul>\n</li>\n<li>\n<p>isTerminated()</p>\n<ul>\n<li>Executor의 프로세스가 모두 종료되었으면 True를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p>isShutdown()</p>\n<ul>\n<li>Executor의 shutdown () 메소드를 호출 한 경우 true를 반환합니다.</li>\n</ul>\n</li>\n<li>\n<p>awaitTermination(longtimeout, TimeUnitunit)</p>\n<ul>\n<li>Ex) executorService.awaitTermination(10, TimeUnit.SECONDS);</li>\n<li>이 메소드는 실행 프로그램의 작업이 종료되거나 시간 초과가 발생할 때까지 호출 스레드를 차단합니다.</li>\n</ul>\n</li>\n<li>\n<p>Executors 클래스는 ThreadPoolExecutor를 사용하는 ExecutorService의 간단한 구현을 제공하지만, ThreadPoolExecutor는 이보다 훨씬 많은 기능을 제공합니다. 우리는 ThreadPoolExecutor 인스턴스를 만들 때 생존 할 스레드 수를 지정할 수 있으며 스레드 풀의 크기를 제한하고 자체 RejectedExecutionHandler 구현을 만들어 작업자 큐에 들어 가지 않는 작업을 처리 할 수 있습니다.</p>\n<ul>\n<li>[Executors] (<a href=\"http://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://docs.oracle.com/javase/tutorial/essential/concurrency/executors.html</a>)</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"4-thread의-api를-통해-thread-life-cycle-이해하기\"><a href=\"#4-thread%EC%9D%98-api%EB%A5%BC-%ED%86%B5%ED%95%B4-thread-life-cycle-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0\" aria-label=\"4 thread의 api를 통해 thread life cycle 이해하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Thread의 API를 통해 Thread Life cycle 이해하기.</h3>\n<ul>\n<li>\n<p>NEW</p>\n<ul>\n<li>쓰레드가 생성되고 아직 start()가 호출되지 않은 상태</li>\n</ul>\n</li>\n<li>\n<p>RUNNABLE</p>\n<ul>\n<li>실행 중 또는 실행 가능한 상태</li>\n</ul>\n</li>\n<li>\n<p>BLOCKED</p>\n<ul>\n<li>동기화블럭에 의해서 일시정지된 상태(LOCK이 풀릴 때 까지 기다리는 상태)</li>\n</ul>\n</li>\n<li>\n<p>WAITING, TIMED_WAITING</p>\n<ul>\n<li>쓰레드의 작업이 종료되지는 않았지만 실행가능하지 않은(unrunnable) 일시 정지상태, TIMED_WAITING은 일시정지시간이 지정된 경우를 의미</li>\n</ul>\n</li>\n<li>\n<p>TERMINATED</p>\n<ul>\n<li>\n<p>쓰레드의 작업이 종료된 상태\n<sub></p>\n<p>- Result</p>\n<img src='/images/contents/20170422/2.jpg' width='100%' height='100%'>\n</sub>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"life-cycle이해를-위한-method\"><a href=\"#life-cycle%EC%9D%B4%ED%95%B4%EB%A5%BC-%EC%9C%84%ED%95%9C-method\" aria-label=\"life cycle이해를 위한 method permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Life Cycle이해를 위한 Method</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">void interrupt()</code></p>\n<ul>\n<li>sleep()이나 join()에 의해 일시정지상태인 쓰레드를 실행 대기 상태로 만든다.</li>\n<li>해당 쓰레드에서는 InterruptedException이 발생함으로써 일시정지상태를 벗어나게 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void join()</code></p>\n<ul>\n<li>\n<p>join() 메소드는 다른 Thread가 현재 진행중이라면 이 Thread의 완료를 기다리는 것이며, 진행중인 Thread가 완료되면 이후 실행된다. 현재 진행 중인 Thread 이후 join한다고 생각하면 쉽다.</p>\n<ul>\n<li><code class=\"language-text\">void join(long millis)</code></li>\n<li><code class=\"language-text\">void join(long millis, int nanos)</code></li>\n</ul>\n</li>\n<li>지정된 시간이 지나거나 작업이 종료되면 join()을 호출한 쓰레드로 다시 돌아와 실행을 계속한다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void resume()</code></p>\n<ul>\n<li>suspend()에 의해 일시정지상태에 있는 쓰레드를 실행대기 상태(Runnable)로 만든다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">static void sleep(long millis)</code></p>\n<ul>\n<li>지정된 시간(천분의 일초 단위)동안 쓰레드를 일시정지시킨다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">static void sleep(long millis, int nanos)</code></p>\n<ul>\n<li>지정한 시간이 지나고 나면, 자동적으로 다시 실행대기상태가 된다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void wait()</code></p>\n<ul>\n<li>객체 wait 메소드에는 3가지 변화가 있다.</li>\n<li>먼저, 다른 스레드가 현재 스레드를 깨우기 위해 notify 또는 notifyAll 메소드를 호출 할 때까지 무기한 대기하는 것</li>\n<li>나머지 하나는 현재 스레드가 깨어나기 전까지, 특정 시간(설정된)동안 기다립니다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void stop()</code></p>\n<ul>\n<li>쓰레드를 즉시 종료시킨다. 교착상태(dead-lock)에 빠지기 쉽기 때문에 deprecated 되었다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">void suspend()</code></p>\n<ul>\n<li>쓰레드를 일시 정지시킨다. resume()을 호출하면 다시 쓰레드를 실행대기 상태(Runnable)로 만들 수 있다.</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">static void yield()</code></p>\n<ul>\n<li>실행 중에 다른 쓰레드에게 양보(yield)하고 실행대기상태가 된다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<ul>\n<li>Thread와 Runnable의 차이는 Class와 Interface의 차이지만, 활용하는 방법에도 큰 차이가 있습니다. 특히, Thread Class를 통해 프로그래밍을 하다보면 동기화에 많은 Thread가 생성되어 Thread의 Syncronized, Debug 등 다양한 문제로 인해 Thread 관리에 어려움이 발생할 수 있습니다.</li>\n<li>특히, 병렬 작업 처리가 많아지면 Thread의 개수가 증가되고 그에 따른 Thread 생성과 스케줄링으로 인해 CPU가 바빠져 메모리 사용량이 늘어납니다. 따라서 어플리케이션의 성능이 저하됩니다. 갑작스런 병렬작업의 극대화로 인한 스레드 증폭을 막으려면 Thread Pool을 사용해야 합니다.</li>\n<li>이를 해결하기 위해 서는, Thread Pool은 작업 처리에 사용되는 Thread를 제한된 개수만큼 정해 놓고 작업 큐(Queue)에 들어오는 작업들을 하나씩 Thread가 맡아 처리합니다. 작업 처리가 끝난 스레드는 다시 작업 큐에서 새로운 작업을 가져와 처리해야 합니다.</li>\n<li>이 부분은 Thread pool을 통해 제한된 Thread을 생성하고, 정해진 Thread를 통해 Runnable Interface에  method(run())을 구현해주어 해당 Thread에 해당내용이 수행될 수 있게 해주는 것이 훨씬 더 효율적입니다. 정해진 Thread에 실행내용만 바꿔주는 것입니다. 100개의 Thread를 통해 100개의 실행내용을 실행하는 것이 더 빠를 수 있겠지만, 불필요한 메모리를 할당하게 되는 문제가 생기게 되며, 자원을 공유 할때, 데이터 동기화 문제나, 교착상태에 빠지는 문제가 발생할 수 있는 문제가 커집니다. 그리고, 필요한 Thread를 최소한으로 선언하고 관리하여 효율적으로 프로그램을 운영하기 위함입니다.</li>\n<li>Java Thread pool은 Runnable 쓰레드를 관리하고 작업자 쓰레드는 Queue에서 Runnable을 실행합니다. 그리고, java.util.concurrent.Executors는 java.util.concurrent.Executor 인터페이스의 구현을 제공하여 java에 Thread pool을 구현합니다.</li>\n</ul>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li>[Wiki] (<a href=\"https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%A0%88%EB%93%9C\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://ko.wikipedia.org/wiki/%EC%8A%A4%EB%A0%88%EB%93%9C</a>)</li>\n<li>[JournalDev] (<a href=\"http://www.journaldev.com/1069/threadpoolexecutor-java-thread-pool-example-executorservice\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.journaldev.com/1069/threadpoolexecutor-java-thread-pool-example-executorservice</a>)</li>\n<li>[Thread-Runnable] (<a href=\"http://blog.daum.net/hughlee193/138\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.daum.net/hughlee193/138</a>)</li>\n<li>[갱짱.study] (<a href=\"http://gangzzang.tistory.com/entry/Java-%EC%93%B0%EB%A0%88%EB%93%9CThread\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://gangzzang.tistory.com/entry/Java-쓰레드Thread</a>)</li>\n</ul>","fields":{"slug":"java-thread-java-thread-pool을-이용한-thread를-이해하기-thread-runnable"},"frontmatter":{"title":"[Java/Thread] Java Thread Pool을 이용한 Thread를 이해하기(Thread, Runnable)","date":null,"category":"Java","tags":["Thread","Java","Task","Runnable"]},"timeToRead":9}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"java-thread-java-thread-pool을-이용한-thread를-이해하기-thread-runnable","prev":{"excerpt":"이번에는 이전 Vue Study 간 정리한 내용을 블로그에 다시 정리하여 올려보겠습니다.\n개인적으로 Vue의 data, method, computed처럼 직관적으로 기능과 이름이 고정되어 코딩하는 것을 좋아합니다. 같은 것을 공유할 수도 있고 코딩 스타일도 구조에 맞게 구성되어 큰 어려움 없이 개발할 수 있기 때문입니다. 총 3번의 정리한 내용들을 이번 블로그를 통해서 나눠보겠습니다. Original Repository : Day 1:Vue…","html":"<p>이번에는 이전 Vue Study 간 정리한 내용을 블로그에 다시 정리하여 올려보겠습니다.\n개인적으로 Vue의 data, method, computed처럼 직관적으로 기능과 이름이 고정되어 코딩하는 것을 좋아합니다. 같은 것을 공유할 수도 있고 코딩 스타일도 구조에 맞게 구성되어 큰 어려움 없이 개발할 수 있기 때문입니다. 총 3번의 정리한 내용들을 이번 블로그를 통해서 나눠보겠습니다.</p>\n<p>Original Repository : <a href=\"https://github.com/Seolhun/vue-example/tree/master/study/day1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Day 1:Vue-Example By Seolhun</a></p>\n<h2 id=\"--contet-list\"><a href=\"#--contet-list\" aria-label=\"  contet list permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Contet List</h2>\n<ul>\n<li>\n<p>Build Example &#x26; Explanation</p>\n<ol>\n<li>Computed vs Methods vs Watchers</li>\n<li>Class and Style Bindings</li>\n<li>Conditional Rendering</li>\n<li>List Rendering</li>\n<li>Event Handling</li>\n<li>Form Input Bindings</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"--vue-summary-with-examples\"><a href=\"#--vue-summary-with-examples\" aria-label=\"  vue summary with examples permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Vue Summary with examples</h2>\n<h4 id=\"1-presentation-1\"><a href=\"#1-presentation-1\" aria-label=\"1 presentation 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Presentation 1</h4>\n<h5 id=\"--computed-vs-methods\"><a href=\"#--computed-vs-methods\" aria-label=\"  computed vs methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Computed vs Methods</h5>\n<ol>\n<li>The end result same, but computed method is cached.</li>\n<li>최종 결과에 대해 두가지 접근 방식은 서로 동일합니다. 하지만 차이점은 <code class=\"language-text\">computed는 종속성에 따라 캐시된다는 것</code>입니다.</li>\n</ol>\n<h5 id=\"--computed-vs-watchers\"><a href=\"#--computed-vs-watchers\" aria-label=\"  computed vs watchers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Computed vs Watchers</h5>\n<ol>\n<li>대부분의 경우 계산된 속성이 더 적합하지만 사용자 정의 감시자가 필요한 경우가 있습니다.</li>\n<li>\n<p>데이터 변경에 대한 응답으로 비동기식 또는 시간이 많이 소요되는 조작을 수행하려는 경우에 가장 유용합니다.</p>\n<ul>\n<li><a href=\"https://lodash.com/docs/4.17.5#debounce\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">lodash의 debounce</a>와 같이 사용할 경우, 검색 키워드를 관찰하여 이벤트를 조작할 수 있습니다.</li>\n</ul>\n</li>\n</ol>\n<hr>\n<h4 id=\"2-presentation-2\"><a href=\"#2-presentation-2\" aria-label=\"2 presentation 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Presentation 2</h4>\n<h5 id=\"--binding-html-classes\"><a href=\"#--binding-html-classes\" aria-label=\"  binding html classes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Binding HTML Classes</h5>\n<ol>\n<li>v-bind:class 디렉티브는 일반 class 속성과 공존할 수 있습니다.</li>\n<li>Object, Array, 3항식 등 다양한 방법으로 클레스를 바인딩 할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  isActive<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n  hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token comment\">// 1. Destructuring object binding classes</span>\n<span class=\"token comment\">// Input</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>static<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>{ active: isActive, 'text-danger': hasError }<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// Output</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>static active<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// 2. Object binding classes</span>\ndata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  classObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    active<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'text-danger'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Input</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>classObject<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// Output</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>active text-danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// 3. Array binding classes</span>\ndata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  activeClass<span class=\"token punctuation\">:</span> <span class=\"token string\">'active'</span><span class=\"token punctuation\">,</span>\n  successClass<span class=\"token punctuation\">:</span> <span class=\"token string\">'text-success'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Input</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>[activeClass, successClass]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// Output</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>active text-success<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// 4. Ternary operator binding classes</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>[isActive ? activeClass : '', errorClass]<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h5 id=\"--binding-attribute-in-component\"><a href=\"#--binding-attribute-in-component\" aria-label=\"  binding attribute in component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Binding Attribute in component</h5>\n<ol>\n<li>Component를 생성한 후에도 class를 바인딩 할 수 있습니다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>my-component</span>\n  <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span>class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>classObject<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">:message</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>message<span class=\"token punctuation\">\"</span></span>\n  <span class=\"token attr-name\">:name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n<span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>my-component</span><span class=\"token punctuation\">></span></span>\n\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">component</span><span class=\"token punctuation\">(</span><span class=\"token string\">'my-component'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n  props<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'name'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  template<span class=\"token punctuation\">:</span> <span class=\"token string\">'&lt;div class=\"text-info\">&lt;h1>{{ message }}, {{ name }}&lt;/h1>&lt;/div>'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\ndata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  classObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    active<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">'text-right'</span><span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token punctuation\">:</span> <span class=\"token string\">'Hello'</span><span class=\"token punctuation\">,</span>\n  name<span class=\"token punctuation\">:</span> <span class=\"token string\">'Vue Study'</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"--binding-css-style\"><a href=\"#--binding-css-style\" aria-label=\"  binding css style permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Binding CSS Style</h5>\n<ol>\n<li>Style css의 Attribute 값을 사용하는 것 외에는 Binding Classes와 Vue 문법은 일치합니다</li>\n<li>Class와 다른 점은 Stlye 문법이므로 간단히 1개의 예제만 보겠습니다</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 1. Binding object</span>\ndata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  styleObject<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">,</span>\n    fontSize<span class=\"token punctuation\">:</span> <span class=\"token string\">'15px'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// Input</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-bind:</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"><span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\">styleObject</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, Binding Styles</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n\n<span class=\"token comment\">// Output</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">color</span><span class=\"token punctuation\">:</span> red<span class=\"token punctuation\">;</span> <span class=\"token property\">font-size</span><span class=\"token punctuation\">:</span> 25px<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, Binding Styles</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<hr>\n<h4 id=\"3-presentation-3\"><a href=\"#3-presentation-3\" aria-label=\"3 presentation 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Presentation 3</h4>\n<h5 id=\"--1-conditional-rendering\"><a href=\"#--1-conditional-rendering\" aria-label=\"  1 conditional rendering permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 1. Conditional Rendering</h5>\n<ul>\n<li>v-if, v-else,</li>\n<li>\n<p>v-else-if</p>\n<ul>\n<li>v-else-if는 2.1.0부터 새롭게 추가됨.</li>\n<li>v-else-if는 여러개를 사용하여 다양한 조건을 적용시킬 수 있습니다</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>type === 'A'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  A\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-else-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>type === 'B'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  B\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-else-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>type === 'C'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  C\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>Vue data 객체의 값을 이용할 수 있습니다.</p>\n<ul>\n<li>Key값을 사용하여 해당 template를 렌더링 할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> loginType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">v-if</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>loginType === 'username'<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">사용자 이름</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>사용자 이름을 입력하세요<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>template</span> <span class=\"token attr-name\">v-else</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">이메일</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>이메일 주소를 입력하세요<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>template</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>v-show</p>\n<ul>\n<li>v-show는 단순히 엘리먼트에 display CSS 속성을 토글합니다.</li>\n<li>v-show는 <code class=\"language-text\">&lt;template&gt;</code> 구문을 지원하지 않으며 v-else와도 작동하지 않습니다.</li>\n<li>비교해보면, v-show는 훨씬 단순합니다. CSS 기반 토글만으로 초기 조건에 관계 없이 엘리먼트가 항상 렌더링 됩니다.</li>\n</ul>\n</li>\n<li>\n<p>v-if vs v-show</p>\n<ul>\n<li>v-if는 조건부 블럭 안의 이벤트 리스너와 자식 컴포넌트가 토글하는 동안 적절하게 제거되고 다시 만들어지기 때문에 <code class=\"language-text\">진짜 조건부 렌더링 입니다.</code></li>\n<li>show와 if와 차이점은 <code class=\"language-text\">v-show가 있는 Element는 항상 렌더링 되고 DOM에 남아있다는 점입니다.</code></li>\n<li>v-if는 또한 게으릅니다 초기 렌더링에서 조건이 거짓인 경우 아무것도 하지 않습니다. (아무것도 하지 않는다는 것은 DOM에 존재하지 않기 때문에 그렇습니다.)</li>\n<li>조건 블록이 처음으로 참이 될 때 까지 렌더링 되지 않습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 아래 예제를 보시면 style=\"display:none;\" 을 보실 수 있습니다. v-show의 경우는 display로 처리되고 if는 첫 렌더링 시 조건이 있을 경우만 렌더링 됩니다.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>row<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>col-sm-12<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>col-sm-12 text-success<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token attr-value\"><span class=\"token property\">display</span><span class=\"token punctuation\">:</span> none<span class=\"token punctuation\">;</span></span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">You can see me When condition is \"true\"</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h3</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>col-sm-12 text-success<span class=\"token punctuation\">\"</span></span><span class=\"token style-attr language-css\"><span class=\"token attr-name\"> <span class=\"token attr-name\">style</span></span><span class=\"token punctuation\">=\"</span><span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Search v-show element using Browser dev tools. can find it.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>hr</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">class</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>col-sm-12 text-danger<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h5</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Search v-if element using Browser dev tools. never find it.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h5</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>v-if and v-for</p>\n<ul>\n<li><code class=\"language-text\">v-for는 v-if보다 높은 우선순위를 갖습니다.</code> (v-for로 해당 데이터와 조건을 비교하여 Rendering 할지 말지를 결정해야 하기 때문입니다.)</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"4-presentation-4\"><a href=\"#4-presentation-4\" aria-label=\"4 presentation 4 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Presentation 4</h4>\n<h5 id=\"--list-rendering\"><a href=\"#--list-rendering\" aria-label=\"  list rendering permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- List Rendering</h5>\n<ol>\n<li>v-for</li>\n<li>v-for 디렉티브를 사용하여 배열을 기반으로 리스트를 렌더링 할 수 있습니다.</li>\n<li>v-for는 객체 안에 필드 값도 나열할 수 있습니다</li>\n<li>Vue가 v-for에서 렌더링된 엘리먼트 목록을 갱신할 때 기본적으로 <code class=\"language-text\">in-place patch</code> 전략을 사용합니다.</li>\n<li>데이터 항목의 순서가 변경된 경우 항목의 순서와 일치하도록 DOM 요소를 이동하는 대신 <code class=\"language-text\">Vue는 각 요소를 적절한 위치에 패치하고 해당 인덱스에서 렌더링할 내용을 반영하는지 확인합니다.</code></li>\n<li><code class=\"language-text\">Vue가 각 노드의 ID를 추적하고 기존 엘리먼트를 재사용하고 재정렬할 수 있도록 힌트를 제공하려면 각 항목에 고유한 key 속성을 제공해야 합니다.</code></li>\n<li>반복되는 DOM 내용이 단순하지 않거나 의도적인 성능 향상을 위해 기본 동작에 의존하지 않는한 가능하면 언제나 <code class=\"language-text\">v-for에 key를 추가하는 것이 좋습니다.</code></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item in items<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">:key</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>item.id<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    &lt;!-- content -->\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<h5 id=\"--mutation-methods\"><a href=\"#--mutation-methods\" aria-label=\"  mutation methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Mutation Methods</h5>\n<ul>\n<li>\n<p><code class=\"language-text\">Vue는 감시중인 배열의 변이 메소드를 래핑하여 뷰 갱신을 트리거</code>합니다. 래핑된 메소드는 다음과 같습니다.</p>\n<ul>\n<li>push() : - 예: app.items.push({ message: 'Baz' }) : 배열에 마지막 인덱스에 넣기 (LIFO)</li>\n<li>pop() : - 예: app.items.pop() : 배열에 객체 빼기 (LIFO)</li>\n<li>unshift() : - 예: app.items.unshift({ message: 'Baz' }) : 배열 첫 인덱스에 넣기</li>\n<li>shift() : - 예: app.items.shift() : 배열 첫 인덱스 빼</li>\n<li>splice() - 예: app.items.splice(index, 1) : 해당 인덱스와 갯수를 정하여 빼기</li>\n<li>sort() - 배열 정렬</li>\n<li>reverse() - 배열 역순 정렬</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">app<span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> app<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">item</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> item<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">.</span><span class=\"token function\">match</span><span class=\"token punctuation\">(</span><span class=\"token regex\">/Foo/</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"--caveatwarning\"><a href=\"#--caveatwarning\" aria-label=\"  caveatwarning permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Caveat(Warning)</h5>\n<ul>\n<li>\n<p>JavaScript의 제한으로 인해 Vue는 배열에 대해 다음과 같은 변경 사항을 감지할 수 없습니다.</p>\n<ul>\n<li>\n<p>인덱스로 배열에 있는 항목을 직접 설정하는 경우</p>\n<ul>\n<li>ex) <code class=\"language-text\">vm.items[indexOfItem] = newValue</code></li>\n</ul>\n</li>\n<li>\n<p>배열 길이를 수정하는 경우,</p>\n<ul>\n<li>ex) <code class=\"language-text\">vm.items.length = newLength</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>1번을 극복하기 위해 다음 두 경우 모두 vm.items[indexOfItem] = newValue 와 동일하게 수행하며, 반응형 시스템에서도 상태 변경을 트리거 합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Vue.set</span>\nVue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>example1<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">,</span> indexOfItem<span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Array.prototype.splice</span>\napp<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>indexOfItem<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> newValue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 주의 사항 중 2번을 극복하기 위해 splice를 사용해야 합니다.</span>\napp<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">.</span><span class=\"token function\">splice</span><span class=\"token punctuation\">(</span>newLength<span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">var</span> vm <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    a<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// vm.a 는 반응형입니다.</span>\nvm<span class=\"token punctuation\">.</span>b <span class=\"token operator\">=</span> <span class=\"token number\">2</span>\n<span class=\"token comment\">// vm.b 는 반응형이 아닙니다.</span></code></pre></div>\n<h5 id=\"--object-change-detection-caveats\"><a href=\"#--object-change-detection-caveats\" aria-label=\"  object change detection caveats permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Object Change Detection Caveats</h5>\n<ul>\n<li>Vue는 <code class=\"language-text\">이미 만들어진 인스턴스에 새로운 루트레벨의 반응형 속성을 동적으로 추가하는 것을 허용하지 않습니다.</code></li>\n<li>그러나 Vue.set(object, key, value) 메소드를 사용하여 중첩된 객체에 반응형 속성을 추가할 수 있습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">Vue<span class=\"token punctuation\">.</span><span class=\"token function\">set</span><span class=\"token punctuation\">(</span>vm<span class=\"token punctuation\">.</span>userProfile<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">// 인스턴스 메소드인 vm.$set를 사용할 수도 있습니다. 이는 전역 Vue.set의 별칭입니다.</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>$<span class=\"token keyword\">set</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>userProfile<span class=\"token punctuation\">,</span> <span class=\"token string\">'age'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">28</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h5 id=\"--displaying-filteredsorted-results\"><a href=\"#--displaying-filteredsorted-results\" aria-label=\"  displaying filteredsorted results permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Displaying Filtered/Sorted Results</h5>\n<ul>\n<li>Filtered Computed</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>n in evenNumbers<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\ndata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  numbers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\ncomputed<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">evenNumbers</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numbers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"--filtered-method\"><a href=\"#--filtered-method\" aria-label=\"  filtered method permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Filtered Method</h5>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>li</span> <span class=\"token attr-name\">v-for</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>n in even(numbers)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> n <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>li</span><span class=\"token punctuation\">></span></span>\ndata<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  numbers<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\nmethods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">even</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">numbers</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> numbers<span class=\"token punctuation\">.</span><span class=\"token function\">filter</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">number</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> number <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">===</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h5 id=\"--v-for-with-component\"><a href=\"#--v-for-with-component\" aria-label=\"  v for with component permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- v-for with Component</h5>\n<ul>\n<li>2.2.0 이상에서 v-for는 key 가 필수 입니다.</li>\n<li><code class=\"language-text\">반복할 데이터를 컴포넌트로 전달하려면 props도 사용해야합니다.</code></li>\n</ul>\n<hr>\n<h4 id=\"5-presentation-5\"><a href=\"#5-presentation-5\" aria-label=\"5 presentation 5 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Presentation 5</h4>\n<h5 id=\"--event-handling\"><a href=\"#--event-handling\" aria-label=\"  event handling permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Event Handling</h5>\n<ul>\n<li>\n<p>Listening to Events</p>\n<ul>\n<li>v-on 디렉티브를 사용하여 DOM 이벤트를 듣고 트리거 될 때 JavaScript를 실행할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>counter += 1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>Method Event Handlers</p>\n<ul>\n<li>많은 이벤트 핸들러의 로직은 더 복잡할 것이므로, JavaScript를 v-on 속성 값으로 보관하는 것은 간단하지 않아 메소드의 이름을 받는 이유입니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>increment<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>decrement<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Add 1</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\">  <span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    data<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      counter<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function-variable function\">increment</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        app<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      <span class=\"token function-variable function\">decrement</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        app<span class=\"token punctuation\">.</span>counter <span class=\"token operator\">-=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>Methods in Inline Handlers</p>\n<ul>\n<li>메소드 이름을 직접 바인딩 하는 대신 인라인 JavaScript 구문에 메소드를 사용할 수도 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>button</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>warn('Form cannot be submitted yet.', $event)<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  Submit\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">new</span> <span class=\"token class-name\">Vue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  el<span class=\"token punctuation\">:</span> <span class=\"token string\">'#app'</span><span class=\"token punctuation\">,</span>\n  methods<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">warn</span><span class=\"token punctuation\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message<span class=\"token punctuation\">,</span> event</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 이제 네이티브 이벤트에 액세스 할 수 있습니다</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> event<span class=\"token punctuation\">.</span><span class=\"token function\">preventDefault</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">alert</span><span class=\"token punctuation\">(</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>Event Modifiers</p>\n<ul>\n<li>\n<p>이 문제를 해결하기 위해, Vue는 v-on 이벤트에 이벤트 수식어를 제공합니다. 수식어는 점으로 표시된 접미사 입니다.</p>\n<ul>\n<li>.stop</li>\n<li>.prevent</li>\n<li>.capture</li>\n<li>.self</li>\n<li>.once</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// 클릭 이벤트 전파가 중단됩니다</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click.stop</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>doThis<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// 제출 이벤트가 페이지를 다시 로드 하지 않습니다</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>submit.prevent</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>onSubmit<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// 수식어는 체이닝 가능합니다(여러개를 묶어서 가능</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>a</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click.stop.prevent</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>doThat<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>a</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// 단순히 수식어만 사용할 수 있습니다</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>form</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>submit.prevent</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>form</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// 이벤트 리스너를 추가할 때 캡처모드를 사용합니다</span>\n<span class=\"token comment\">// 즉, 내부 엘리먼트를 대상으로 하는 이벤트가 해당 엘리먼트에서 처리되기 전에 여기서 처리합니다.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click.capture</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>doThis<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// event.target이 엘리먼트 자체인 경우에만 트리거를 처리합니다</span>\n<span class=\"token comment\">// 자식 엘리먼트에서는 안됩니다</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\"><span class=\"token namespace\">v-on:</span>click.self</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>doThat<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">...</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>Key Modifiers</p>\n<ul>\n<li>키보드 이벤트를 청취할 때, 종종 공통 키 코드를 확인해야 합니다. Vue는 키 이벤트를 수신할 때 v-on에 대한 키 수식어를 추가할 수 있습니다.</li>\n<li>Example</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx}\"><pre class=\"language-jsx}\"><code class=\"language-jsx}\">// keyCode가 13일 때만 vm.submit()을 호출합니다\n&lt;input v-on:keyup.13=&quot;submit&quot;&gt;</code></pre></div>\n<ul>\n<li>\n<p>모든 keyCode들을 기억하는 것은 번거롭기 때문에 Vue는 가장 일반적으로 사용되는 키의 별칭을 제공합니다.</p>\n<ul>\n<li>.enter</li>\n<li>.tab</li>\n<li>.delete (“Delete” 와 “Backspace” 키 모두를 캡처합니다)</li>\n<li>.esc</li>\n<li>.space</li>\n<li>.up</li>\n<li>.down</li>\n<li>.left</li>\n<li>.right</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx}\"><pre class=\"language-jsx}\"><code class=\"language-jsx}\">&lt;input v-on:keyup.enter=&quot;submit&quot;&gt;\n// 약어 사용도 가능합니다\n&lt;input @keyup.enter=&quot;submit&quot;&gt;</code></pre></div>\n<ul>\n<li><strong>전역 config.keyCodes 객체를 통해 사용자 지정 키 수식어 별칭을 지정할 수 있습니다.</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// v-on:keyup.f1 이 가능합니다</span>\nVue<span class=\"token punctuation\">.</span>config<span class=\"token punctuation\">.</span>keyCodes<span class=\"token punctuation\">.</span>f1 <span class=\"token operator\">=</span> <span class=\"token number\">112</span></code></pre></div>\n<ul>\n<li>\n<p>Automatic Key Modifers</p>\n<ul>\n<li>2.5.0+에서 추가됨</li>\n<li>KeyboardEvent.key를 통해 노출된 유효 키 이름을 수식어로 직접 사용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token operator\">&lt;</span>input @keyup<span class=\"token punctuation\">.</span>page<span class=\"token operator\">-</span>down<span class=\"token operator\">=</span><span class=\"token string\">\"onPageDown\"</span><span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>위의 예제에서 핸들러는 $event.key === 'PageDown' 만 호출됩니다.</li>\n<li>\n<p><code class=\"language-text\">Warning</code></p>\n<ul>\n<li>일부 키(.esc와 모든 화살표 키)는 IE9에서 일관성 없는 key 값을 가지고 있습니다.</li>\n<li>IE9를 지원해야하는 경우 내장 알리아스가 선호됩니다.)</li>\n</ul>\n</li>\n<li>\n<p>System Modifier Keys</p>\n<ul>\n<li>\n<p>다음 수식어를 사용해 해당 수식어 키가 눌러진 경우에만 마우스 또는 키보드 이벤트 리스너를 트리거 할 수 있습니다.</p>\n<ul>\n<li>.ctrl</li>\n<li>.alt</li>\n<li>.shift</li>\n<li>.meta</li>\n</ul>\n</li>\n<li>\n<p><code class=\"language-text\">참고</code></p>\n<ul>\n<li>매킨토시 키보드에서 meta는 command 키 입니다 (⌘).</li>\n<li>Windows 키보드에서 meta는 windows 키 (⊞) 입니다.</li>\n<li>Sun Microsystems 키보드에서 meta는 단색의 다이아몬드 (◆)로 표시됩니다.</li>\n<li>특정 키보드의 경우, 특히 MIT 및 Lisp 시스템 키보드와 Knight 키보드, space-cadet 키보드와 같은 제품에는 “META” 레이블이 지정됩니다.</li>\n<li>Symbolics 키보드에서 메타는 “META” 또는 “Meta”로 표시됩니다.</li>\n</ul>\n</li>\n<li>\n<p>.exact Modifier</p>\n<ul>\n<li>2.5.0+에서 추가됨</li>\n<li>.exact 수식어는 다른 시스템 수식어와 조합해 그 핸들러가 실행되기 위해 정확한 조합이 눌러야하는 것을 보여줍니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// Alt 또는 Shift와 함께 눌린 경우에도 실행됩니다.</span>\n<span class=\"token operator\">&lt;</span>button @click<span class=\"token punctuation\">.</span>ctrl<span class=\"token operator\">=</span><span class=\"token string\">\"onClick\"</span><span class=\"token operator\">></span><span class=\"token constant\">A</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span>\n<span class=\"token comment\">// Ctrl 키만 눌려있을 때만 실행됩니다.</span>\n<span class=\"token operator\">&lt;</span>button @click<span class=\"token punctuation\">.</span>ctrl<span class=\"token punctuation\">.</span>exact<span class=\"token operator\">=</span><span class=\"token string\">\"onCtrlClick\"</span><span class=\"token operator\">></span><span class=\"token constant\">A</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>button</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>Mouse Button Modifiers</p>\n<ul>\n<li>2.2.0 버전에서 추가됨</li>\n<li>\n<p>다음 수식어를 사용해 해당 수식어 키가 눌러진 경우에만 마우스 또는 키보드 이벤트 리스너를 트리거 할 수 있습니다.</p>\n<ul>\n<li>.left</li>\n<li>.right</li>\n<li>.middle</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<hr>\n<h4 id=\"6-presentation-6\"><a href=\"#6-presentation-6\" aria-label=\"6 presentation 6 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Presentation 6</h4>\n<h5 id=\"--form-input-bindings\"><a href=\"#--form-input-bindings\" aria-label=\"  form input bindings permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Form Input Bindings</h5>\n<ul>\n<li>v-model 디렉티브를 사용하여 폼 input과 textarea 엘리먼트에 양방향 데이터 바인딩을 생성할 수 있습니다.</li>\n<li>입력 유형에 따라 엘리먼트를 업데이트 하는 올바른 방법을 자동으로 선택합니다.</li>\n<li>약간 이상하지만 v-model은 기본적으로 사용자 입력 이벤트에 대한 데이터를 업데이트하는 “syntax sugar”이며 일부 경우에 특별한 주의를 해야합니다.</li>\n<li>\n<p><code class=\"language-text\">Warning</code></p>\n<ul>\n<li>v-model은 모든 form 엘리먼트의 초기 value와 checked 그리고 selected 속성을 무시합니다.</li>\n<li>항상 Vue 인스턴스 데이터를 원본 소스로 취급합니다.</li>\n<li>컴포넌트의 data 옵션 안에 있는 JavaScript에서 초기값을 선언해야합니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"--modifiers\"><a href=\"#--modifiers\" aria-label=\"  modifiers permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Modifiers</h5>\n<ul>\n<li>\n<p>Types</p>\n<ul>\n<li>.lazy</li>\n<li>기본적으로, v-model은 각 입력 이벤트 후 입력과 데이터를 동기화 합니다. (단 앞에서 설명한 IME 구성은 제외됩니다.) .lazy 수식어를 추가하여 change 이벤트 이후에 동기화 할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token comment\">// \"input\" 대신 \"change\" 이후에 동기화 됩니다.</span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model.lazy</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>msg<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>.number</p>\n<ul>\n<li>사용자 입력이 자동으로 숫자로 형변환 되기를 원하면, v-model이 관리하는 input에 number 수식어를 추가하면 됩니다.</li>\n<li>type=\"number\"를 사용하는 경우에도 HTML 입력 엘리먼트의 값은 항상 문자열을 반환하기 때문에 이것은 종종 유용하게 사용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>input</span> <span class=\"token attr-name\">v-model.number</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>age<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>number<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>\n<p>.trim</p>\n<ul>\n<li>v-model이 관리하는 input을 자동으로 trim 하기 원하면, trim 수정자를 추가하면 됩니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"jsx}\"><pre class=\"language-jsx}\"><code class=\"language-jsx}\">&lt;input v-model.trim=&quot;msg&quot;&gt;</code></pre></div>","id":"f4bcf334-e01c-5d77-8c0f-a96d6659d371","fields":{"slug":"js-vue-vue-study를-통한-문법-및-예제-만들기-part-1"},"frontmatter":{"date":null,"title":"[JS/Vue] Vue Study를 통한 문법 및 예제 만들기 - Part 1","category":"Javascript","tags":["Javascript","Vue"]},"timeToRead":12},"next":{"excerpt":"HTTP의 관심을 갖고 책을 읽으면서 학습을 하고 있지만, Network에 더 근본적인 IP와 UDP, TCP에 대해서 이해해야 할 필요가 있다고 생각하여 적게되었습니다. 관련 사항에 간단하게 읽어본적은 있지만 읽어보는 것과 이를 숙지하기 위해 반복적으로 학습하는 것은 큰차이가 있기에 이번 시간을 계기로 이와 관련한 내용을 숙지하고자 합니다. IP란? IP에서 인터넷(the Internet) 이름자체가 'inter…","html":"<p>HTTP의 관심을 갖고 책을 읽으면서 학습을 하고 있지만, Network에 더 근본적인 IP와 UDP, TCP에 대해서 이해해야 할 필요가 있다고 생각하여 적게되었습니다. 관련 사항에 간단하게 읽어본적은 있지만 읽어보는 것과 이를 숙지하기 위해 반복적으로 학습하는 것은 큰차이가 있기에 이번 시간을 계기로 이와 관련한 내용을 숙지하고자 합니다.</p>\n<h2 id=\"ip란\"><a href=\"#ip%EB%9E%80\" aria-label=\"ip란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>IP란?</h2>\n<p>IP에서 인터넷(the Internet) 이름자체가 'inter-' 라는 접두사와 '네트워크'를 의미하는 'net'이 합쳐진 말로, 인터넷은 네트워크들을 연동하는 것이라고 말할 수 있습니다. 즉, IP(Internet Protocol)라는 이름은 <code class=\"language-text\">네트워크를 연동하는 프로토콜</code>이라는 뜻으로 해석하면 쉬울 것 같습니다. IP는 OSI의 3 Layer(Network Layer)와 Internet Protocol Suite의 3 Layer(Internet Layer)에 위치하고 있습니다.</p>\n<p>IP라는 이름처럼 어디에서든 간단하게 IP만 올릴 수 있으면 어떤 네트워크든 연결할 수 있습니다. 그래서, IP는 아래 그림처럼 모래 시계의 허리에 비유하여 설명할 수 있습니다. 그림처럼 IP 아래로는 네트워크를 만들 수 있는 다양한 하드웨어 기술 (Ethernet, WiFi 등...) 이 존재하고 있고, IP 위로는 다양한 응용 서비스(HTTP, FTP 등...)들이 동작할 수 있습니다. 간단한 예로 컴퓨터에 연결하는 랜선은 Ethernet, 모바일로 무선 네트워크를 이용하는 것은 WiFI, 개발 간 API를 호출할 때는 HTTP를 이영할 수 있는 것입니다. 이처럼 IP를 기반으로하면 어떠한 디바이스와 서버, 혹은 사용자가 사용해도 TCP/UDP와 관련된 네트워크 기능들을 큰 어려움없이 사용할 수 있습니다.</p>\n<div class='text-center'>\n  <img src=\"/images/contents/20180426/network/ip.jpg\" width=\"100%\">\n</div>\n<p>IP의 특징은 연결을 보장하기 위한 노력은 하지만 100% 보장해주지 않습니다. 이를 <code class=\"language-text\">Best-effort</code>라고 표현하는데, IP 가 best-effort가 될 수 밖에 없는 이유는 서로 다른 특성의 여러 네트워크를 연동해야 되기 때문입니다.</p>\n<h2 id=\"udp란\"><a href=\"#udp%EB%9E%80\" aria-label=\"udp란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>UDP란?</h2>\n<p>UDP(User Datagram Protocol)는 컴퓨터가 다른 컴퓨터와 데이터 통신을 하기 위한 프로토콜의 일종입니다. UDP는 세계 통신표준으로 개발된 OSI 모형에서 4번째 계층인 전송 계층(Transport Layer)에서 사용하는 프로토콜입니다. 동일 계층(OSI 4계층)에서 사용하는 또다른 프로토콜로 TCP가 존재합니다.</p>\n<p>UDP에 설명하기 앞서 같은 계층에 있는 TCP를 설명하면 좋을 것 같습니다. UDP와 같은 계층에 있는 TCP는 데이터 신뢰성을 보장하기 위한 방식이기 때문에 누락된 데이터를 모두 받기위한 메커니즘이 정의되어 있습니다. 그러므로, 이메일이나 파일전송과 같은 100% 데이터의 보장이 필요한 분야에서 필수요소로 사용되고 있습니다. 하지만, 실시간 스트리밍 서비스에서 TCP는 걸림돌로 작용됩니다. TCP는 전체 영상에서 점 하나 못받은 것 때문에 버퍼링으로 재생이 중지되며, 혼잡제어를 위해 보내는 양도 조절하기 때문에 영상 데이터의 퀄리티가 오락가락하는 문제를 발생시킵니다. 결국 이를 해결하기 위하여 제시된 것이 UDP를 사용하는 방법입니다.</p>\n<p><code class=\"language-text\">UDP의 특징은 간단하게 TCP의 모든 신뢰성 매커니즘이 기능이 없다고 보면됩니다.</code> 그냥 상대와 접속했고, 전송속도를 48Kbps로 설정했으면 무조건 48Kbps로 데이터를 일방적으로 전송하기만 합니다. 받는 쪽에서 데이터를 제대로 받고 있는지는 신경을 쓰지 않습니다. 그렇기 때문에 UDP로 데이터를 제공할 경우 32Kbps, 48Kbps, 64Kbps와 같은 일방적인 속도를 선택할 수 있는 옵션만을 제공합니다.</p>\n<p>하지만, 신뢰성이 보장되지 않기 때문에 UDP로 데이터를 보내면 손실되는 데이터가 발생합니다. 그렇기에 동영상의 경우 데이터가 많이 소실되었다면 이상한 화면이 나올 수도 있지만, 데이터 몇 개 소실로는 전체 화면에서 점 몇 개가 제대로 안나오는 수준에 불과하게 됩니다. 그렇기에 사람들이 크게 불평하지 않을 수준의 영상만 제공할 필요가 있다면 TCP를 쓸 이유가 없습니다. 그렇기에 실시간 스트리밍을 하는 곳에서 주로 사용합니다.</p>\n<p>이로 인해 UDP Header를 확인해보면 목적지 주소, 데이터 순서, checksum과 실데이터만 포함되고, 확인응답 같은 것이 없습니다. 그래서, TCP보다 용량이 가볍고 송신속도가 빠르게 작동됩니다. 하지만 확인응답을 하지 못하기때문에 신뢰도가 TCP보다 떨어지게 됩니다. 따라서 <code class=\"language-text\">UDP는 비연결형이라 부르며 TCP는 연결형이라 구분합니다.</code></p>\n<div class='text-center'>\n  <img src=\"/images/contents/20180426/network/udp-header.png\" width=\"100%\">\n</div>\n<h2 id=\"tcp란\"><a href=\"#tcp%EB%9E%80\" aria-label=\"tcp란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP란?</h2>\n<p>TCP(Transmission Control Protocol)의 축약어로 컴퓨터가 다른 컴퓨터와 데이터 통신을 하기 위한 프로토콜의 일종입니다. TCP는 세계 통신표준으로 개발된 OSI 모형에서 4번째 계층인 전송계층(Transport Layer)에서 사용하는 프로토콜로, 보통 하위 계층(Network Layer)에서 사용되는 IP와 엮어서 TCP/IP로 표현합니다.</p>\n<p>TCP가 개발된 배경은 군사적인 목적으로 어느 환경에서도 정상적으로 동작되는 네트워크 개발하기 위함이었습니다. 이를 위해 사용된 것이 패킷교환(Packet Switching) 방식으로 목적지가 정해져있지만 해당 목적지까지의 경로는 정해져 있지 않습니다. 따라서 서로 연결이 가능한 회선 하나만 남아있어도 통신이 끊어지지 않고 계속될 수 있는 통신환경을 구축하였습니다. 다만 이 방식은 어떻게든 통신을 유지하는 것이 목적이므로 네트워크 환경의 안정성은 떨어질 수 밖에 없습니다. 이로 인해 중간에 데이터가 유실되거나 너무 늦게 전달되는 등 신뢰성이 떨어지는 문제가 있었는데, 이러한 문제점들을 해결하고자 신뢰성을 보장할 수 있는 통신 프로토콜을 연구하게 됐고, 이에 따라 나온 것이 TCP입니다.</p>\n<h2 id=\"tcp-신뢰성-보장과-흐름-제어flow-control\"><a href=\"#tcp-%EC%8B%A0%EB%A2%B0%EC%84%B1-%EB%B3%B4%EC%9E%A5%EA%B3%BC-%ED%9D%90%EB%A6%84-%EC%A0%9C%EC%96%B4flow-control\" aria-label=\"tcp 신뢰성 보장과 흐름 제어flow control permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP, 신뢰성 보장과 흐름 제어(Flow Control)</h2>\n<p>신뢰성 보장을 알아보기 위해서는 TCP의 Header 정보를 보면 도움이 될것 같습니다. TCP header에는 목적지 주소, 확인응답, 오류 검출 및 복원, 실제 데이터 등이 포함됩니다. 그 중 UDP와 구분되는 부분이 바로 <code class=\"language-text\">확인응답(Acknowledge)</code>입니다. 즉, TCP는 신뢰성을 보장하기 위해 ACK을 기반으로 재전송과 타임아웃 방법을 이용하고 있습니다.</p>\n<div class='text-center'>\n  <img src=\"/images/contents/20180426/network/tcp-header.png\" width=\"100%\">\n</div>\n<p>TCP의 데이터는 물줄기처럼 흐른다고 해서 stream이라는 표현을 사용하는데, 이는 결국 패킷(Packet)을 의미합니다. TCP의 패킷이 전송되어 이에 응답할 때마다 ACK이라는 별도의 패킷을 생성하여 다음 필요한 패킷에 대해 알려주며 응답합니다. 만약, ACK 이 일정 시간 동안 오지 않으면 전송자는 패킷을 다시 보냅니다. 다시 보내는 경우는 크게 2가지 입니다.</p>\n<ol>\n<li>전송되는 패킷이 목적지까지 제대로 전송되지 않은 경우</li>\n<li>ACK가 전송자에게 제대로 전송되지 않은 경우</li>\n</ol>\n<p>하지만, 위 두 상황을 확실히 구분하는 것이 어렵기 때문에 일정기간 동안 응답을 받지 못하면 무조건 패킷을 다시 전송합니다.</p>\n<div class='text-center'>\n  <img src=\"/images/contents/20180426/network/tcp.jpg\" width=\"100%\">\n</div>\n<p>만약, 다시 보냈음에도 불구하고 일정시간을 초과하여 응답받지 못하면 이를 전송자에게 알려주고 종료합니다(타임아웃).</p>\n<h2 id=\"tcp-신뢰성을-위한-ack-2가지-방법\"><a href=\"#tcp-%EC%8B%A0%EB%A2%B0%EC%84%B1%EC%9D%84-%EC%9C%84%ED%95%9C-ack-2%EA%B0%80%EC%A7%80-%EB%B0%A9%EB%B2%95\" aria-label=\"tcp 신뢰성을 위한 ack 2가지 방법 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP, 신뢰성을 위한 ACK 2가지 방법</h2>\n<p>물론 TCP가 이렇게 패킷을 하나씩만 전송하지는 않습니다. <code class=\"language-text\">Sliding window</code>라는 개념(창문을 조금 열고 많이 열고 하는 것처럼 양을 조절한다는 뜻에서 Sliding window입니다.)을 이용해서 보낼 수 있는 만큼을 연속으로 계속 전송합니다. 하지만 이처럼 ACK을 받지 않고 연속으로 전송하는 것은 제한이 있습니다. 그리고, ACK을 못 받는 순간이오면 TCP는 더는 아무것도 전송하지 않고 재전송이 결정될 때까지 대기합니다.</p>\n<p>그런데, 한 번에 하나씩 전송하고 응답받는 것이 아니라 여러 개를 연속으로 전송한다면, 가운데 패킷이 유실된 경우는 어떻게 될까요? TCP의 기본 동작은 뭔가 유실되면 그 뒤에 아무리 정상적으로 전송되었어도 전부 버리고 유실된 것부터 재전송합니다. 하지만, 이건 상당히 비효율적입니다. 이 문제를 해결하기 위해 등장하게 되는 방법이 바로 <code class=\"language-text\">cumulative ACK</code>와 <code class=\"language-text\">selective ACK</code>입니다.</p>\n<p>Cumulative ACK은 한 번에 여러 개 패킷을 전송하더라도 문제가 되는 ACK 하나만 기억하면 됩니다. 반면 selective ACK은 여러개 패킷에 대해서 어떤 ACK를 응답받았는지에 대해 모두 기억해야 합니다. 다시 말해 cumulative ACK은 기억해야 되는 것이 적고 구현도 간단한 반면, selective ACK은 기억해야되는 것이 많고 구현도 복잡합니다. 이는 효율성과 복잡성에 대한 전형적인 트레이드 오프라고 할 수 있습니다.</p>\n<p>초기의 TCP 는 cumulative ACK 을 기반으로 했으나, 응답받지 못한 것을 기준으로 전송된 뒤에 것을 전부 버리다보니 비효율적입니다. 그 때문에 나중에는 selective ACK 을 TCP의 옵션으로 채택했습니다.</p>\n<h2 id=\"tcp-혼잡-제어congestion-control\"><a href=\"#tcp-%ED%98%BC%EC%9E%A1-%EC%A0%9C%EC%96%B4congestion-control\" aria-label=\"tcp 혼잡 제어congestion control permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP, 혼잡 제어(Congestion Control)</h2>\n<p>사실 초기 TCP는 혼잡제어라는 요소가 없었습니다. 위에서 언급했듯이 초기 TCP는 cumulactive ACK와 selective ACK를 사용하면서 한정된 네트워크 대역폭에서 소수의 사람들이 쓸 때는 문제가 없었습니다. 하지만, 1986년 사용자가 점점 늘어나면서 네트워크 회선이 부하를 감당하지 못하는 문제가 발생하였습니다. 이를 해결하기 위해 등장하게 된 요소가 바로 혼잡 제어입니다.</p>\n<p>단순한 예로 통신을 시작할 때 일단 보내는 쪽에서 30 ~ 35쪽까지 자료를 보내서 상대가 잘 받았으면 이후 보내는 양을 조금씩 늘려보는 방식을 취합니다. 그러다가, 상대가 데이터를 제대로 받지 못한 것이 확인되면 그 즉시 보내는 양을 확 줄입니다. 그리고 다시 조금씩 보내는 양을 늘렸다가 또 못 받으면 줄여버리는 형태로 보내는 양을 조절합니다. 보내는 양을 늘리고 줄이는 방법은 AIMD(Addictive Increase/Multicative Decrease)를 채택하고 있으나 더 자세한 내용은 <a href=\"https://ko.wikipedia.org/wiki/TCP_%ED%98%BC%EC%9E%A1_%EB%B0%A9%EC%A7%80_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TCP 혼잡 방지 알고리즘</a>을 확인하면 큰 도움이 될 것입니다.</p>\n<p>그리고 이때부터 패킷이 유실되면 TCP를 전송하는 쪽에서 얼른 양을 줄이는 혼잡 제어 요소가 추가되었습니다.</p>\n<h2 id=\"tcpudp의-포트-목록\"><a href=\"#tcpudp%EC%9D%98-%ED%8F%AC%ED%8A%B8-%EB%AA%A9%EB%A1%9D\" aria-label=\"tcpudp의 포트 목록 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>TCP/UDP의 포트 목록</h2>\n<p>일반적으로 포트 번호는 다음과 같이 세 가지로 나눌 수 있습니다.</p>\n<ul>\n<li>\n<p>0번 ~ 1023번: 잘 알려진 포트 (well-known port)</p>\n<ul>\n<li>잘 알려진 포트(well-known port)는 특정한 쓰임새를 위해서 IANA에서 할당한 TCP 및 UDP 포트 번호의 일부입니다.</li>\n</ul>\n</li>\n<li>1024번 ~ 49151번: 등록된 포트 (registered port)</li>\n<li>49152번 ~ 65535번: 동적 포트 (dynamic port)</li>\n</ul>\n<p><code class=\"language-text\">대부분의 유닉스 계열 운영 체제의 경우, 잘 알려진 포트를 열려면 루트 권한이 있어야 한다.</code> 이 번호는 강제적으로 지정된 것은 아니며, IANA의 권고안입니다. 가끔 각 포트 번호를 그대로 사용하지 않고 다른 용도로 사용하기도 합니다.</p>\n<p>자세한 Port 정보를 확인하시고 싶으시면 <a href=\"https://ko.wikipedia.org/wiki/TCP/UDP%EC%9D%98_%ED%8F%AC%ED%8A%B8_%EB%AA%A9%EB%A1%9D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TCP/UDP의<em>포트</em>목록</a>를 참조해주세요.</p>\n<h2 id=\"개인적으로-추천하는-체크사항\"><a href=\"#%EA%B0%9C%EC%9D%B8%EC%A0%81%EC%9C%BC%EB%A1%9C-%EC%B6%94%EC%B2%9C%ED%95%98%EB%8A%94-%EC%B2%B4%ED%81%AC%EC%82%AC%ED%95%AD\" aria-label=\"개인적으로 추천하는 체크사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>개인적으로 추천하는 체크사항</h2>\n<ul>\n<li>Youtube는 TCP인가 UDP인가?</li>\n<li>WebRTC는 TCP인가 UDP인가?</li>\n</ul>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>HTTP를 이용하면서 기반이되는 IP와 TCP, UDP에 대해 알아보는 유익한 시간을 가졌습니다. 먼저, <a href=\"http://www.inven.co.kr/webzine/news/?news=165870\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">문대경 - 아이펀팩토리 대표: 인벤 - TCP/UDP 차이</a>라는 글에 대해 너무 감사하다는 말씀드리고 싶습니다. 해당 글과 WiKi를 중점으로 개념을 학습하고 하나하나 읽고 수정하면서 네트워크 기본 개념에 대해 숙지할 수 있는 좋은 기회가 되었습니다.</p>\n<p>어떻게 보면 이미 좋은 글들인데, 이러한 노력이 필요한가라고 생각할 수 있습니다. 하지만, 개인적으로 이렇게 몇 시간 동안 내용을 읽고 수정하면 간단하게 검색한 글을 읽는것 보다 훨씬 내용에 대한 이해와 숙지가 빨라진다고 생각합니다. 특히, 이번 TCP 관련 역사와 UDP와의 차이, TCP Header, Acknowledge 등에 대한 개념을 인지할 수 있었습니다. 관련 내용을 기반으로 HTTP에 대한 시각과 HTTP의 한계점 그리고, 관련된 정보를 더욱 더 알아볼 수 있는 기회를 가지게 되었습니다. 다음에는 TCP/IP/HTTP 등과 연관된 내용도 정리해보겠습니다.</p>\n<p>이상 부족한 글을 마치겠습니다. 감사합니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://namu.wiki/w/IP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Namu WiKi - IP란</a></li>\n<li><a href=\"https://namu.wiki/w/UDP\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Namu WiKi - UDP란</a></li>\n<li><a href=\"http://www.inven.co.kr/webzine/news/?news=165870\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TCP, 그리고 UDP 쉽게 알아보는 두 개념과 차이점</a></li>\n<li><a href=\"https://www.lifewire.com/tcp-headers-and-udp-headers-explained-817970\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TCP Headers and UDP Headers Explained</a></li>\n<li><a href=\"https://ciscoskills.net/2011/03/28/understanding-udp/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Understanding UDP</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/TCP_%ED%98%BC%EC%9E%A1_%EB%B0%A9%EC%A7%80_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">WiKi - TCP 혼잡방지 알고리즘</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/TCP/UDP%EC%9D%98_%ED%8F%AC%ED%8A%B8_%EB%AA%A9%EB%A1%9D\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">TCP/UDP의<em>포트</em>목록</a></li>\n</ul>","id":"cb978b8d-ca82-563c-8c26-ff1d86ee8299","fields":{"slug":"network-ip-udp-tcp란-무엇인가"},"frontmatter":{"date":null,"title":"[Network] IP, UDP, TCP란 무엇인가?","category":"Network","tags":null},"timeToRead":7}}}}
{"componentChunkName":"component---src-templates-post-tsx","path":"/contents/algorithm-java-codility-counting-elevator-movements","webpackCompilationHash":"736c5a52559e42af9bc9","result":{"data":{"markdownRemark":{"html":"<p>이번에 Codility에서 Elevator로 사람을 운반하는 알고리즘을 만드는 문제입니다. Queue를 사용해야 할 것으로 보이며 Queue를 이용하여 풀어보겠습니다.</p>\n<h2 id=\"1-question\"><a href=\"#1-question\" aria-label=\"1 question permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Question</h2>\n<div id=\"brinza-task-description\">\n<p>People are waiting for an elevator in a hotel. The elevator has limited capacity and you would like to analyse its movement.</p>\n<p>The hotel has floors numbered from 0 (ground floor) to M. The elevator has a maximum capacity of X people and a weight limit of Y. There are N people gathered at the ground floor, standing in a queue for the elevator. You are given every person's weight A[K] and target floor B[K]. (That is, A[0] and B[0] represent the first person in the queue.)</p>\n<p>People continue to enter the elevator, in the order of their position in the queue (and push the buttons for their target floors), for as long as there is room for them. (The queue order cannot be changed even if there is room in the elevator for a particular person from the middle of the queue.) Then elevator goes up and stops at every selected floor, and finally returns to the ground floor. This process is repeated until there are no more people in the queue. The goal is to count the total number of times that the elevator stops.</p>\n<p>For example, consider a hotel with floors numbered from 0 to M = 5, with an elevator with a maximum capacity of X = 2 people and a weight limit of Y = 200. The weights A and target floors B are:</p>\n<tt style=\"white-space:pre-wrap\">    A[0] = 60    B[0] = 2\n    A[1] = 80    B[1] = 3\n    A[2] = 40    B[2] = 5</tt>\n<p>The elevator will take the first two passengers together, stop at the 2nd and 3rd floors, then return to the ground floor. Then, it will take the last passenger, stop at the 5th floor and return to the ground floor. In total, the elevator will stop five times. Note that this number includes the last stop at the ground floor.</p>\n<p>Write a function:</p>\n<blockquote><p style=\"font-family: monospace; font-size: 9pt; display: block; white-space: pre-wrap\"><tt>class Solution { public int solution(int[] A, int[] B, int M, int X, int Y); }</tt></p></blockquote>\n<p>that, given zero-indexed arrays A and B consisting of N integers, and numbers X, Y and M as described above, returns the total number of times the elevator stops.</p>\n<p>For example, given the above data, the function should return 5, as explained above.</p>\n<p>For example, given M = 3, X = 5, Y = 200 and the following arrays:</p>\n<tt style=\"white-space:pre-wrap\">    A[0] =  40    B[0] = 3\n    A[1] =  40    B[1] = 3\n    A[2] = 100    B[2] = 2\n    A[3] =  80    B[3] = 2\n    A[4] =  20    B[4] = 3</tt>\n<p>the function should return 6, as the elevator will move in two stages: with the first three people and then with the two remaining people.</p>\n<p>Assume that:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>N, M and X are integers within the range [<span class=\"number\">1</span>..<span class=\"number\">100,000</span>];</li>\n<li>Y is an integer within the range [<span class=\"number\">1</span>..<span class=\"number\">1,000,000,000</span>];</li>\n<li>each element of array A is an integer within the range [<span class=\"number\">1</span>..<span class=\"number\">Y</span>];</li>\n<li>each element of array B is an integer within the range [<span class=\"number\">1</span>..<span class=\"number\">M</span>].</li>\n</ul>\n</blockquote><p>Complexity:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>expected worst-case time complexity is O(N*log(N)+M);</li>\n<li>expected worst-case space complexity is O(N+M), beyond input storage (not counting the storage required for input arguments).</li>\n</ul>\n</blockquote></div>\n<h2 id=\"2-process\"><a href=\"#2-process\" aria-label=\"2 process permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Process</h2>\n<ol>\n<li>Waiting People Queue 만들기</li>\n<li>Elevator 한계선 조건 만들기</li>\n<li>Waiting People Queue에서 Elevator Queue로 이동</li>\n<li>Elevator Queue에 각 층마다 돌아가고 Elevator queue가 비우면 1층으로 복귀</li>\n<li>반복하여 Waiting Queue가 없어지면 완료</li>\n</ol>\n<h2 id=\"3-code\"><a href=\"#3-code\" aria-label=\"3 code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Queue</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util<span class=\"token punctuation\">.</span>concurrent</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">LinkedBlockingQueue</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMain</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TestMain</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">A</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">60</span><span class=\"token punctuation\">,</span> <span class=\"token number\">80</span><span class=\"token punctuation\">,</span> <span class=\"token number\">40</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">B</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">M</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">X</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">Y</span> <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 모든 사람의 체중 = A [K]</span>\n    <span class=\"token comment\">// 대상 층 = B [K]</span>\n    <span class=\"token comment\">// 존재하는 층수 = M</span>\n    <span class=\"token comment\">// 엘리베이터의 최대 수용 인원 : X명</span>\n    <span class=\"token comment\">// 무게 제한 : Y</span>\n    <span class=\"token comment\">// (즉, A [0]과 B [0]은 대기열에있는 첫 번째 사람을 나타냅니다.)</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">M</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">People</span><span class=\"token punctuation\">></span></span> waitingQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            waitingQueue<span class=\"token punctuation\">.</span><span class=\"token function\">offer</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">new</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">A</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getInElv</span><span class=\"token punctuation\">(</span>waitingQueue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getInElv</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">People</span><span class=\"token punctuation\">></span></span> queue<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> xSum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> ySum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> floor <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>queue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token class-name\">Queue</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">People</span><span class=\"token punctuation\">></span></span> elevatorQueue <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">LinkedList</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">// 엘레베이터 용량 확인</span>\n            <span class=\"token class-name\">People</span> waitPeople <span class=\"token operator\">=</span> queue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            elevatorQueue<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>waitPeople<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>xSum <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">X</span> <span class=\"token operator\">||</span> ySum <span class=\"token operator\">+</span> waitPeople<span class=\"token punctuation\">.</span><span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                xSum <span class=\"token operator\">+=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                ySum <span class=\"token operator\">+=</span> waitPeople<span class=\"token punctuation\">.</span><span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>elevatorQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">People</span> p <span class=\"token operator\">=</span> elevatorQueue<span class=\"token punctuation\">.</span><span class=\"token function\">poll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>floor <span class=\"token operator\">!=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getGoal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    floor <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span><span class=\"token function\">getGoal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token comment\">// 1층으로 돌아가기</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elevatorQueue<span class=\"token punctuation\">.</span><span class=\"token function\">isEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">getInElv</span><span class=\"token punctuation\">(</span>queue<span class=\"token punctuation\">,</span> <span class=\"token class-name\">X</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Y</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">People</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> goal<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">People</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> weight<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> goal<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>weight <span class=\"token operator\">=</span> weight<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>goal <span class=\"token operator\">=</span> goal<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getWeight</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> weight<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getGoal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> goal<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token annotation punctuation\">@Override</span>\n        <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token string\">\"People{\"</span> <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\"weight=\"</span> <span class=\"token operator\">+</span> weight <span class=\"token operator\">+</span>\n                    <span class=\"token string\">\", goal=\"</span> <span class=\"token operator\">+</span> goal <span class=\"token operator\">+</span>\n                    <span class=\"token string\">'}'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"4-outro\"><a href=\"#4-outro\" aria-label=\"4 outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Outro</h2>\n<p>4개의 문제가 넉넉한 시간이었음에도 불구하고 풀지를 못했네요. 알고리즘 공부를 계속해서 해야겠습니다. ㅠㅠ</p>\n<p>사진관련 데이터를 컨버팅 하는 2번 문제는 개인적으로 보관하고 있지만, Sort 부분이 더 설명이 필요할 것으로 보여집니다. 문제가 깔끔해 보이지 않았다고 개인적으로 말씀드리고 싶네요. 나중에 더 봐서 해결이 가능하면 올려보도록 하겠습니다. 그리고, String으로 나열된 데이터를 바꾸는 것이 참 번거로워서 이 부분을 좀 더 연습해야 될 것 같습니다.</p>\n<p>이번 과정은 Queue를 통해 생산자와 소비자 패턴을 쓰듯이 풀어보았습니다. 나중에 더 개선해보겠습니다.</p>","fields":{"slug":"algorithm-java-codility-counting-elevator-movements"},"frontmatter":{"title":"[Algorithm/Java] Codility - Counting Elevator Movements","author":"Seolhun","subTitle":"","banner":"/assets/covers/java.png","category":"Algorithm","tags":["Algorithm","Java"],"date":"2018.04.08"},"timeToRead":4}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"algorithm-java-codility-counting-elevator-movements","prev":{"excerpt":"이번에는 저번 시간에 작성한 ES6 Featur Part1에 이어 Part 2에 해당되는 내용을 정리해볼까 합니다. 간단히 정리하였지만 필요한 기능들을 숙지하면 큰 도움이 될 것 같습니다. Intro ES6 특징 - Part 1을 먼저 정리하였으니, 2파트 모두 확인하실 분들은 블로그를 확인해주세요. Part 1 Block-Scoped Constructs  and  Arrow Functions Default Parameters Enhanced…","html":"<p>이번에는 저번 시간에 작성한 ES6 Featur Part1에 이어 Part 2에 해당되는 내용을 정리해볼까 합니다. 간단히 정리하였지만 필요한 기능들을 숙지하면 큰 도움이 될 것 같습니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p><a href=\"/posts/javascript/20180406-js-es6-featured-1/\">ES6 특징 - Part 1</a>을 먼저 정리하였으니, 2파트 모두 확인하실 분들은 블로그를 확인해주세요.</p>\n<h4 id=\"part-1\"><a href=\"#part-1\" aria-label=\"part 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 1</h4>\n<ol>\n<li>Block-Scoped Constructs <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code></li>\n<li>Arrow Functions</li>\n<li>Default Parameters</li>\n<li>\n<p>Enhanced Object Literals</p>\n<h4 id=\"part-2-new-built-in-methods\"><a href=\"#part-2-new-built-in-methods\" aria-label=\"part 2 new built in methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 2 New Built-In Methods</h4>\n</li>\n<li>Template Literals</li>\n<li>Classes</li>\n<li>Modules</li>\n</ol>\n<h2 id=\"2-contents\"><a href=\"#2-contents\" aria-label=\"2 contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Contents</h2>\n<h4 id=\"7-new-built-in-methods\"><a href=\"#7-new-built-in-methods\" aria-label=\"7 new built in methods permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. New Built-In Methods</h4>\n<ul>\n<li>\n<p>Object Property Assign</p>\n<ul>\n<li><code class=\"language-text\">Object.assign</code>을 통해 자동으로 Destructuring 과정을 통해 객체 간 통합이 됩니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">let</span> dest <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> quux<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> src1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> bar<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">let</span> src2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> foo<span class=\"token punctuation\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> baz<span class=\"token punctuation\">:</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">}</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">assign</span><span class=\"token punctuation\">(</span>dest<span class=\"token punctuation\">,</span> src1<span class=\"token punctuation\">,</span> src2<span class=\"token punctuation\">)</span>\ndest<span class=\"token punctuation\">.</span>quux <span class=\"token operator\">===</span> <span class=\"token number\">0</span> <span class=\"token comment\">// true</span>\ndest<span class=\"token punctuation\">.</span>foo  <span class=\"token operator\">===</span> <span class=\"token number\">3</span> <span class=\"token comment\">// true</span>\ndest<span class=\"token punctuation\">.</span>bar  <span class=\"token operator\">===</span> <span class=\"token number\">2</span> <span class=\"token comment\">// true</span>\ndest<span class=\"token punctuation\">.</span>baz  <span class=\"token operator\">===</span> <span class=\"token number\">4</span> <span class=\"token comment\">// true</span></code></pre></div>\n<ul>\n<li>\n<p>Find, FindIndex</p>\n<ul>\n<li>이 내용은 <a href=\"posts/javascript/operators/20180407-js-goodarraymethods/\">Array에서 사용하면 좋을 메소드</a>라는 블로그로 미리 정리해놓았습니다.</li>\n<li>Find, FindIdex의 중요한 점은, <code class=\"language-text\">처음으로 찾는 값만</code> 결과 값으로 가져온다는 것입니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 4</span>\n<span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">findIndex</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span> <span class=\"token operator\">=></span> x <span class=\"token operator\">></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<ul>\n<li>\n<p>repeat</p>\n<ul>\n<li>String.repeat이라는 메소드가 생겨 반복할 수 있습니다.</li>\n</ul>\n</li>\n<li>String Repeating</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\" - \"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span> <span class=\"token operator\">*</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// \" -  -  -  -  -  -  -  -  -  -  -  - \"</span>\n<span class=\"token string\">\"seolhun\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">repeat</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"seolhunseolhunseolhun\"</span></code></pre></div>\n<ul>\n<li>\n<p>String Searching</p>\n<ul>\n<li>기존의 indexOf를 통해 확인하는 것을 다양한 메소드를 통해 쉽게 확인 할 수 있습니다.</li>\n<li>sub-string과 같이 이용되어 2번째 argement를 잘 이용해야 합니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ello\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">endsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hell\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>   <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ell\"</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ell\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// true</span>\n<span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ell\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span>    <span class=\"token comment\">// false</span></code></pre></div>\n<ul>\n<li>\n<p>Number Truncation</p>\n<ul>\n<li>Negrative, Positive일 경우 조건을 다르게 줘야했던 것을 하나의 메소드로 처리할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token number\">42.7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 42</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span> <span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Math<span class=\"token punctuation\">.</span><span class=\"token function\">trunc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">0.1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -0</span></code></pre></div>\n<p> customer = { name: \"Seolhun\" }\nlet message = <code class=\"language-text\">Hello ${customer.name}, want to buy ${card.amount} ${card.product} for a total of ${card.amount * card.unitprice} bucks?</code></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### 9. Unicode &amp; RegExp Literals\n- Unicode\n  - 기존의 Unicode는 parseInt를 했어야하지만, 이제는 추가적인 작업없이 비교가 가능합니다.\n\n```js\n// ES5\nparseInt(&quot;111110111&quot;, 2) === 503;\nparseInt(&quot;767&quot;, 8) === 503;\n\n0o767 === 503\n\n- Promise는 기존의 CallBack을 통해 이용하던 것들 추상화시킨 것으로 ES6부터 표준이 되었습니다.\n  - 관련 내용은 이미 블로그에 작성하였습니다. [Seolhun Blog - Promise](/posts/javascript/operators/20180312-js-promise/)\n\n```js\nfunction msgAfterTimeout (msg, who, timeout) {\n    return new Promise((resolve, reject) =&gt; {\n        setTimeout(() =&gt; resolve(`${msg} Hello ${who}!`), timeout)\n    })\n}\nmsgAfterTimeout(&quot;&quot;, &quot;Foo&quot;, 100).then((msg) =&gt;\n    msgAfterTimeout(msg, &quot;Bar&quot;, 200)\n).then((msg) =&gt; {\n    console.log(`done after 300ms:${msg}`)\n})</code></pre></div>\n<h4 id=\"11-classes\"><a href=\"#11-classes\" aria-label=\"11 classes permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>11. Classes</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">class</code>라는 표준이 등장하여 함수로만 정의하던 것을 대체하였습니다. 상당히 많은 내용이 있으니 코드로 작성하여 알아보겠습니다.</p>\n<ol>\n<li><code class=\"language-text\">상속</code>이 가능해졌습니다.</li>\n<li><code class=\"language-text\">static</code> 선언이 가능해졌습니다. static은 클래스의 인스턴스 없이 호출이 가능하며 클래스가 인스턴스화되면 호출할 수 없습니다.</li>\n<li><code class=\"language-text\">getter</code>, <code class=\"language-text\">setter</code></li>\n</ol>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>id <span class=\"token operator\">=</span> id\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">move</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">move</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> x\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>y <span class=\"token operator\">=</span> y\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">static</span> <span class=\"token function\">defaultRectangle</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"default\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Shape</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">id<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> width<span class=\"token punctuation\">,</span> height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_width <span class=\"token operator\">=</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_height <span class=\"token operator\">=</span> height<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">toString</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">\"Rectangle > \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">super</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">width</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">width</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_width <span class=\"token operator\">=</span> width\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">width</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_width\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">set</span> <span class=\"token function\">height</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">height</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_height <span class=\"token operator\">=</span> height\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">get</span> <span class=\"token function\">height</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_height\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"12-modules\"><a href=\"#12-modules\" aria-label=\"12 modules permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>12. Modules</h4>\n<ul>\n<li>\n<p><code class=\"language-text\">modules</code>라는 기능이 생김으로써 코드의 모듈화를 할 수 있습니다.</p>\n<ul>\n<li>global namespace를 사용하지 않고 모듈 별 <code class=\"language-text\">import/export</code> 기능을 사용할 수 있습니다.</li>\n<li><code class=\"language-text\">default</code> 속성도 사용할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">//  lib/math.js</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">sum</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">var</span> pi <span class=\"token operator\">=</span> <span class=\"token number\">3.141593</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">exp</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//  someApp.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> math <span class=\"token keyword\">from</span> <span class=\"token string\">\"lib/math\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">2π = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>math<span class=\"token punctuation\">.</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>pi<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>pi<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//  otherApp.js</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> sum<span class=\"token punctuation\">,</span> pi <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lib/math\"</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">2π = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">sum</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">,</span> pi<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// theOtherApp.js</span>\n<span class=\"token keyword\">import</span> exp<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> pi<span class=\"token punctuation\">,</span> e <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"lib/mathplusplus\"</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">e^{π} = </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">exp</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이렇게 ES6를 Part1, 2를 정리를 끝냈습니다. 이전에는 간단히 사용만 했지만 정리하면서 미쳐 알지 못한 사소한 정보들도 알게되면서 좋은 경험이 되었습니다. 특히, ES6를 잘 숙지하고 사용해야하는 이유는 브라우저 호환성 때문일 것입니다. 현대 표준으로 정의되어있지만 옛 브라우저(익스프롤러 9버전 등) 경우에서는 Babel과 같은 Polyfill을 사용해야하지만 브라우저가 인식하여 호환성을 고려한 개발에는 버전 별 기능을 잘 숙지해야 합니다.</p>\n<p>이번을 계기로 ES6의 새로운 기능의 대부분을 알게되었습니다. 다음 시간에는 Typescript의 기능을 알아보겠습니다. 이제는 먼저 코드로 개발하는 것 보다 먼저, 문서와 명칭 기본적인 특징들을 숙지하고 개발에 들어갈 수 있는 습관을 더더욱 들이도록 노력해야겠습니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"http://es6-features.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6-features.org/</a></li>\n</ul>","id":"5549b5de-ceb8-5028-98b5-837825f4d186","fields":{"slug":"javascript-es-6-es-6-부터-등장하는-개발자가-알아야-할-특징-part-2"},"frontmatter":{"title":"[Javascript/ES6] ES6부터 등장하는 개발자가 알아야 할 특징 - Part 2","date":"2018-04-07T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/js.png","category":"Javascript","tags":["Javascript","ES6","Feature"]},"timeToRead":4},"next":{"excerpt":"이번에 Codility에서 알고리즘을 풀게 될 기회를 얻었지만 너무나 많이 못풀었습니다. 아쉽고 슬프지만 앞으로도 계속 풀어나가고 연습하면 더 나아질거라고 생각합니다.\n또한, Javascript로만 풀었는데, Java로 풀어야하는 상황이라서 익숙치가 않은 것도 있었네요. Java로도 가끔씩 풀어보면서 연습해야 할 것 같습니다.\n이 문제를 포함하여 앞으로 2개 더 풀어나가겠습니다. 1. Question 2. Process String S의…","html":"<p>이번에 Codility에서 알고리즘을 풀게 될 기회를 얻었지만 너무나 많이 못풀었습니다. 아쉽고 슬프지만 앞으로도 계속 풀어나가고 연습하면 더 나아질거라고 생각합니다.\n또한, Javascript로만 풀었는데, Java로 풀어야하는 상황이라서 익숙치가 않은 것도 있었네요. Java로도 가끔씩 풀어보면서 연습해야 할 것 같습니다.\n이 문제를 포함하여 앞으로 2개 더 풀어나가겠습니다.</p>\n<h2 id=\"1-question\"><a href=\"#1-question\" aria-label=\"1 question permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Question</h2>\n<div class=\"task-description-content\">\n<div id=\"brinza-task-description\">\n<p>A non-negative integer variable V is given. There are two actions available that modify its value:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>if V is odd, subtract 1 from it;</li>\n<li>if V is even, divide it by 2.</li>\n</ul>\n</blockquote><p>These actions are performed until the value of V becomes 0.</p>\n<p>For example, if V initially contains value 28, it will become 0 after seven steps:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>V contains value 28, which is even: divide by 2 and obtain 14;</li>\n<li>V contains value 14, which is even: divide by 2 and obtain 7;</li>\n<li>V contains value 7, which is odd: subtract 1 and obtain 6;</li>\n<li>V contains value 6, which is even: divide by 2 and obtain 3;</li>\n<li>V contains value 3, which is odd: subtract 1 and obtain 2;</li>\n<li>V contains value 2, which is even: divide by 2 and obtain 1;</li>\n<li>V contains value 1, which is odd: subtract 1 and obtain 0.</li>\n</ul>\n</blockquote><p>Write a function:</p>\n<blockquote><p style=\"font-family: monospace; font-size: 9pt; display: block; white-space: pre-wrap\"><tt>class Solution { public int solution(String S); }</tt></p></blockquote>\n<p>that, given a zero-indexed string S consisting of N characters containing a binary representation of the initial value of variable V, returns the number of steps after which the value of V will become 0, as described above.</p>\n<p>Assume that:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>N is an integer within the range [<span class=\"number\">1</span>..<span class=\"number\">1,000,000</span>];</li>\n<li>string S consists only of the characters \"<tt style=\"white-space:pre-wrap\">0</tt>\" and/or \"<tt style=\"white-space:pre-wrap\">1</tt>\";</li>\n<li>the binary representation is big-endian, i.e. the first character of string S corresponds to the most significant bit;</li>\n<li>the binary representation may contain leading zeros.</li>\n</ul>\n</blockquote><p>For example, given string S = \"<tt style=\"white-space:pre-wrap\">011100</tt>\" the function should return 7, because string S represents the number 28 and 28 becomes 0 after seven steps, as explained above.</p>\n<p>Complexity:</p>\n<blockquote><ul style=\"margin: 10px;padding: 0px;\"><li>expected worst-case time complexity is O(N);</li>\n<li>expected worst-case space complexity is O(1) (not counting the storage required for input arguments).</li>\n</ul>\n</blockquote></div>\n<div style=\"margin-top:5px\">\n<small>Copyright 2009–2018 by Codility Limited. All Rights Reserved. Unauthorized copying, publication or disclosure prohibited.</small>\n</div>\n</div>\n<h2 id=\"2-process\"><a href=\"#2-process\" aria-label=\"2 process permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Process</h2>\n<ol>\n<li>String S의 2진수를 10진수 int로 변환한다.</li>\n<li>0이 될때까지 아래 작업을 수행한다.</li>\n<li>짝수일 경우 /2 해준다.</li>\n<li>홀수일 경우 -1 해준다.</li>\n<li>0이 될 때까지 반복한다.</li>\n</ol>\n<h2 id=\"3-code\"><a href=\"#3-code\" aria-label=\"3 code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">TestMain</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">TestMain</span> t <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">TestMain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"011100\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> <span class=\"token class-name\">S</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> question <span class=\"token operator\">=</span> <span class=\"token class-name\">Integer</span><span class=\"token punctuation\">.</span><span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">S</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">getStep</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getStep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> question<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>question <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> count<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        count<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>question <span class=\"token operator\">%</span> <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getStep</span><span class=\"token punctuation\">(</span>question <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token function\">getStep</span><span class=\"token punctuation\">(</span>question <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","id":"4c00254c-fa6e-54ab-8628-62835f9492e6","fields":{"slug":"algorithm-java-codility-find-steps-algorithm"},"frontmatter":{"title":"[Algorithm/Java] Codility - FindSteps Algorithm","date":"2018-04-08T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/java.png","category":"Algorithm","tags":["Algorithm","Java"]},"timeToRead":2}}}}
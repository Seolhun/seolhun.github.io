{"componentChunkName":"component---src-templates-blog-tsx","path":"/contents/8","result":{"data":{"allMarkdownRemark":{"totalCount":65,"edges":[{"node":{"excerpt":"Javascript, Typescript 등 다양한 Javascript를 번갈아 사용하면서, ES6의 새로운 기능이 무엇인지, Typescript만의 기능이 무엇인지 잘 구분하지 않았던 것 같습니다.\n이번 시간을 계기로 ES6의 기능들과 Typescript…","fields":{"slug":"javascript-es-6-es-6-부터-등장하는-개발자가-알아야-할-특징-part-1"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Javascript","date":"2018.04.06","subTitle":"","tags":["Javascript","ES6","Feature"],"title":"[Javascript/ES6] ES6부터 등장하는 개발자가 알아야 할 특징 - Part 1"},"html":"<p>Javascript, Typescript 등 다양한 Javascript를 번갈아 사용하면서, ES6의 새로운 기능이 무엇인지, Typescript만의 기능이 무엇인지 잘 구분하지 않았던 것 같습니다.\n이번 시간을 계기로 ES6의 기능들과 Typescript의 기능들을 구분하여 정리해보겠습니다.</p>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<h4 id=\"ecmascript란\" style=\"position:relative;\"><a href=\"#ecmascript%EB%9E%80\" aria-label=\"ecmascript란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ECMAScript란?</h4>\n<blockquote>\n<p>넷스케이프(Netscape)에서 1995년 개발한 자바스크립트(javascript)는 웹 브라우저에서 동적인 기능을 제공하기 위한 언어다. 현재는 대부분의 브라우저에서 이 언어를 제공하고 있다. 그런데 표준 규격없이 여러 브라우저에서 독자적인 특성이 추가되면서 호환성 문제가 발생하기 시작했다. 이에 ECMA 국제 기구에서 “ECMAScript Standard”라는 표준을 만들게 되었다. 정확히 이야기 하자면 현재의 자바스크립트는 ECMAScript와 BOM(Browser Object Model)와 DOM(Document Object Model)을 포괄하는 개념이다.</p>\n</blockquote>\n<p>그렇다면, 이번 주제인 Typescript와 ES6의 특징들에 대해서 알아볼까 합니다.</p>\n<h4 id=\"typescript-vs-es6\" style=\"position:relative;\"><a href=\"#typescript-vs-es6\" aria-label=\"typescript vs es6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Typescript vs ES6</h4>\n<div class='text-center'>\n  <img src=\"/assets/images/contents/20180406/es6/ts-es6.png\" width=\"40%\" height=\"40%\">\n</div>\n<p>Typescript에서 주로 사용되는 그림이다. 문제는 Typescript를 사용하다보면, 해당 기능들이 ES6부터 제공된 기능인지 Typescript에서 제공된 기능인지를 잘 모르고 사용할 때가 많았습니다. 특히, ES6부터는 Javascript의 격변이 시작되었고 상당히 중요한 기능들이 등장하기 시작했습니다. 가끔 누군가가 제게 이러한 기능들에 대해 물어보면 ES6의 기능인지 Typescript의 기능인지, 정확히 어떤 내용인지를 잘 설명하지 못하는 자신을 보고 꼭 정리할 필요성이 있다고 생각했습니다.</p>\n<p>이번의 내용은 상당히 길어질 것으로 예상되어 2개로 나누어서 작성하겠습니다. 내용 목차는 아래와 같습니다. 연관성이 있는 것들을 묶으려고 노력했고, 작은 단위로 바로바로 알 수 있고, 알아야 할 것들로 순서를 정리했습니다.</p>\n<h4 id=\"part-1\" style=\"position:relative;\"><a href=\"#part-1\" aria-label=\"part 1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 1</h4>\n<ol>\n<li>Block-Scoped Constructs <code class=\"language-text\">let</code> and <code class=\"language-text\">const</code></li>\n<li>Arrow Functions</li>\n<li>Default Parameters</li>\n<li>Enhanced Object Literals</li>\n<li>Destructuring Assignment</li>\n<li>Rest &#x26; Spread Operators</li>\n</ol>\n<h4 id=\"part-2\" style=\"position:relative;\"><a href=\"#part-2\" aria-label=\"part 2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Part 2</h4>\n<ol start=\"7\">\n<li>New Built-In Methods</li>\n<li>Template Literals</li>\n<li>Unicode &#x26; RegExp Literals</li>\n<li>Promises</li>\n<li>Classes</li>\n<li>Modules</li>\n</ol>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<h4 id=\"1-block-scoped-constructs-code-classlanguage-textletcode--code-classlanguage-textconstcode\" style=\"position:relative;\"><a href=\"#1-block-scoped-constructs-code-classlanguage-textletcode--code-classlanguage-textconstcode\" aria-label=\"1 block scoped constructs code classlanguage textletcode  code classlanguage textconstcode permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Block-Scoped Constructs <code class=\"language-text\">let</code> &#x26; <code class=\"language-text\">const</code></h4>\n<ol>\n<li>const</li>\n<li>const는 상수를 선언하는 것으로 여러번 선언될 수 없지만, let과 같이 블록 내부로 유효 범위가 한정되므로 아래의 예시는 오류가 발생하지 않는다.</li>\n<li>let</li>\n<li>let은 <code class=\"language-text\">{}</code> 블록 내부로 유효 범위가 한정되어 Scope가 기존의 var와 다르게 Scope의 영향을 받지 않는다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">testBlockScope</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value <span class=\"token operator\">=</span> <span class=\"token number\">10</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> value <span class=\"token comment\">// Error</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// TypeError: Assignment to constant variable.</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">let</span> local <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>local <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> local <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 5</span>\n    local <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function if let : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>local<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">function local let : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>local<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 3</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">testBlockScope</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>테스트를 위해 만든 함수이지만 안에는 많은 내용이 내포되어있습니다.</p>\n<ol>\n<li>const과 let 모두 Block-Scoped라는 명칭처럼 {} 안에서만 Scope의 영향력을 가져갈 수 있습니다. 이는 const가 에러난 부분과 상수임에도 다시 생성해도 문제가 되지 않는 부분을 비교하면 이를 더 잘 알 수 있습니다.</li>\n<li>let은 const와 같이 Block Scope를 갖지만 재할당 할 수 있습니다. 또한, 블록 안에서만 Scope를 가지고 있기 때문에 재선언하면 같은 변수이름을 갖더라도 스코프 밖 변수에 영향을 주지 않습니다.</li>\n</ol>\n<h4 id=\"2-arrow-functions\" style=\"position:relative;\"><a href=\"#2-arrow-functions\" aria-label=\"2 arrow functions permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Arrow Functions</h4>\n<p>Arrow Function의 장점은 기존 function의 Syntax 보다 간결하다는 것입니다. 그 중 가장 중요한 것은 <code class=\"language-text\">현재 객체 Context를 binding 한다.</code>는 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">let</span> odds  <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> pairs <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> even<span class=\"token operator\">:</span> v<span class=\"token punctuation\">,</span> odd<span class=\"token operator\">:</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> nums  <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> v <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">let</span> odds  <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> pairs <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> even<span class=\"token operator\">:</span> v<span class=\"token punctuation\">,</span> odd<span class=\"token operator\">:</span> v <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">let</span> nums  <span class=\"token operator\">=</span> evens<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">v<span class=\"token punctuation\">,</span> i</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> v <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">// Lexical Scope: Binding: this</span>\n<span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> that <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  that<span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">growUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 콜백은 `that` 변수를 참조하고 이것은 값이 기대한 객체이다.</span>\n    that<span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Person() 생성자는 `this`를 자신의 인스턴스로 정의.</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setInterval</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token function\">growUp</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 비엄격 모드에서, growUp() 함수는 `this`를 전역 객체로 정의하고, 이는 Person() 생성자에 정의된 `this`와 다름.</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>age<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> p <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"3-default-parameter-values\" style=\"position:relative;\"><a href=\"#3-default-parameter-values\" aria-label=\"3 default parameter values permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Default Parameter Values</h4>\n<p>ES6부터는 Default Parameter Values를 가질 수 있습니다. 함수 선언 시에 미리 작성해주고 값이 정의되지 않았으면 기본 값을 사용하고 값이 있으면 주어진 값을 사용합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">es5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>y <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    y <span class=\"token operator\">=</span> <span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>z <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    z <span class=\"token operator\">=</span> <span class=\"token number\">42</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">es5 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">+</span>z<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">es5</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token operator\">=</span><span class=\"token number\">7</span><span class=\"token punctuation\">,</span> z<span class=\"token operator\">=</span><span class=\"token number\">42</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">es6 : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>x<span class=\"token operator\">+</span>y<span class=\"token operator\">+</span>z<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y <span class=\"token operator\">+</span> z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">50</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token number\">49</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"4-enhanced-object-literals\" style=\"position:relative;\"><a href=\"#4-enhanced-object-literals\" aria-label=\"4 enhanced object literals permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Enhanced Object Literals</h4>\n<p>ES6부터는 기존의 Object를 생성하는 방식을 더 쉽고 간편하게 개선하였습니다.</p>\n<ol>\n<li>객체에서 바로 메소드를 정의할 수 있습니다.</li>\n<li>정의된 속성과 같은 경우 더 짧게 사용할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ES5</span>\nobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">isMethod</span><span class=\"token operator\">:</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  x<span class=\"token operator\">:</span> x<span class=\"token punctuation\">,</span>\n  y<span class=\"token operator\">:</span> y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// ES6</span>\nobj <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">isMethod</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  x<span class=\"token punctuation\">,</span>\n  y<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"5-destructuring-assignment\" style=\"position:relative;\"><a href=\"#5-destructuring-assignment\" aria-label=\"5 destructuring assignment permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Destructuring Assignment</h4>\n<ol>\n<li>비구조화된 객체 자체를 변수로 사용할 수 있습니다. (변수 기본 값도 할 수 있습니다.)</li>\n<li>비구조화된 객체를 개별로 할당할 수 있습니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">es5</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arg</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> name <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> val  <span class=\"token operator\">=</span> arg<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">es5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Seolhun'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">[</span> name<span class=\"token punctuation\">,</span> val <span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'Seolhun'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 비구조화된 객체를 개별로 할당할 수 있습니다.</span>\n<span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>name<span class=\"token operator\">:</span> <span class=\"token string\">'Seolhun'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> op<span class=\"token punctuation\">,</span> os <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>op<span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> os<span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\nop <span class=\"token comment\">// 1</span>\nos <span class=\"token comment\">// 2</span></code></pre></div>\n<h4 id=\"6-rest--spread-operators\" style=\"position:relative;\"><a href=\"#6-rest--spread-operators\" aria-label=\"6 rest  spread operators permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Rest &#x26; Spread Operators</h4>\n<ul>\n<li>\n<p>Rest</p>\n<ul>\n<li>나머지 인수를 가변 인수 함수의 단일 매개 변수로 사용 할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ES6</span>\n<span class=\"token comment\">// Rest : 3개의 변수를 ...a 단일 매개 변수로 사용할 수 있습니다.</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>a</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> a<span class=\"token punctuation\">.</span>length\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">es6</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Seolhun\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// ( 1 + 2 ) * 3 = 9</span></code></pre></div>\n<ul>\n<li>\n<p>Spread</p>\n<ul>\n<li>리터럴 요소와 개별 함수 매개 변수 모두에 반복 가능한 컬렉션 (배열 또는 문자열) 요소의 확산.</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token comment\">// ES5</span>\n<span class=\"token keyword\">let</span> es5_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Seolhun'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> es5_spread <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>es5_values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nes5_spread <span class=\"token comment\">// [ 1, 2, 'Seolhun', 29, true ];</span>\n\n<span class=\"token comment\">// ES6</span>\n<span class=\"token comment\">// Spread</span>\n<span class=\"token keyword\">let</span> es6_values <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token string\">'Seolhun'</span><span class=\"token punctuation\">,</span> <span class=\"token number\">29</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> es6_spread <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>es6_values <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nes6_spread <span class=\"token comment\">// [ 1, 2, 'Seolhun', 29, true ];</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">spreadFunction</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"string\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">String is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"boolean\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Boolean is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> value <span class=\"token operator\">===</span> <span class=\"token string\">\"number\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Number is </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>value<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token function\">spreadFunction</span><span class=\"token punctuation\">(</span>es6_spread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>다음은 ES6 Feature Part 2라는 글로 마무리 하겠습니다. 이번 ES6의 기능만으로도 많은 것을 대체할 수 있다고 생각합니다. 잘 숙지해서 적시 적소에 사용하도록 노력해야겠습니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"http://es6-features.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ES6-features.org/</a></li>\n</ul>","id":"f4b5ddd3-df8d-57d2-a338-49bb4d759bbd","timeToRead":5}},{"node":{"excerpt":"이번에는 Javascript에 Bit Operators를 이용하여 다양한 예제를 만들어볼까 합니다. 예를들어, * 이용하지 않고 곱셈하기, 외로운 수 찾기 알고리즘 등을 풀어볼까 합니다.\n더 좋은 내용과 참고사항 있으시면 알려주세요. :) Intro…","fields":{"slug":"algorithm-javascript-비트연산자를-이용하여-간단한-알고리즘-및-예제-만들어보기"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Algorithm","date":"2018.04.05","subTitle":"","tags":["Algorithm","Javascript","Bit","Operators"],"title":"[Algorithm/Javascript] 비트연산자를 이용하여 간단한 알고리즘 및 예제 만들어보기"},"html":"<p>이번에는 Javascript에 Bit Operators를 이용하여 다양한 예제를 만들어볼까 합니다. 예를들어, * 이용하지 않고 곱셈하기, 외로운 수 찾기 알고리즘 등을 풀어볼까 합니다.\n더 좋은 내용과 참고사항 있으시면 알려주세요. :)</p>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>알고리즘을 풀다보면 비트연산으로 풀어야 하는 경우가 발생합니다. 특히, 기본에 충실한 간단한 알고리즘들이 대부분 비트연산자로 풀어야 하는 경우가 많습니다. 이럴 경우를 대비하여 비트 연산자를 이해하는 시간을 가져볼까 합니다.</p>\n<p>비트 연산자를 들어가기에 앞서 <code class=\"language-text\">논리 연산자</code>와 <code class=\"language-text\">조건부 논리연산자</code>를 간단하게 정리해볼까 합니다. 저 또한 준비하면서 알게된 내용이었으며 들어가기 전에 보는 것이 논리 연산자를 이해하는데 큰 도움이 될 것이라고 생각합니다.</p>\n<h4 id=\"논리-연산자-vs-조건부-논리연산자란\" style=\"position:relative;\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90-vs-%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%85%BC%EB%A6%AC%EC%97%B0%EC%82%B0%EC%9E%90%EB%9E%80\" aria-label=\"논리 연산자 vs 조건부 논리연산자란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 연산자 vs 조건부 논리연산자란?</h4>\n<p><code class=\"language-text\">&amp; 와 | 는 논리 연산자 Logical Operator</code>라고 부르며 <code class=\"language-text\">&amp;&amp; 와 ||는 조건부 논리 연산자 Conditional Logical Operator</code>라고 부릅니다.</p>\n<h4 id=\"차이점은\" style=\"position:relative;\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80\" aria-label=\"차이점은 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점은?</h4>\n<ol>\n<li>\n<p>조건부 연산자의 경우 앞의 조건을 만족하면 뒤의 조건들은 연산하지 않습니다.</p>\n<ul>\n<li>예를 들어, AND는 둘다 1일 경우 1을 출력하는 연산자입니다. 조건부 논리 연산자의 경우는 false가 앞에 나온 경우 1이 나오지 않기 때문에 다음 조건을 확인하지 않고 바로 0을 출력합니다. 하지만, 논리 연산자는 다음 값도 전부 확인하여 결과 값을 출력합니다. 모두 검증해야 할 이유가 없다면 조건부 논리 연산을 사용하는 것이 효율적입니다.</li>\n</ul>\n</li>\n<li>\n<p>비트 연산자는 비트 값을 결과 값을 기준으로 결과 출력합니다.</p>\n<ul>\n<li>논리 연산자는 비트 0과 1을 출력하는 반면, 조건부 논리연산자는 boolean 값을 결과 값으로 출력합니다.</li>\n</ul>\n</li>\n</ol>\n<p>간단한 예제를 보면 이해하기 수월할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1. 논리 연산자</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// 2. 조건부 논리 연산자</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<h4 id=\"비트-연산자란\" style=\"position:relative;\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90%EB%9E%80\" aria-label=\"비트 연산자란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 연산자란?</h4>\n<ul>\n<li>비트 연산자는 피연산자를 10진수나 16진수, 8진수로 다루지 않고 <code class=\"language-text\">32개의 비트 집합을 기준으로 연산합니다.</code> 예를 들어, 10진수 9는 2진수로 1001입니다.</li>\n<li><code class=\"language-text\">비트 연산자는 2진수 표현으로 연산</code>을 하지만, 반환값은 Javascript 표준 수 값으로 반환합니다.</li>\n</ul>\n<h5 id=\"1-비트-and\" style=\"position:relative;\"><a href=\"#1-%EB%B9%84%ED%8A%B8-and\" aria-label=\"1 비트 and permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 비트 AND</h5>\n<ul>\n<li>a &#x26; b</li>\n<li>두 피연산자의 대응되는 비트가 모두 1이면 1을 반환.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<h5 id=\"2-비트-or\" style=\"position:relative;\"><a href=\"#2-%EB%B9%84%ED%8A%B8-or\" aria-label=\"2 비트 or permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 비트 OR</h5>\n<ul>\n<li>a | b</li>\n<li>두 피연산자의 대응되는 비트에서 둘 중 하나가 1이거나 모두 1인 경우 1을 반환.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<h5 id=\"3-비트-xor\" style=\"position:relative;\"><a href=\"#3-%EB%B9%84%ED%8A%B8-xor\" aria-label=\"3 비트 xor permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 비트 XOR</h5>\n<ul>\n<li>a ^ b</li>\n<li>두 피연산자의 대응되는 비트에서 둘 중 하나가 1이고, 둘 다 1이나 0이 아닐 경우 1을 반환.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">^</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">^</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">^</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">^</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">외로운 수 찾기</code>에서 XOR 비트 연산자를 이용하여 쉽게 계산할 수 있습니다.</li>\n<li>ex) const array = [1, 1, 3, 4, 4, 5, 5, 6, 6]에서 3을 찾는 문제.</li>\n</ul>\n<h5 id=\"4-비트-not\" style=\"position:relative;\"><a href=\"#4-%EB%B9%84%ED%8A%B8-not\" aria-label=\"4 비트 not permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 비트 NOT</h5>\n<ul>\n<li>~ a</li>\n<li>피연산자의 비트를 뒤집음.</li>\n</ul>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n        10진 값\n    </th>\n    <th>\n        초기 이진 값\n    </th>\n    <th>\n        식\n    </th>\n    <th>\n        연산 후 이진 값\n    </th>\n  </tr>\n  <tr>\n    <td>\n        5\n    </td>\n    <td>\n        00000000 00000000 00000000 00000101\n    </td>\n    <td>\n        ~ 5\n    </td>\n    <td>\n        11111111 11111111 11111111 11111010\n    </td>\n  </tr>\n  <tr>\n    <td>\n        -6\n    </td>\n    <td>\n        11111111 11111111 11111111 11111010\n    </td>\n    <td>\n        ~ 5\n    </td>\n    <td>\n        00000000 00000000 00000000 00000101\n    </td>\n  </tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<h4 id=\"5-비트-왼쪽code-classlanguage-textltltcode-시프트-연산자\" style=\"position:relative;\"><a href=\"#5-%EB%B9%84%ED%8A%B8-%EC%99%BC%EC%AA%BDcode-classlanguage-textltltcode-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"5 비트 왼쪽code classlanguage textltltcode 시프트 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 비트 왼쪽(<code class=\"language-text\">&lt;&lt;</code>) 시프트 연산자</h4>\n<ul>\n<li>a &#x3C;&#x3C; b</li>\n<li>a의 2진수 표현을 b 비트만큼 왼쪽으로 이동함. 오른쪽은 0으로 채움.</li>\n</ul>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n        보수 이진수\n    </th>\n    <th>\n        식\n    </th>\n    <th>\n        이동 후 보수 이진수\n    </th>\n  </tr>\n  <tr>\n    <td>\n        00000101\n    </td>\n    <td>\n        5 << 2\n    </td>\n    <td>\n        00010100\n    </td>\n  </tr>\n  <tr>\n    <td>\n        11110010\n    </td>\n    <td>\n        -14 << 2\n    </td>\n    <td>\n        11001000\n    </td>\n  </tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">14</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -56</span></code></pre></div>\n<h4 id=\"6---비트-오른쪽code-classlanguage-textgtgtcode-시프트-연산자\" style=\"position:relative;\"><a href=\"#6---%EB%B9%84%ED%8A%B8-%EC%98%A4%EB%A5%B8%EC%AA%BDcode-classlanguage-textgtgtcode-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"6   비트 오른쪽code classlanguage textgtgtcode 시프트 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. - 비트 오른쪽(<code class=\"language-text\">&gt;&gt;</code>) 시프트 연산자</h4>\n<ul>\n<li>a >> b</li>\n<li>a의 2진수 표현을 b 비트만큼 오른쪽으로 이동함. 오른쪽 남는 비트는 버림.</li>\n</ul>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n        보수 이진수\n    </th>\n    <th>\n        식\n    </th>\n    <th>\n        이동 후 보수 이진수\n    </th>\n  </tr>\n  <tr>\n    <td>\n        00000101\n    </td>\n    <td>\n        5 >> 2\n    </td>\n    <td>\n        00000001\n    </td>\n  </tr>\n  <tr>\n    <td>\n        11110010\n    </td>\n    <td>\n        -14 >> 2\n    </td>\n    <td>\n        11111100\n    </td>\n  </tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">14</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -4</span></code></pre></div>\n<h5 id=\"7---0으로-채우는-비트-오른쪽code-classlanguage-textgtgtgtcode-시프트-연산자\" style=\"position:relative;\"><a href=\"#7---0%EC%9C%BC%EB%A1%9C-%EC%B1%84%EC%9A%B0%EB%8A%94-%EB%B9%84%ED%8A%B8-%EC%98%A4%EB%A5%B8%EC%AA%BDcode-classlanguage-textgtgtgtcode-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"7   0으로 채우는 비트 오른쪽code classlanguage textgtgtgtcode 시프트 연산자 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. - 0으로 채우는 비트 오른쪽(<code class=\"language-text\">&gt;&gt;&gt;</code>) 시프트 연산자</h5>\n<ul>\n<li>a >>> b</li>\n<li>a의 2진수 표현을 b 비트만큼 오른쪽으로 이동함. 오른쪽 남는 비트는 버리고, 왼쪽은 0으로 채움.</li>\n</ul>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n        10진 값\n    </th>\n    <th>\n        초기 이진 값\n    </th>\n    <th>\n        식\n    </th>\n    <th>\n        연산 후 이진 값\n    </th>\n  </tr>\n  <tr>\n    <td>\n        5\n    </td>\n    <td>\n        00000000 00000000 00000000 00000000\n    </td>\n    <td>\n        5 >>> 3\n    </td>\n    <td>\n        11111111 11111111 11111111 11111010\n    </td>\n  </tr>\n  <tr>\n    <td>\n        -14\n    </td>\n    <td>\n        11111111 11111111 11111111 11110010\n    </td>\n    <td>\n        -14 >>> 2\n    </td>\n    <td>\n        00011111 11111111 11111111 11111110\n    </td>\n  </tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">>>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">14</span> <span class=\"token operator\">>>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 536870910</span></code></pre></div>\n<h2 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>비트에 대한 이해를 하면 할수록 컴퓨터에 대한 연산을 이해하기 쉽습니다. 특히, 이번 비트 연산자들을 통해 간단하게 비트관련한 정보를 숙지할 수 있었으며, 프로그래밍 간 숫자들이 어떻게 비트로 구성되었는지를 간단하게 체험하는데 좋은 시간이 되었습니다. 이와 관련한 알고리즘과 비트관련 된 좋은 정보를 더 조사하여 다음시간에 공유하겠습니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Guide/Obsolete_Pages/Core_Javascript_1.5_Guide/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla - Bitwise_Operators</a></li>\n<li><a href=\"https://docs.microsoft.com/ko-kr/scripting/javascript/reference/unsigned-right-shift-operator-decrement-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft - BitOperators</a></li>\n</ul>","id":"ffe6a977-3572-5d4f-a48a-d503737837e9","timeToRead":6}},{"node":{"excerpt":"이번에는 검색 시 자주 사용되는 이진검색에 대해서 알고리즘을 작성해볼까 합니다.\n이진검색은 배열 안에서 중간 값을 기준으로 계속 나누어 근사 값으로 찾아가는 알고리즘입니다. 1. Contents 이진 검색 알고리즘(binary search algorithm…","fields":{"slug":"algorithm-javascript-binary-search-이진탐색-algorithm"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Algorithm","date":"2018.04.05","subTitle":"","tags":["Algorithm","Javascript","Search","Binary"],"title":"[Algorithm/Javascript] Binary Search(이진탐색) Algorithm"},"html":"<p>이번에는 검색 시 자주 사용되는 이진검색에 대해서 알고리즘을 작성해볼까 합니다.\n이진검색은 배열 안에서 중간 값을 기준으로 계속 나누어 근사 값으로 찾아가는 알고리즘입니다.</p>\n<h2 id=\"1-contents\" style=\"position:relative;\"><a href=\"#1-contents\" aria-label=\"1 contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Contents</h2>\n<p>이진 검색 알고리즘(binary search algorithm)은 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 알고리즘입니다.</p>\n<p>처음 중간의 값을 임의의 값으로 선택하여, 그 값과 찾고자 하는 값의 크고 작음을 비교하는 방식을 채택하고 있습니다.  <strong>처음 선택한 중앙값이 만약 찾는 값보다 크면 그 값은 새로운 최고값이 되며, 작으면 그 값은 새로운 최하값이 된다.</strong></p>\n<ul>\n<li>\n<p>주의사항</p>\n<ul>\n<li>검색 원리상 정렬된 리스트에만 사용이 가능하다,</li>\n</ul>\n</li>\n<li>\n<p>특징</p>\n<ul>\n<li>검색이 반복될 때마다 목표값을 찾을 확률은 두 배가 되므로 속도가 빠릅니다.</li>\n</ul>\n</li>\n<li>\n<p>시간 복잡도</p>\n<ul>\n<li>O(log n)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-code\" style=\"position:relative;\"><a href=\"#2-code\" aria-label=\"2 code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Code</h2>\n<ol>\n<li>\n<p>While을 사용하여 이진탐색 만들어보기</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> binarySearch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> mid<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>  while (min &#x3C;= max) {\n// floor을 쓰는 이유는 배열의 index가 0으로 시작하여 내림으로 값을 구해준다.\nmid = Math.floor((min + max) / 2);\nlet result = arr[mid];\nif (result === value) {\nreturn mid;\n}\n// mid에 1을 더해주는 이유는 배열의 index는 0에서 시작하여 원래 길이의 값은 다시 1을 더해주어야 한다.\nif (result &#x3C; value) {\nmin = mid + 1;\n}\nif (result > value) {\nmax = mid - 1;\n}\n}\nreturn -1;\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 3. Outro\n이진 탐색은 기본적으로 n의 개수를 줄여나감으로써 시간 복잡도를 개선해나가는 알고리즘입니다. 대부분의 탐색은 해당 값의 위치를 알고 있으면 이를 줄여나갈 수 있습니다. 하지만, 값을 알지 못할 때에는 확률적으로 이를 줄여나가는 방법밖에 없는데, 이진탐색이 이를 기본적으로 이용하는 알고리즘이라고 할 수 있습니다.\n\n다음에는 **이진 탐색 트리 알고리즘**을 알아보겠습니다.\n\n## 4. References\n- [Wiki - 이진탐색 알고리즘](https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%A7%84_%EA%B2%80%EC%83%89_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98)</code></pre></div>","id":"acc67be6-cf9e-5ad2-a8f0-774657200075","timeToRead":1}},{"node":{"excerpt":"이번에는 알고리즘을 풀면서 시간복잡도를 표기하는 Big-O 표기법에 대해 잘 알지 못해 이를 정리해보고자 합니다. Intro 개발자들을 면접보는 방법에는 여러가지가 있습니다. 그 중 가장 보편적인 것은 알고리즘 풀기 간단한 프로젝트 만들기 위…","fields":{"slug":"algorithm-알고리즘을-위한-시간복잡도-계산-방법-big-o-표기"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/algorithm.jpeg","category":"Algorithm","date":"2018.04.05","subTitle":"","tags":["Algorithm","Big-O"],"title":"[Algorithm] 알고리즘을 위한 시간복잡도 계산 방법 - Big-O 표기"},"html":"<p>이번에는 알고리즘을 풀면서 시간복잡도를 표기하는 Big-O 표기법에 대해 잘 알지 못해 이를 정리해보고자 합니다.</p>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>개발자들을 면접보는 방법에는 여러가지가 있습니다. 그 중 가장 보편적인 것은</p>\n<ol>\n<li>알고리즘 풀기</li>\n<li>간단한 프로젝트 만들기</li>\n</ol>\n<p>위 2가지 일 것입니다. 그 중에서도 더 선호되고 보편적으로 사용되는 방법은 알고리즘 풀기입니다. 알고리즘을 풀어봄으로써 <code class=\"language-text\">문제해결 능력</code>, <code class=\"language-text\">코드 작성습관</code> 등에 대한 개발적인 성향을 더 잘 파악할 수 있기 때문입니다. 어떻게 보면 스타트업들은 당장의 서비스를 개발해야하는 부분들이 많아 알고리즘 보다 서비스 개발능력 및 이해도를 많이 볼 수도 있습니다. 하지만, 대기업이나, 이미 CachCow가 있는 기업들은 기존의 코드에서 나오는 기술 부채들을 청산하기 위해 리팩토링 및 새로운 기술 도입, 알고리즘 변경 등이 보편적으로 많이 선택됩니다. 이러한 부분에서 필요한 것이 알고리즘 능력이라고 볼 수 있습니다.</p>\n<p>그렇다면, 알고리즘을 더 좋게 만들려면 무엇을 알아야 할까요? 알고리즘은 결국 수학처럼 0, 1처럼 조건에 부합하여 문제를 해결해야합니다. 그리고, 다음으로 더 빠른 해결책을 찾아야 합니다. 이를 위해 필요한 것이 바로 <code class=\"language-text\">시간 복잡도</code>입니다. 즉, 시간 복잡도란, 일정한 조건에서 해당 코드가 얼마나 빠른지를 판단할 수 있는 기준이 되는 것입니다. 다음으로 <code class=\"language-text\">공간 복잡도</code>입니다. 얼마나 많은 메모리를 차지하는가 입니다.</p>\n<p>그렇다면 우리가 알아야 할 시간 복잡도는 어떻게 알 수 있을까요? 간단하게 시간 복잡도를 계산하는 방법을 알아보겠습니다.</p>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<ul>\n<li>\n<p>알고리즘 시간 복잡도 표기법 3가지 표기법</p>\n<ul>\n<li>최상의 경우 : 오메가 표기법 (Big-Ω Notation)</li>\n<li>최악의 경우 : 빅오 표기법 (Big-O Notation)</li>\n<li>평균의 경우 : 세타 표기법 (Big-θ Notation)</li>\n</ul>\n</li>\n</ul>\n<p>가장 보편적으로 사용되는 것은 <code class=\"language-text\">Big-O 표기법</code>입니다.\nBig-O 표기법은 계수와 낮은 차수의 항을 제외시키는 방법입니다(ex: 2n²-2n+2 > O(n2)로 표기). 이런 방식으로 표현할 때, (예를 들면, 입력 크기를 무한대로 입력하여) 시간복잡도를 점근적으로 묘사한다고 말한다.</p>\n<p>Big-O 표기법 개발자들에게 최악의 경우가 중요하다는 의미를 내포하고 있어 최악의 경우를 대비하여 속도를 개선하는 것이 중요함을 알 수 있습니다.\n그 중, Big-O 표현식에 가장 큰 영향을 미치는 것은 조건 Input의 n(개수)의 단위입니다. 주어진 Input의 개수를 의미하는 n을 기반으로 명령어들의 연산이 몇번이나 실행됬는지를 숫자로 표시하는 것입니다.</p>\n<h4 id=\"--big-o-notation\" style=\"position:relative;\"><a href=\"#--big-o-notation\" aria-label=\"  big o notation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Big-O Notation?</h4>\n<blockquote>\n<p>Big-O notation is a way of converting the overall steps of an algorithm into algebraic terms, then excluding lower order constants and coefficients that don’t have that big an impact on the overall complexity of the problem.</p>\n</blockquote>\n<sub>\n    <img src='/assets/images/contents/20180404/algo/Big-O.jpg' width='100%' height='100%'>\n    - [Big-O.jpg](https://joshuajangblog.wordpress.com/2016/09/21/time_complexity_big_o_in_easy_explanation/)\n</sub>\n<h4 id=\"--대표적인-시간-복잡도\" style=\"position:relative;\"><a href=\"#--%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"  대표적인 시간 복잡도 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 대표적인 시간 복잡도</h4>\n<ol>\n<li>O(1) – 상수 시간 : 입력값 n 이 주어졌을 때, 알고리즘이 문제를 해결하는데 오직 한 단계만 거칩니다.</li>\n<li>O(log n) – 로그 시간 : 입력값 n 이 주어졌을 때, 문제를 해결하는데 필요한 단계들이 연산마다 특정 요인에 의해 줄어듭니다.</li>\n<li>O(n) – 직선적 시간 : 문제를 해결하기 위한 단계의 수와 입력값 n이 1:1 관계를 가집니다.</li>\n<li>O(n^2) – 2차 시간 : 문제를 해결하기 위한 단계의 수는 입력값 n의 제곱입니다.</li>\n<li>O(C^n) – 지수 시간 : 문제를 해결하기 위한 단계의 수는 주어진 상수값 C 의 n 제곱입니다.</li>\n</ol>\n<h5 id=\"1-o1constant-time-상수-시간\" style=\"position:relative;\"><a href=\"#1-o1constant-time-%EC%83%81%EC%88%98-%EC%8B%9C%EA%B0%84\" aria-label=\"1 o1constant time 상수 시간 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. O(1) — CONSTANT TIME (상수 시간)</h5>\n<ul>\n<li>값을 검색할 때, 객체에서 Key를 알거나 배열에서 Index를 알고 있으면 언제나 한 단계만 걸립니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> findNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"2-olog-nlogarithmic-time-로그-시간\" style=\"position:relative;\"><a href=\"#2-olog-nlogarithmic-time-%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EA%B0%84\" aria-label=\"2 olog nlogarithmic time 로그 시간 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. O(LOG n) — LOGARITHMIC TIME (로그 시간)</h5>\n<ul>\n<li>n의 개수가 늘어나면, n이 늘어난 개수보다 조금 더 연산량이 증가하고 2배를 넘지 않습니다.</li>\n<li>\n<p>배열에서 값을 찾을 때, 어느 쪽에서 시작할지를 알고 있으면 검색하는 시간이 두배로 줄어듭니다.</p>\n<ul>\n<li>ex) Binary Search</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> binarySearch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        guess <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">+</span> max<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>guess<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> guess<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>guess<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            min <span class=\"token operator\">=</span> guess <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t        max <span class=\"token operator\">=</span> guess <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> guess<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"3-on²quadratic-time\" style=\"position:relative;\"><a href=\"#3-on%C2%B2quadratic-time\" aria-label=\"3 on²quadratic time permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. O(n²) — Quadratic Time</h5>\n<ul>\n<li>중복된 반복문을 사용했을 때 걸리는 시간을 의미합니다, n의 개수의 최악 n^2 연산량을 요구합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> nestedLoopFunction <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sum_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum_array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sum_array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"4-o2nexponential-time-지수-시간\" style=\"position:relative;\"><a href=\"#4-o2nexponential-time-%EC%A7%80%EC%88%98-%EC%8B%9C%EA%B0%84\" aria-label=\"4 o2nexponential time 지수 시간 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. O(2^n) — EXPONENTIAL TIME (지수 시간)</h5>\n<ul>\n<li>\n<p>지수 시간은 보통 문제를 풀기 위해 모든 조합과 방법을 시도할 때 사용됩니다.</p>\n<ul>\n<li>ex) 길이가 n인 비밀번호를 찾아야 할 경우</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이번 시간을 통해 <code class=\"language-text\">시간 복잡도</code>를 간단하게 공부해보았습니다. 알고리즘을 풀면서 시간 복잡도를 계산하는 훈련을 하는 것은 상당히 좋은 훈련으로 보입니다. 왜냐하면, 지금 제가 프로그래밍 하는 알고리즘에 대한 절차를 생각하며 이해하고 있다는 방증이기도 하기 때문입니다. 간단하게 작성된 글이고, 좋은 글들을 참조하여 작성된 글로서 다른 분들에게도 도움이 되기를 바랍니다.</p>\n<p>앞으로 개인적으로도 알고리즘을 풀어볼 때마다 시간 복잡도를 개선하기 위한 사고로 알고리즘을 접근해볼까 합니다. 그리고, 앞으로 작성 될 알고리즘 관련 내용에 시간복잡도도 계산하여 공유하도록 노력하겠습니다.\n감사합니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki - 시간복잡도</a></li>\n<li><a href=\"https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Medium - Algorithms in plain English: time complexity and Big-O notation</a></li>\n</ul>","id":"0b79e76d-78c2-5b7a-a4e7-f0e42f102ea4","timeToRead":4}},{"node":{"excerpt":"이번에 면접을 보면서 JS가 어떻게 Single Thread로 이벤트를 처리하는지에 대한 질문을 받고, WEb Worker라는 것에 대해서 알게 되었습니다.\n간단하게 Single Thread…","fields":{"slug":"js-js는-어떻게-싱글스레드로-작동되는가"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Javascript","date":"2018.04.04","subTitle":"","tags":["Javascript","JS","EventLoop","Web Worker","Stack"],"title":"[JS] JS는 어떻게 싱글스레드로 작동되는가?"},"html":"<p>이번에 면접을 보면서 JS가 어떻게 Single Thread로 이벤트를 처리하는지에 대한 질문을 받고, WEb Worker라는 것에 대해서 알게 되었습니다.\n간단하게 Single Thread로 이벤트를 처리한다고만 생각했고 더 이를 추론할 수 없었습니다. 그래서 이를 좀 더 알아보고자 이렇게 글로 정리해볼까 합니다.</p>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>JS가 가장 많이 언급되는 특징은 <code class=\"language-text\">Single Thread</code>라는 것입니다.\nJS가 Event를 처리하면서 어떻게 동시에 Ajax 등과 같은 Request가 요청되었을 때, 이를 바로 처리하지 않고 비동기로 나중에 처리할 수 있는지에 대한 질문이었습니다. 간단하게 생각하면 Queue에서 Message관리를 통해 처리한다고 생각했습니다. 하지만, 결국 Queue를 관리하기 위해서도 Thread는 필요합니다. 결국, Main Thread가 Queue 이를 관리하고 있어야하는데, Single Thread에서 이벤트를 관리하며 Queue를 따로 관리하는 것은 불가능합니다.</p>\n<p>이를 이해하기 위해서는 JS Event Loop를 이해하면 좋을 것 같습니다.\n<sub>\n<img src='/assets/images/contents/20180404/js/js-eventloop.png'>\n</sub></p>\n<ol>\n<li>Call Stack, Heap, Queue</li>\n<li>Single Event Loop(Event Handler)</li>\n<li>Event Queue(Message Queue)</li>\n<li>Non-Blocking I/O</li>\n<li>\n<p>Promise</p>\n<ul>\n<li>Micro Message</li>\n</ul>\n</li>\n<li>Additional Runtime Network</li>\n<li>Web APIs(Web Worker...)</li>\n</ol>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<p>Javascript는 Stack, Heap, Queue 영역을 가지고 있습니다. 해당 영역 별 기능이 다르기 때문에 이를 숙지하면 Single Thread로 작동되는 원리를 더 잘 이해할 수 있습니다.</p>\n<sub>\n    <img src='/assets/images/contents/20180404/js/js-eventloop.svg'>\n</sub>\n<h4 id=\"1-event-처리를-위한-영역들\" style=\"position:relative;\"><a href=\"#1-event-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%98%81%EC%97%AD%EB%93%A4\" aria-label=\"1 event 처리를 위한 영역들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Event 처리를 위한 영역들</h4>\n<h5 id=\"--stack\" style=\"position:relative;\"><a href=\"#--stack\" aria-label=\"  stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Stack</h5>\n<ul>\n<li>Call Stack에서 해당 코드를 분석하여 어떠한 순서로 처리할지를 결정합니다.</li>\n</ul>\n<p>코드로 간단하게 예제를 만들어보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (3)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (2)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (4)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (1)</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Javascript를 경험해본 사람이라면, 아무리 delay 함수가 10ms 보다 오래 걸린다고 해도 'baz!'가 'foo!' 보다 먼저 콘솔에 찍히는 일은 없을 거라는 것을 알수 있습니다. 즉, foo 내부에서 bar를 호출하기 전에 10ms이 지났다고 해도 baz가 먼저 호출되지는 않습니다. 그러므로 위의 예제를 실행하면 콘솔에는 'bar!' > 'foo!' > 'baz!'의 순서로 찍히게 됩니다.\n<code class=\"language-text\">bar() &gt; foo() &gt; baz() 순으로 stack에서 비워집니다.</code></p>\n<h5 id=\"--heap\" style=\"position:relative;\"><a href=\"#--heap\" aria-label=\"  heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Heap</h5>\n<p>객체들은 Heap 안에 할당됩니다. Heap은 구조화되지 않은 넓은 메모리 영역을 지칭합니다. 참조되는 객체들의 주소가 이 Heap 영역에 존재합니다.</p>\n<h5 id=\"--queue\" style=\"position:relative;\"><a href=\"#--queue\" aria-label=\"  queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Queue</h5>\n<p>Javascript는 런타임은 Message Queue를 가지고 있습니다. 이 Queue는 처리될 Message들의 리스트 입니다. 각 Message에는 함수가 연관 되어 있습니다. <code class=\"language-text\">Stack이 비어 있으면 Queue에서 하나의 Message가 꺼내지고 처리 됩니다.</code> 이 처리는 연관된 함수를 호출하는 것으로 구성됩니다 (결과적으로 초기 스택 프레임을 생성합니다). <code class=\"language-text\">Message 처리는 스택이 다시 비워질 때 종료 됩니다.</code></p>\n<h4 id=\"2-event-loop에서-어떻게-처리할지-결정합니다\" style=\"position:relative;\"><a href=\"#2-event-loop%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%A0%EC%A7%80-%EA%B2%B0%EC%A0%95%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"2 event loop에서 어떻게 처리할지 결정합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Event Loop에서 어떻게 처리할지 결정합니다.</h4>\n<ol>\n<li>stack에서 코드를 분석 한후 호출 순서를 정합니다.</li>\n<li>stack의 호출 순서대로 queue에서 할당하여 처리합니다.</li>\n<li>queue에서 모든 event가 처리되면 다음 Message를 기다립니다.</li>\n<li>queue.waitForMessage 함수는 현재 아무 Message도 없다면 새로운 Message 도착을 동기적으로 기다립니다.</li>\n<li>이를 반복합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>해당 코드는 Stack에서 <code class=\"language-text\">foo() &gt; bar() &gt; baz()</code>를 순서대로 할당되기 때문에 이는 순차적으로 처리됩니다. 이를 Single Thread에서 동시적으로 처리하기 위해서는 <code class=\"language-text\">Promise 혹은 CallBack()</code>을 통한 비동기 통신을 이용해야 합니다. 이를 더 이해하기위해서는 3번의 Non-Blocking I/O를 이해하면 좋을 것 같습니다.</p>\n<h4 id=\"3-non-blocking-io를-통해-해당-message를-처리하기-위한-요청을-실행합니다\" style=\"position:relative;\"><a href=\"#3-non-blocking-io%EB%A5%BC-%ED%86%B5%ED%95%B4-%ED%95%B4%EB%8B%B9-message%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9A%94%EC%B2%AD%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"3 non blocking io를 통해 해당 message를 처리하기 위한 요청을 실행합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Non-Blocking I/O를 통해 해당 Message를 처리하기 위한 요청을 실행합니다.</h4>\n<ul>\n<li>Non-Blocking I/O을 통해 요청되면 해당 Message들을 처리(요청)하기 시작합니다.</li>\n<li>I/O 처리는 흔히 이벤트와 콜백(<code class=\"language-text\">Promise</code>)으로 처리 됩니다. 그래서 query 반환을 기다리거나 XHR 요청 반환을 기다릴 때에도 여전히 사용자 입력과 같은 다른 것을을 처리할 수 있습니다.</li>\n</ul>\n<p>Non-Blocking I/O로 요청된 Message들은 callback 되어 완료됐음을 알려주면 Queue에 Message처리가 종료되고 Stack에서 완전히 비워집니다.</p>\n<h4 id=\"4-additional-runtime-network\" style=\"position:relative;\"><a href=\"#4-additional-runtime-network\" aria-label=\"4 additional runtime network permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Additional Runtime Network</h4>\n<blockquote>\n<p>Web Worker는 script 실행을 메인 쓰레드가 아니라 백그라운드 쓰레드에서 실행할 수 있도록 해주는 기술 입니다. 이 기술을 통해 무거운 작업을 분리된 쓰레드에서 처리할 수 있으며, 이를 통해 메인 쓰레드(일반적으로 UI 쓰레드)는 멈춤, 속도저하 없이 동작할 수 있게 됩니다.</p>\n</blockquote>\n<p><code class=\"language-text\">웹 워커 또는 크로스 오리진 아이프레임은 자신의 스택, 힙, Message 큐를 가지고 있습니다.</code> 두 별개의 런타임들은 postMessage method를 통해서만 서로 통신할 수 있습니다. 이 메서드는 다른 런타임이 message 이벤트 핸들러를 등록하고 있다면 해당 런타임의 큐에 Message를 추가합니다.</p>\n<p><a href=\"https://blog.sessionstack.com/how-javascript-works-the-building-blocks-of-web-workers-5-cases-when-you-should-use-them-a547c0757f6a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Woker Best Practice - Medium</a>를 참고하면 더 많은 도움이 될 것 같습니다.</p>\n<h2 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>JS가 어떻게 Single Thread이면서도 동시적으로 작업을 수행할 수 있었는지를 이번 블로그 정리를 통해 간단한 정보들을 알 수 있었습니다. 특히, Event Loop에서 Single Thread의 끊임없이 움직이면서 해당 Event들을 관리한다는 것을 이제는 머리 속에 그릴 수 있습니다. Non-Blocking I/O를 통해 Promise를 사용해야하는 이유 등 다양한 것들도 이해할 수 있었습니다. 추가적으로는 Web Worker 등을 이용하여 UI의 흐름을 별개의 Thread(backend)로 구성하여 병렬적으로 이벤트를 처리할 수 있을 것으로 보입니다.</p>\n<p>이번 내용을 계기로 JS 개발자로서 앞으로 이를 더 학습해야 할 필요성은 확실히 느낄 수 있었습니다. 하지만, 많은 것을 참조하면서 이해하느라 부족한 것도 있었으며, 코드를 통해 여러가지를 더 확인해야 할 필요가 있다고 생각합니다. 더 학습하고 정리할 수 있는 시간을 갖도록 노력하겠습니다. 감사합니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/EventLoop\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla - Event Loop</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Web_Workers_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozila - Web Worker</a></li>\n<li><a href=\"http://meetup.toast.com/posts/89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NHN Tech Blog - Javascript와 이벤트 루프</a></li>\n</ul>","id":"eb2c6e08-928c-5ccb-8a3c-5bf51106b448","timeToRead":5}}]}},"pageContext":{"limit":5,"skip":35,"totalPages":14,"currentPage":8}}}
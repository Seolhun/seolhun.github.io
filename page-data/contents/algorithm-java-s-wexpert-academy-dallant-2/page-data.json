{"componentChunkName":"component---src-templates-post-tsx","path":"/contents/algorithm-java-s-wexpert-academy-dallant-2","webpackCompilationHash":"f8bd22dd6ef992bcbf49","result":{"data":{"markdownRemark":{"html":"<ul>\n<li><a href=\"https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV18R8FKIvoCFAZN&#x26;categoryId=AV18R8FKIvoCFAZN&#x26;categoryType=CODE\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SWexpertAcademy Dallant2</a></li>\n<li>난이도 : 5</li>\n<li>정답률 : 75%</li>\n</ul>\n<h2 id=\"1-question\"><a href=\"#1-question\" aria-label=\"1 question permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Question</h2>\n<p>초등학교 어린이를 대상으로 피아노 학원을 운영하는 김원장님은 5월 5일 어린이날을 맞이하여 학원에서 달란트 시장을 열기로 했다. 원장님은 매일 칭찬할 일이 있을 때마다 원생에게 1달란트 스티커를 나눠 주는데, 달란트 시장에서 1년 동안 모은 달란트만큼 사탕으로 교환해 주기로 했다.\n여기에, 좀더 교육적 효과를 위하여 아이디어를 냈다.</p>\n<p>10개의 달란트를 모은 원생에게 10개의 사탕을 나누어 주는 것이 아니라 10개를 3 묶음으로 나누어서 각 묶음의 곱의 개수로 사탕을 교환해 주기로 했다.\n10 달란트를 3묶음으로 나눌 경우 어떻게 나누어야 가장 많은 사탕을 교환할 수 있을까?</p>\n<p>예를 들어 1개, 1개, 8개 묶음으로 나누면 1x1x8=8 로 8개의 사탕과 교환할 수 있다. 최대는 3x3x4=36으로 36개의 사탕과 교환할 수 있다.</p>\n<p>원생마다 달란트의 개수가 다르며 원장님은 서로 다른 묶음 개수를 제시하기로 했다. 달란트 수와 묶음의 수가 주어질 때 받을 수 있는 사탕의 최대 개수를 구하는 프로그램을 작성하시오.</p>\n<ul>\n<li>\n<p>[제약 사항]</p>\n<ul>\n<li>원생이 모은 달란트의 수 N의 범위는 10 달란트 &#x3C;= N &#x3C;= 100 달란트이다.</li>\n<li>묶음의 수 P는 P &#x3C;= N로 주어진다.</li>\n</ul>\n</li>\n<li>\n<p>[입력]</p>\n<ul>\n<li>맨 위의 줄에는 전체 테스트 케이스의 수 T가 주어진다.</li>\n<li>그 다음 줄부터 T개의 테스트 케이스가 주어진다.</li>\n<li>각 테스트 케이스는 한 줄에 주어지며, 달란트 수인 양의 정수 N이 주어진 다음, 공백을 하나 둔 다음 묶음의 수인 양의 정수 P가 주어진다.</li>\n</ul>\n</li>\n<li>\n<p>[출력]</p>\n<ul>\n<li>총 T줄에 T개의 테스트 케이스 각각에 대한 답을 한 줄에 출력한다.</li>\n<li>각 줄은 ‘#x’로 시작하고 공백을 하나 둔 다음, 각 테스트 케이스에 주어진 달란트 수와 묶음 수를 이용하여 받을 수 있는 최대 사탕 수를 출력한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-code\"><a href=\"#2-code\" aria-label=\"2 code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> arg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> <span class=\"token class-name\">T</span> <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> dallant <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> bundle <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>dallant<span class=\"token punctuation\">,</span> bundle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        sc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> dallant<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> bundle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> division <span class=\"token operator\">=</span> dallant <span class=\"token operator\">/</span> bundle<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> rest <span class=\"token operator\">=</span> dallant <span class=\"token operator\">%</span> bundle<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>division<span class=\"token punctuation\">,</span> bundle <span class=\"token operator\">-</span> rest<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">pow</span><span class=\"token punctuation\">(</span>division <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> rest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> sb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token keyword\">long</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-outro\"><a href=\"#3-outro\" aria-label=\"3 outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Outro</h2>\n<p>나머지가 있을때 마다 나머지 값을 원래 값에 1씩 더해서 나눠주는 것이 가장 높은 값을 얻을 수 있는 방법입니다. 즉, 나머지 값이 있을때마다 묶음의 개수로 주어지는 값을 빼는 것<code class=\"language-text\">bundle - rest</code>를 처리하여 해당 값을 나눈 결과값 <code class=\"language-text\">divison + 1</code>처리 후 rest 값을 제곱하면 우리가 원하는 정답을 얻을 수 있습니다.</p>","fields":{"slug":"algorithm-java-s-wexpert-academy-dallant-2"},"frontmatter":{"title":"[Algorithm/Java] SWexpertAcademy Dallant2","author":"Seolhun","subTitle":"","banner":"/assets/covers/java.png","category":"Algorithm","tags":["Algorithm","Java"],"date":"2018.04.17"},"timeToRead":2}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"algorithm-java-s-wexpert-academy-dallant-2","prev":{"excerpt":"SWexpertAcademy 비밀번호 난이도 3 정답률 71 % 1. Question 평소에 잔머리가 발달하고 게으른 철수는 비밀번호를 기억하는 것이 너무 귀찮았습니다. 적어서 가지고 다니고 싶지만 누가 볼까봐 걱정입니다. 한가지 생각을 해냅니다. 0~…","html":"<ul>\n<li><a href=\"https://www.swexpertacademy.com/main/code/problem/problemDetail.do?contestProbId=AV14_DEKAJcCFAYD\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">SWexpertAcademy 비밀번호</a></li>\n<li>난이도 3</li>\n<li>정답률 71 %</li>\n</ul>\n<h2 id=\"1-question\"><a href=\"#1-question\" aria-label=\"1 question permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Question</h2>\n<ul>\n<li>평소에 잔머리가 발달하고 게으른 철수는 비밀번호를 기억하는 것이 너무 귀찮았습니다.</li>\n<li>적어서 가지고 다니고 싶지만 누가 볼까봐 걱정입니다. 한가지 생각을 해냅니다.</li>\n<li>0~9로 이루어진 번호 문자열에서 같은 번호로 붙어있는 쌍들을 소거하고 남은 번호를 비밀번호로 만드는 것입니다.</li>\n<li>번호 쌍이 소거되고 소거된 번호 쌍의 좌우 번호가 같은 번호이면 또 소거 할 수 있습니다.</li>\n<li>\n<p>[입력]</p>\n<ul>\n<li>10개의 테스트 케이스가 10줄에 걸쳐, 한 줄에 테스트 케이스 하나씩 제공된다.</li>\n<li>각 테스트 케이스는 우선 문자열이 포함하는 문자의 총 수가 주어지고, 공백을 둔 다음 번호 문자열이 공백 없이 제공된다.</li>\n<li>문자열은 0~9로 구성되며 문자열의 길이 N은 10≤N≤100이다. 비밀번호의 길이는 문자열의 길이보다 작다.</li>\n</ul>\n</li>\n<li>\n<p>[출력]</p>\n<ul>\n<li>#부호와 함께 테스트 케이스의 번호를 출력하고, 공백 문자 후 테스트 케이스에 대한 답(비밀번호)을 출력한다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-code\"><a href=\"#2-code\" aria-label=\"2 code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Solution</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> arg<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">solution</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Scanner</span> sc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Scanner</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">StringBuilder</span> sb <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> lenth <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">nextInt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token class-name\">String</span> question <span class=\"token operator\">=</span> sc<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        sc<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token class-name\">String</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> sb<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> question<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>question<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> question<span class=\"token punctuation\">.</span><span class=\"token function\">charAt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">deleteCharAt</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                sb<span class=\"token punctuation\">.</span><span class=\"token function\">deleteCharAt</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token function\">getResult</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">,</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">StringBuilder</span> sb<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">,</span> <span class=\"token class-name\">String</span> result<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">setLength</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"#\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sb<span class=\"token punctuation\">.</span><span class=\"token function\">append</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>sb<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>highlight<span class=\"token operator\">></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n\n## <span class=\"token number\">3.</span> <span class=\"token class-name\">Outro</span>\n연속된 쌍수가 있을때까지 재귀로 탐색하는 방식으로 풀었습니다<span class=\"token punctuation\">.</span> 배열을 이용하면 삭제된 곳에 최대 <span class=\"token class-name\">O</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span>의 재배치 작업이 요구되기 때문에<span class=\"token punctuation\">,</span> 해당 스트링만 조작하여 문제를 해결하였습니다<span class=\"token punctuation\">.</span>\n`<span class=\"token class-name\">StringBuilder</span><span class=\"token punctuation\">.</span>deleteCharAt`을 처음 사용하여봤습니다<span class=\"token punctuation\">.</span> 이미 문제 출력용으로 <span class=\"token class-name\">Instance</span>를 생성했기때문에<span class=\"token punctuation\">,</span> 문제 초기만 초기화해주는 로직을 추가하고 재사용하였습니다<span class=\"token punctuation\">.</span></code></pre></div>","id":"e5aa1639-7cf1-5caf-8d03-c4e6f436fa18","fields":{"slug":"algorithm-java-s-wexpert-academy-비밀번호"},"frontmatter":{"title":"[Algorithm/Java] SWexpertAcademy 비밀번호","date":"2018-04-15T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/java.png","category":"Algorithm","tags":["Algorithm","Java"]},"timeToRead":2},"next":{"excerpt":"이번에는 간단하게 코드를 보면서 와 에 차이점을 이해하고 간단히도 구해해보는 시간을 가져보겠습니다. Intro 이번에는 가장 많이 사용되는 Array와 ArrayList, LinkedList에 대해 알아보고자 합니다. 간단하게는 알고 있지만, 내부적으로 코드가 어떻게 구현되었는지 또한, 어떠한 복잡도를 가지고 있는지에 대한 명확한 인지가 부족하여 글로 작성하여 이를 확고히 하고자 합니다. Array 가장 기본적인 자료구조인 Array…","html":"<p>이번에는 간단하게 코드를 보면서 <code class=\"language-text\">ArrayList</code>와 <code class=\"language-text\">LinkedList</code>에 차이점을 이해하고 간단히도 구해해보는 시간을 가져보겠습니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>이번에는 가장 많이 사용되는 Array와 ArrayList, LinkedList에 대해 알아보고자 합니다. 간단하게는 알고 있지만, 내부적으로 코드가 어떻게 구현되었는지 또한, 어떠한 복잡도를 가지고 있는지에 대한 명확한 인지가 부족하여 글로 작성하여 이를 확고히 하고자 합니다.</p>\n<h2 id=\"array\"><a href=\"#array\" aria-label=\"array permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Array</h2>\n<p>가장 기본적인 자료구조인 Array는 번호(인덱스)와 번호에 대응하는 데이터들로 이루어진 자료 구조를 나타냅니다. 즉, 논리적 저장 순서와 물리적 저장 순서가 일치한다고 볼 수 있습니다. 따라서 인덱스(index)로 해당 원소(element)에 접근할 수 있고, Array 값의 인덱스 값을 알고 있으면 O(1)에 해당 원소로 접근할 수 있습니다. 만약, 찾고자 하는 값의 인덱스를 알지 못하면 탐색 알고리즘을 통해 탐색해야되기 때문에 O(N) 혹은 O(Log N)의 복잡도를 추가적으로 갖게됩니다.</p>\n<h4 id=\"--array의-단점\"><a href=\"#--array%EC%9D%98-%EB%8B%A8%EC%A0%90\" aria-label=\"  array의 단점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Array의 단점</h4>\n<ol>\n<li>메모리 공간의 정적인 구조 ( = 동적이지 않다.)</li>\n<li>생성시 크기를 정해주어야 하며, 해당 값을 동적으로 반영하지 않습니다.</li>\n<li>배열을 컨트롤할 수 있는 메소드가 존재하지 않는다. (Javascript의 경우는 Array([])를 구현하였기 때문에 가능합니다.)</li>\n</ol>\n<p>아래의 예제처럼 배열은 메모리 공간의 정적인 구조를 알 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// array 정의</span>\n<span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// array에 값 저장</span>\nnumbers1<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\nnumbers1<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nnumbers1<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">30</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// array의 길이 확인</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>numbers1<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 4</span></code></pre></div>\n<p>이러한 것을 개선하기 위해 나오는 구조가 Vector, ArrayList, LinkedList 등이 있습니다. 그 중 가장 많이 사용되는 ArrayList와 LinkedList를 알아보겠습니다.</p>\n<h2 id=\"arraylist\"><a href=\"#arraylist\" aria-label=\"arraylist permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>ArrayList</h2>\n<p>ArrayList는 Array와는 다르게 동적으로 메모리 공간을 처리하기 때문에 정적인 구조를 가지고 있지 않습니다. 즉, ArrayList는 삭제 또는 삽입의 과정에서는 해당 원소에 접근하여 작업을 완료한 뒤(O(1)) 전체 인덱스를 비교하여 해당 배열의 빈 자리를 shift하는 연산처리가 추가적으로 구현되어있습니다.</p>\n<p>예를 들어, List 원소 중 어느 원소를 삭제하면 Array를 기반으로 구현한 List에 존재하는 Array의 연속적인 특징이 깨지게 됩니다. 이를 위해 List는 삭제한 원소보다 큰 인덱스를 갖는 원소들을 shift해주는 연산을 추가적으로 수행합니다. 이러한 연산처리 과정이 ArrayList에서 언급되는 가장 큰 단점으로서 삽입/삭제 시마다 O(n)의 시간 복잡도를 가지게 됩니다.</p>\n<p><strong>해당 관련 사항을 자바 API 코드로 보겠습니다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token keyword\">public</span> <span class=\"token class-name\">E</span> <span class=\"token function\">remove</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">rangeCheck</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    modCount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">E</span> oldValue <span class=\"token operator\">=</span> <span class=\"token function\">elementData</span><span class=\"token punctuation\">(</span>index<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// 이 부분에서 동적인 처리를 진행합니다. 인덱스 값을 확인한 후 삭제된 인덱스부터 copy하여 해당 인덱스를 채워나갑니다.</span>\n    <span class=\"token comment\">// 마지막 인덱스 배열은 null처리하여 GC가 메모리를 수거할 수 있도록 하였습니다.</span>\n    <span class=\"token keyword\">int</span> numMoved <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> index <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>numMoved <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>elementData<span class=\"token punctuation\">,</span> index<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> elementData<span class=\"token punctuation\">,</span> index<span class=\"token punctuation\">,</span> numMoved<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    elementData<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>size<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// clear to let GC do its work</span>\n\n    <span class=\"token keyword\">return</span> oldValue<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<hr>\n<p><strong>위의 과정을 간단히 그림으로 보면 아래와 같습니다.</strong>\n<img src=\"/images/contents/20180419/array/array.png\" width=\"100%\"></p>\n<hr>\n<h4 id=\"--arraylist의-특징\"><a href=\"#--arraylist%EC%9D%98-%ED%8A%B9%EC%A7%95\" aria-label=\"  arraylist의 특징 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- ArrayList의 특징</h4>\n<ol>\n<li>index를 알고 있다면 인덱스를 통한 메모리 탐색을 통해 O(1)의 복잡도를 가지게 됩니다.</li>\n<li>수정/삭제 시 마다 해당 O(n)의 복잡도를 가진 인덱스의 수정작업이 필요하여 수정/삭제가 잦은 연산에는 적합하지 않습니다.</li>\n</ol>\n<h2 id=\"linkedlist\"><a href=\"#linkedlist\" aria-label=\"linkedlist permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>LinkedList</h2>\n<p>ArrayList에 index가 shift되는 부분에 대한 문제점을 해결하기 위한 자료구조가 바로 LinkedList입니다. 각각의 원소들은 자기 자신 다음에 어떤 원소인지에 대한 주소 값만을 기억하고 있습니다. 즉, Linked된 부분의 주소 값만 다른 값으로 바꿔주면 삭제와 삽입을 O(1) 만에 해결할 수 있습니다.</p>\n<p>하지만 LinkedList도 한 가지 문제가 있습니다. <code class=\"language-text\">원하는 위치에 삽입을 하고자 하면</code> 원하는 위치를 Search 과정에 있어서 해당 Node를 확인하면서 해당 위치를 찾아야 합니다. 이유는, LinkedList의 값은 각 이전, 이후의 값의 주소만을 참조하여 연결성을 유지하고 있기 때문입니다. 즉, 물리적인 저장소 위치와 논리적인 저장소가 일치하지 않습니다. 이 과정 때문에, 어떠한 원소를 삭제 또는 추가하고자 했을 때, 그 원소를 찾기 위해서 O(Log N)의 시간이 추가적으로 발생하게 됩니다.</p>\n<p><strong>LinkedList에서 O(n)의 시간 복잡도를 갖는 검색 코드입니다.</strong></p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">  <span class=\"token comment\">/*** Returns the (non-null) Node at the specified element index.*/</span>\n  <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> index<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// assert isElementIndex(index);</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>index <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">>></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> x <span class=\"token operator\">=</span> first<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n          x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token class-name\">Node</span><span class=\"token generics\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">E</span><span class=\"token punctuation\">></span></span> x <span class=\"token operator\">=</span> last<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">></span> index<span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n          x <span class=\"token operator\">=</span> x<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>위의 코드를 보면 해당 index의 중간값을 기준으로 탐색하기 때문에 LinkedList 자료구조는 Search에 O(Log N)의 시간복잡도를 가지며, 삽입/삭제에 대해서도 O(Log N)의 시간복잡도를 갖습니다.</p>\n<p>LinkedList가 중요한 이유는, Node를 기준으로 구현되어있기 때문에 Tree와 호환성이 좋습니다.</p>\n<h4 id=\"--linkedlist의-종류\"><a href=\"#--linkedlist%EC%9D%98-%EC%A2%85%EB%A5%98\" aria-label=\"  linkedlist의 종류 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- LinkedList의 종류</h4>\n<p>자바의 기본적인 LinkedList 구조는 <code class=\"language-text\">이중 연결 리스트</code>입니다.</p>\n<ol>\n<li>단일 연결 리스트\n단일 연결 리스트는 각 노드에 자료 공간과 한 개의 포인터 공간이 있고, 각 노드의 포인터는 다음 노드를 가리킨다.\n<img src=\"/images/contents/20180419/array/linked1.png\" width=\"100%\"></li>\n<li>이중 연결 리스트\n이중 연결 리스트의 구조는 단일 연결 리스트와 비슷하지만, 포인터 공간이 두 개가 있고 각각의 포인터는 앞의 노드와 뒤의 노드를 가리킨다.\n<img src=\"/images/contents/20180419/array/linked2.png\" width=\"100%\"></li>\n<li>원형 연결 리스트\n원형 연결 리스트는 일반적인 연결 리스트에 마지막 노드와 처음 노드를 연결시켜 원형으로 만든 구조이다.\n<img src=\"/images/contents/20180419/array/linked3.png\" width=\"100%\"></li>\n</ol>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>Array에서 ArrayList, LinkedList 등을 간단히 알아보았습니다. 각각의 특징 및 시간복잡도 등을 알아볼 수 있었습니다. 각각의 상황에 맞게 사용하는 것이 중요하지만, 그러한 상황을 만드는 이유, 즉 시간복잡도를 가지는지에 대해서 간단히 코드도 보면서 알아갔습니다. 다음 시간에는 Tree에 대해 깊게 알아보고자 합니다. 개인적으로 부족한 부분이기도 하며, BFS, DFS 알고리즘과 연관이 깊기 때문에 이 부분을 통해 부족한 부분을 채워나가려고 합니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EB%B0%B0%EC%97%B4\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wike - Array</a></li>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%97%B0%EA%B2%B0_%EB%A6%AC%EC%8A%A4%ED%8A%B8\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wike - LinkedList</a></li>\n<li><a href=\"https://opentutorials.org/module/1335/8715\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">생활코딩 - ArrayList - LinkedList</a></li>\n</ul>","id":"7c289d73-3140-55e7-b006-e4016ea5022c","fields":{"slug":"data-structure-java-array-list-vs-linked-list에-대해서-간단히-정리하기"},"frontmatter":{"title":"[DataStructure/Java] ArrayList vs LinkedList에 대해서 간단히 정리하기","date":"2018-04-19T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/java.png","category":"DataStructure","tags":["DataStructure","Java","ArrayList","LinkedList"]},"timeToRead":4}}}}
{"componentChunkName":"component---src-templates-post-tsx","path":"/contents/지인-개발자의-질문-okr은-무엇보다도-중요하고-중요하다","webpackCompilationHash":"61a3e68fdffe8301edb2","result":{"data":{"markdownRemark":{"html":"<p>아는 지인분에게 아래와 같은 질문을 받았습니다.\n참으로 어려운 질문이었습니다. 피부로 느낀것도 많고, 생각은 많았지만 정말 생각하고 누군가에게 전달할 만큼의 공감이되었는지, 스스로 위 질문에 대해서 실천하고 있는지에 대한 회고시간이 필요하다고 느꼈기 때문입니다.</p>\n<p>결론을 얘기하면, 저도 너무 부족하여 같이 실천했으면 좋겠고, 이러한 것이 아쉬웠고 같이 해결해나갔으면 좋겠다는 방향으로 의견을 공유해주었습니다.\n그러한 답변을 주는데도 한달이 넘게 지연되다가 마음의 결단을 먹고 30분 넘게 감정적으로 글을 쑤며 수정을 반복하여서 이번글을 공유해보고자 합니다.</p>\n<ol>\n<li>단위 테스트를 얼마나 실천하고 있나요?</li>\n<li>디자인 패턴을 얼마나 실천하고 있나요?</li>\n<li>회사 단위로 정립된, 혹은 추천하는 디버깅 방법론이 있나요?</li>\n<li>스프린트, 스크럼 등의 방법론을 사용하나요? 어느 상황에, 어떤 기간에, 왜, 어떻게 사용하나요?</li>\n<li>페어프로그래밍을 실천하나요? 어느 상황에, 어떤 기간에, 왜, 어떻게 실천하나요?</li>\n</ol>\n<p>질문은 이렇게 나눌 수 있을 것 같습니다. 다만, 저도 팀에 개발자였을뿐 회사의 CTO 혹은 PM, PL이 되보지 못해서 위의 자세한 설명은 못드릴것 같습니다. 질문에 대한 개인적인 경험을 배경으로 답변드리겠습니다.\n일반화로 절대 해석해주지 마시고, 아마 문화를 만들고 회사를 고를 때 참고가 되었으면 하는 바람입니다. 체크리스트도 같이 공우드리겠습니다.</p>\n<ol>\n<li>단위테스트는 매출이 있는 회사에서 작성될 확률이 높습니다. 혹은 그러한 경각심과 중요성을 아는 리더가 있는 곳에서 가능합니다. 모두들 중요하다 생각하지만, 성장하는 스타트업, 손익분기점이 넘지 못하고 투자를 단기간안에 받아 성장되어야 할 회사에서는 성과로 인정받을 수 있는 문화가 아직 문화로서 쉽게 정착되지 못하는 것 같습니다. 중요한 것은, 시간이 지나면 모든 회사가 테스트코드를 작성한다는 것입니다. 그렇다면 일찍부터 작성할 수 있는 문화를 만드는 것이 중요할 것 같습니다.\n현재 저희 회사에서도 스트리머 플랫폼에서 생기는 매출이 존재하여 다른 플랫폼 개발에 테스트코드를 작성하는 문화가 자리잡혀있습니다. 초기에는 그렇지 못했다고 들었습니다.</li>\n<li><a href=\"https://medium.com/@aeh.herman/first-steps-in-frontend-testing-with-tdd-bdd-7ddab8796ad6\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">First-steps-in-frontend-testing</a></li>\n<li>디자인패턴은 제가 프론트엔드를 담당하다보니 많이 보이진 않았습니다. 그래도, 디자인패턴을 많이 볼 수 있는 곳이 리팩토링 과정에서의 모듈화 부분에서 볼 여지가 큰데, 아쉽게도 모듈화하는 웹 팀을 제가 아직 못 보았습니다. 프론트엔드는 현재 라이브러리를 기준으로 개발이 많이 진행되기에 state와 관련한 패턴이나, 함수형 패러다임에 많이 집중되는 것 같습니다. 이러한 것에서 아쉬운것은 npm에 패키징을 이용해서 모듈화하는 회사를 많이 보지 못했습니다. github를 통해 npm에 쓰는 회사는 몇몇 보이긴 합니다.</li>\n<li>디버깅 방법론은 개발자의 역량과 연관이 있는 것 같습니다. 그 역량들을 전사적으로 끄집어 낼 수 있는 교육 혹은 공유 세션이 마련되냐가 중요한 포인트 인것 같습니다. 구글에 몇번만 검색해도 구글 개발자 도구에 대한 강의 및 좋은 글들이 많습니다. 최근에 리디북스나, 다른 몇몇 회사에서는 그러한 정보들이 보였던것 같습니다. 그러한 글을 참조하면 좋을 것 같습니다.\n개인 적으로디버깅도 좋지만 테스트코드를 통한 커버리지를 높이는게 더 큰 가치가 있고 도움이 될 것이라고 생각합니다.</li>\n<li>위 방법론들은, 일정관리와 개발자들의 집중을 위해 생겨난 방법론이라고 생각합니다. 제가 다닌 회사 모두 스프린트, 스크럼을 이용하여 주단위로 끊었습니다. 1주일, 3개월 등의 단위로 많이 끊어서 성과를 측정합니다.\n위 방법 모두 애자일한 방식으로서 빠르게 feature를 생산하는 목적을 가지고 있습니다. 가장 큰 문제 혹은 보완점은, feature의 정의와 범위를 올바르게 정하는 것이 중요하다고 생각합니다.\nfeature의 완성기준과 테스트코드 혹은 문서로서 정의가 올바르게 되어있지 않다면, 위에서 물어보셨던, 1,2번에 대한 고민이 코드에서 엿보이기 어렵다고 생각합니다. 이 문제는 5번 페어프로그래밍에 대한 문화가 얼마나 맹목적인 과정을 만드는지도 느낄 수 있습니다.</li>\n<li><a href=\"https://www.simplilearn.com/scrum-project-management-article\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Scrum Project Management – Pros and Cons</a></li>\n<li>페어프로그래밍, 문화적으로 갖고있는 회사도 많고 실질적으로 사용한다고는 하나, 빈도와 정도에 물어보면 거의 모든회사가 생각보다 잘 진행되지 않는다고 보고 있습니다.\n하지만 빈도가 중요한 것이 아니라, 페어프로그래밍을 통해 목적을 잘 달성할 수 있냐가 핵심이어야 될것 같습니다. 제 개인적인 포인트는 <code class=\"language-text\">목적에 대한 정의, 그리고 문제 해결에 대한 증명 과정</code>이 잘 이루어지는 것이라고 생각합니다. 앉아서 페어프로그래밍이 아니라, 우리가 정말 어떠한 목적을 달성하기 위해 토론하고 나누는 것이 글로 적혀있으면 가장 도움이 많이 되는 것 같습니다. 페어프로그래밍이 끝나고, 그 글을 다시 확인하면서 달성했는지 못했는지도 확인할 수 있습니다.</li>\n<li><a href=\"https://www.acquaintsoft.com/pair-programming-good-bad-ugly/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pair Programming, The Good, The Bad, The Ugly</a></li>\n</ol>\n<p><code class=\"language-text\">가장 중요한 것은 전사 OKR을 통해 성과를 정의하고, 이에 맞게 성과와 개발문화를 정착시키는 것이 중요하다는 것이 제 결론</code>입니다. 즉, 방향을 회사도 모르고 리더, 개인도 모르는데, 이를 계속 이끌어가야 한다는 것은 거의 판도라에 가깝다고 생각합니다. 그러한 권한이 개인들에게 존재하며, 팀으로서 성장에 대한 성과를 인정해준다면 도움이 될것 같습니다.</p>\n<p>몇몇 지인들과 얘기하였을 때, 이러한 회사들이 꾀 있으며, 이러한 회사들은 매출이 있기 때문에, 화려하거나 유별나게 무언가를 하지 않는다는 사실을 알았습니다. 이러한 회사들의 특징은, 복지와 성과 나머지 기타적인 것들도 수치적으로 정의되어 제공된다는 것입니다. 예를 들어, 성과금을 준다가 아니라, 연봉 10% 성과금을 준다 등에 다른 회사보다 수치적인 것이죠. 아마 이러한 수치적으로 조금씩 정의해나가며 성장하는 회사가 위의 질문(문제)들을 더 피부로 느끼고 해결하기 위해 노력하는 회사라고 생각합니다.</p>\n<hr>\n<p>아마 제 체크리스트입니다. 이러한 질의응답을 할 기회도 생각보다 많지는 않지만, 이러한 질문을 통해서 적어도 회사에서 어떻게 개발하는지를 예전보다 많이 알 수 있었습니다.\n불합격을 하든, 합격을 하든 그 회사를 가는것은 본인의 의지일 것입니다. 하지만, 적어도 기준이 있으면 좋겠다는 생각으로 만들었습니다.</p>\n<p>6개월 전에 작성된 체크리스트라서, 현재 제 눈에도 많이 개선되어야 할것이 보이지만, 공유드려봅니다.</p>\n<h1 id=\"interview-checklist-about-interviewees-company\"><a href=\"#interview-checklist-about-interviewees-company\" aria-label=\"interview checklist about interviewees company permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Interview CheckList about Interviewee's Company</h1>\n<ul>\n<li>Date :</li>\n<li>Company Name :</li>\n</ul>\n<p>FrontEnd 면접에 필요한 정보를 기록하고 이를 점수화하여 나와 회사가 매칭되는지를 스스로 체크하기 위하여 작성되었습니다.</p>\n<p>총 배점은 100점이며, 기술 70점과 문화 40점을 부여하였습니다.</p>\n<h2 id=\"frontend-tech-checklist---70점\"><a href=\"#frontend-tech-checklist---70%EC%A0%90\" aria-label=\"frontend tech checklist   70점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FrontEnd Tech CheckList - 70점</h2>\n<h3 id=\"js-20점\"><a href=\"#js-20%EC%A0%90\" aria-label=\"js 20점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>JS (20점)</h3>\n<ul>\n<li>\n<p>자바스크립트의 코드 스타일은 어떻게 유지하고 있는가? - 10점</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> EsLint</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> Prettier</li>\n<li>...</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> JavaScript의 Type에 대해서 어떻게 생각하는가? - 10점</p>\n<ul>\n<li>JavsScript와 TypeScript에 대한 견해 묻기</li>\n<li>React라면 PropType에 대한 견해 묻기</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"process-20점\"><a href=\"#process-20%EC%A0%90\" aria-label=\"process 20점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Process (20점)</h3>\n<ul>\n<li>\n<p>잘못된 코드가 반영되었다면, 이를 어떻게 해결하고 계신지? - 10점</p>\n<ul>\n<li>문제의 원인을 깊게 확인해보는지와 그러한 시간과 비용을 고려하는지에 대한...</li>\n<li>테스트 코드를 작성하고 계신지?</li>\n<li>릴리즈의 조건은 무엇인지?</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 브랜치 전략은 무엇이며?, CI/CD는 어떻게 구성하여 운영하고 있는지? - 5점</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> 코드의 직관성과 성능에 대해서 어떠한 것을 더 중요하게 생각하시는지? - 5점</p>\n<ul>\n<li>중요도에 대해서 수치로 표현해주실 수 있으신지?</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"frontend-30점\"><a href=\"#frontend-30%EC%A0%90\" aria-label=\"frontend 30점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FrontEnd (30점)</h3>\n<ul>\n<li>FrontEnd란 무엇이며, 현재 뽑고자 하는 개발자에게 무엇을 원하는지에 대해 설명해주실 수 있는지 - 10점</li>\n<li>Frontend가 일을 체계화하기 위한 전략이 무엇을 갖고 계신지? - 10점</li>\n<li>\n<p>스타일시트를 어떻게 관리하고 있는가? - 5점</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 표기법</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 파일 관리</li>\n</ul>\n</li>\n<li>\n<p>Component와 Container에서 Style은 어떻게 관리하는지? - 5점</p>\n<ul>\n<li>JS와 CSS와의 표현을 통한 한계점에 대해서 어떻게 느끼는지?</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"culture-checklist---30점\"><a href=\"#culture-checklist---30%EC%A0%90\" aria-label=\"culture checklist   30점 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Culture CheckList - 30점</h2>\n<ul>\n<li>\n<p>일이 진행되는 프로세스에 대해서 자세히 묻기 - 20점</p>\n<ul>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 문제 정의에 대해서 - 10점</li>\n<li>문제를 사전에 식별하였을 경우</li>\n<li>문제를 사전에 식별하지 못했을 경우</li>\n<li>중간에 예상치 못한 문제가 식별된 경우</li>\n<li>...</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 문제 해결에 대한 일정 산출은 어떻게 진행되는지 - 5점</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 문제 해결이 무엇이며, 문제가 해결되었다는 기준은 어떻게 결정되는지 - 5점</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 성과란 무엇이며, 성과없는 노력은 인정받아야된다고 생각하는지 토론해보기. - 5점</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> 휴가 사용은 어떻게되는지? - 5점</li>\n</ul>","fields":{"slug":"지인-개발자의-질문-okr은-무엇보다도-중요하고-중요하다"},"frontmatter":{"title":"지인 개발자의 질문, OKR은 무엇보다도 중요하고 중요하다","author":"Seolhun","subTitle":null,"banner":"/assets/covers/logo.png","category":"Story","tags":["how to","QNA","OKR","goal"],"date":"2019.08.11"},"timeToRead":5}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"지인-개발자의-질문-okr은-무엇보다도-중요하고-중요하다","prev":{"excerpt":"Intro 웹 개발을 하다보면 가장 기본적으로 사용되는 것은 Form이라는 것을 알게됩니다.\n대부분의 웹 사이트에 방문하면 회원가입, 로그인이 없는 사이트는 거의 없을 것이며, 최소한 고객문의 등에 대한 공간은 어느 사이트에나 있습니다.\n그렇다면, 개발자로서 이렇게 대중적으로 사용되는 Form을 구현하기 위해서는 어떻게 접근하는 것이 가장 좋을까요? 먼저, 현재 JS 생태계를 지배하고 있는 React와 Vue, Agnular…","html":"<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>웹 개발을 하다보면 가장 기본적으로 사용되는 것은 Form이라는 것을 알게됩니다.\n대부분의 웹 사이트에 방문하면 회원가입, 로그인이 없는 사이트는 거의 없을 것이며, 최소한 고객문의 등에 대한 공간은 어느 사이트에나 있습니다.\n그렇다면, 개발자로서 이렇게 대중적으로 사용되는 Form을 구현하기 위해서는 어떻게 접근하는 것이 가장 좋을까요?</p>\n<p>먼저, 현재 JS 생태계를 지배하고 있는 React와 Vue, Agnular(?)의 입장에서 JS 코드를 바라보아야 합니다.\n특히, UI와 관련된 모든 JS는 현재 3개의 Library(혹은 Framework)에 영향이 너무나 지대하므로, 이점을 간과할 수 없습니다.\n또한, FormBuilder를 통해 만들게 될 값도 UI에서 필요로하는 값으로만 구현될 예정이기에 어느 Library(혹은 Framework)에서도 작동해야 합니다.</p>\n<p>둘째, 우리가 사용하는 UI는 결국 HTML과 CSS, JS의 결합입니다. 그 중 이번 FormBuilder는 UI와 결합되기 전까지의 JS로 구성할 수 있는 독립적인 부분을 고려하여 설계할 것입니다.\n너무 추상적이라고 느낄 수 있습니다. 그래서 더 간단하게 얘기하면, HTML과 CSS에 사용될 값들을 JS에서 모두 다룰 수 있도록 할 예정입니다. </p>\n<p>이 부분은 앞으로 코드로 알아보도록 하겠습니다.</p>\n<h2 id=\"pre-requirement\"><a href=\"#pre-requirement\" aria-label=\"pre requirement permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre-requirement</h2>\n<ul>\n<li>\n<p>JS</p>\n<ul>\n<li>ES6</li>\n</ul>\n</li>\n</ul>\n<p>JS로만 코드를 짤 예정이며, Jest를 이용하여 테스트로 코드의 유효성을 확인해볼 것입니다.</p>\n<h2 id=\"goals\"><a href=\"#goals\" aria-label=\"goals permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goals</h2>\n<p>먼저, 이번 FromGroup을 만들기 위한 3가지 목표를 세웠습니다.</p>\n<ol>\n<li>Form Attribution 값을 호환시켜야 합니다. 간단한 속성값으로는 아래와 같습니다.</li>\n<li>\n<p>Form Attributes</p>\n<ul>\n<li>disabled</li>\n<li>reqired</li>\n<li>...</li>\n</ul>\n</li>\n</ol>\n<p>Form 관련 Attributes의 값을 JS에서 다룰 예정이며, 특히, disabled와 requried는 필수로 다룰 에정입니다.\n이유는 아래 항목인 Validation 항목과 아주 연관이 된 값이기 떄문입니다.</p>\n<ol start=\"2\">\n<li>Form에 들어가는 값들에 유효성 검사가 원활해야 합니다. 메세지도 포함해서요~</li>\n<li>\n<p>Validation</p>\n<ul>\n<li>Group Validation</li>\n<li>Form Valition  </li>\n<li>Message</li>\n</ul>\n</li>\n</ol>\n<p>Form의 핵심은 Validation에 있다고 생각하며, 편리하게 UI를 만들어주는 것이 중요합니다.\n하지만, 서버로 전송되기전에 데이터 형식에 어긋나는 부분들을 알기 쉽고, 정확하게 알려주어 데이터의 정합성을 높이는 것이 더 바람직합니다.\n이러한 부분들로 UI에 필요한 3개의 기능을 이번에 만들것입니다.</p>\n<ol start=\"3\">\n<li>Library(혹은 Framework)에 상관없는 값의 Observable한 코드</li>\n<li>Reactive</li>\n</ol>\n<p>Reactive는 코드로 보는 것이 가장 빠른 방법입니다.\n당연히 UI에 Reactive함은 State(React), data(Vue)... 등을 이용하여 쉽게 해결할 수 있습니다.(랜더링 이슈)\n하지만, JS는 Reactive한 코드를 통해 Library(혹은 Framework)에 상관없이 이를 쉽게 값이 변하는 것을 구현할 수 있습니다.</p>\n<h2 id=\"code--description\"><a href=\"#code--description\" aria-label=\"code  description permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Code &#x26; Description</h2>\n<p>이제 코드로 알아 볼 시간입니다. 위의 목적을 달성하는 것을 차례로 코드를 작성해 봅시다.</p>\n<p>FormGroup을 만들기 위해서는 먼저, Group안에 들어가는 Form의 input을 이용하여 진행 할 예정입니다.\ninput에는 text, checkbox 등이 있습니다. 먼저, text로 간단한 양식을 만들어보는 것을 진행해보겠습니다.</p>\n<p>FormBuilder를 먼저 만들어봅시다. 이후에 FormGroupBuilder를 만들어봅시다.</p>\n<h2 id=\"formbuilder\"><a href=\"#formbuilder\" aria-label=\"formbuilder permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>FormBuilder</h2>\n<p>이제 FormBuilder를 만들어 봅시다.</p>\n<p>위에서 언급했듯이 우리에게 필요한 Goal은 3가지 입니다.</p>\n<ol>\n<li>Form Attributes</li>\n<li>Validation</li>\n<li>Reactive Code</li>\n</ol>\n<p>이 3가지를 채우기 위한 변수로 무엇이 있을까요? 한번 생각해봅시다. </p>\n<h2 id=\"1-build--set-properties\"><a href=\"#1-build--set-properties\" aria-label=\"1 build  set properties permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Build &#x26; Set Properties</h2>\n<p>음. 생각해보셨나요?, 제가 선정한 값은 아래와 같습니다. </p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FORM_PROPERTIES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Values</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  hasError<span class=\"token punctuation\">:</span> <span class=\"token string\">'hasError'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span>\n  isRequired<span class=\"token punctuation\">:</span> <span class=\"token string\">'isRequired'</span><span class=\"token punctuation\">,</span>\n  requiredMessage<span class=\"token punctuation\">:</span> <span class=\"token string\">'requiredMessage'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Events</span>\n  onValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'onValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Options</span>\n  isOnCreatedValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'isOnCreatedValidation'</span><span class=\"token punctuation\">,</span>\n  isOnChangeValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'isOnChangeValidation'</span><span class=\"token punctuation\">,</span>\n  onGroupValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'onGroupValidation'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Object에 담은 이유는 2가지 입니다.</p>\n<ol>\n<li>정의 된 값만을 사용하기 위함입니다. 이는 나중에 어떠한 값이 Props에 있고 유효하게 사용할 수 있는지 쉽게 알게해줍니다.</li>\n<li>해당 값이 생성될 때 키 값을 이용하여 Props의 타입을 체크할 예정이기 때문입니다. </li>\n</ol>\n<p>2번 사항에 더 알아보겠습니다.</p>\n<p>올바른 값이 오지 않았을 때 생성되면 컨트롤 할수 없는 버그를 만들 수 있기 때문에, 해당 값의 타입이 잘못되었음을 미리 알려주는 것이 제일 좋습니다.</p>\n<p>그래서 추가로 타입을 체크하기 위한 값이 필요합니다. 해당 값은 typeof와 비교되어 사용될 값입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">REQUIRED_CHECKING_TYPES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Values</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  hasError<span class=\"token punctuation\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  isRequired<span class=\"token punctuation\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  requiredMessage<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Events</span>\n  onValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Options</span>\n  isOnCreatedValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  isOnChangeValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  onGroupValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>이 방법은 고려할게 더 많습니다. 특히, IE 9 이전 브라우저에서 function에 typeof를 사용하면 object의 값을 받게됩니다. 그러므로 해당 브라우저까지 호환시키려면 브라우저를 고려한 함수를 사용하여 값과 매칭시키는게 제일 좋을 것 같습니다.</p>\n</blockquote>\n<p>차후 더 업데이트하면서 개선되어야 하지만, 간단하게는 현재 FormBuilder의 안정성을 위해 만들어졌습니다.</p>\n<p>코드로 알아봅시다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">FormBuilder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">properties<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. 함수를 생성할 때 가장 먼저 실행되는 것이 생성자이므로 생성자에서 유효성 검사를 실시합니다.</span>\n    <span class=\"token keyword\">const</span> validtionProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_checkPropertiesValidation</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4. 주어진 값에 문제가 있다면, 어디에 문제가 있는지를 사용자(개발자)에게 알려줍니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validtionProperties<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Properties types('</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>validtionProperties<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">') are invalid</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_buildFormProperties</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">_checkPropertiesValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">properties</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2. 유효성 검사는 위에서 언급한 Object 값을 이용하여 실행시켜줍니다.</span>\n    <span class=\"token keyword\">const</span> invalidProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> isInvalidProperty <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REQUIRED_CHECKING_TYPES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 3. 주어진 변수에 값이 있다면, 해당 키를 이용하여 타입이 올바른지 확인합니다.</span>\n          <span class=\"token keyword\">const</span> propertyType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> properties<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> validType <span class=\"token operator\">=</span> <span class=\"token constant\">REQUIRED_CHECKING_TYPES</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> isMatch <span class=\"token operator\">=</span> validType <span class=\"token operator\">===</span> propertyType<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            invalidProperties<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> isMatch<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token punctuation\">:</span> isInvalidProperty<span class=\"token punctuation\">,</span>\n      keys<span class=\"token punctuation\">:</span> invalidProperties<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  _buildFormProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Values</span>\n      value<span class=\"token punctuation\">,</span>\n      hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      message <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      isRequired <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      requiredMessage<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Events</span>\n      <span class=\"token function-variable function\">onValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Options</span>\n      isOnCreatedValidation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isOnChangeValidation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      onGroupValidation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> isValidObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnCreatedValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isValidObject <span class=\"token operator\">=</span> <span class=\"token function\">onValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n      hasError<span class=\"token punctuation\">:</span> isValidObject<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">:</span> isValidObject<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n      isRequired<span class=\"token punctuation\">,</span>\n      requiredMessage<span class=\"token punctuation\">,</span>\n      onValidation<span class=\"token punctuation\">,</span>\n      isOnCreatedValidation<span class=\"token punctuation\">,</span>\n      isOnChangeValidation<span class=\"token punctuation\">,</span>\n      onGroupValidation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"2-set---get--properties--values\"><a href=\"#2-set---get--properties--values\" aria-label=\"2 set   get  properties  values permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Set - Get : Properties &#x26; Values</h2>\n<p>다음으로는 properties에 담긴 값들을 Set &#x26; Get 하기 위한 함수들입니다.</p>\n<p>중요한 것은 항상 모든 함수에는 return이 있어야한다는 것입니다. 이유는, 우리는 Reactive하게 사용하려면 함수의 연속된 호출을 위한 현재 객체를 return하는 것이 가장 바람직합니다.</p>\n<blockquote>\n<p>저도 고민이 많은데, class를 이용하는 순간 객체지향 코드로 구성하겠다는 것과 같습니다. 즉, 그 둘을 완벽하게 분리해서 코드를 구성할 수도 있겠지만, 우리가 생각하는 FormBuilder에는 객체지향 요소로 고려하면 장점이 되는 것이 많습니다. 그래서, 객체지향 내부 함수를 최대한 Functional하게 구성하는게 여기서 더 좋은 방법이라고 생각합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 5. 새로운 newProperties의 있는 값만 기존 properties를 덮어줍니다.</span>\n<span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newProperties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">,</span>\n    <span class=\"token operator\">...</span>newProperties<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 6. 값을 바꿀 때, 유효성 감사를 할 것인지에 대한 Option이 true라면 유효성 검사를 합니다.</span>\n<span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>isOnChangeValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleOnValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 8. Properties 중 우리가 필요한 값만 가져오기 위함입니다.</span>\n<span class=\"token function\">getPropertyBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propertyKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 9. 현재 갖고있는 모든 Properties를 가져오기 위함입니다.</span>\n<span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// 9. Form에 필요한 Values만 가져오기 위함입니다.</span>\n<span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> hasError<span class=\"token punctuation\">,</span> message<span class=\"token punctuation\">,</span> isRequired <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    value<span class=\"token punctuation\">,</span>\n    hasError<span class=\"token punctuation\">,</span>\n    message<span class=\"token punctuation\">,</span>\n    isRequired<span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>7번에 대한 <code class=\"language-text\">_handleOnValidation</code>은 다음 내용에서 살펴보겠습니다.</p>\n<h2 id=\"3-handlevalidation\"><a href=\"#3-handlevalidation\" aria-label=\"3 handlevalidation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. HandleValidation</h2>\n<p>Properties로 주어진 onValidation과 onGroupValidation 함수를 이용하여 FormBuilder의 유효성 Properties를 변경할 예정입니다.</p>\n<p>주의 할 점은 onValidation과 onGroupValidation의 return 값은 <code class=\"language-text\">{ hasError, message }</code> 구조를 가져야 한다는 것입니다.</p>\n<p>또한, GroupValidation은 key값을 이용하여 해당 key값과 매칭되는 부분만 값을 변경합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token comment\">// 8. 그룹 유효성 검사를 실시합니다.</span>\n  <span class=\"token function-variable function\">_handleOnGroupValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> hasError<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onGroupValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&amp;&amp;</span> hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        key<span class=\"token punctuation\">,</span>\n        hasError<span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 7. 해당 값의 유효성 감사를 실행하여 줍니다.</span>\n  <span class=\"token function-variable function\">_handleOnValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필수 값의 옵션은 쉽게 체크할 수 있어 FomrBuilder 내에 구현해놓았습니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>isRequired <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>requiredMessage <span class=\"token operator\">||</span> <span class=\"token string\">'Value is required'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// onValidation의 외부 Props값을 받았다면 클로저로 함수를 이용하여 유효성 검사값을 반영합니다.</span>\n    <span class=\"token keyword\">let</span> isValidObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 에러가 없다면, 그룹 값과 비교한 유효성 검사를 한 번 더 실시합니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValidObject<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>isValidObject<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      isValidObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleOnGroupValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>isValidObject<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<blockquote>\n<p>현재 _를 사용한 이유는 private에 대한 개념이 없는 Javascript에서 ModulePattern을 이용한 것이 아니라면 class 내에는 private을 사용할 수 없습니다. 그러므로, 해당 값을 내부에서만 사용하라는 의미로 이를 명시화하였습니다.</p>\n</blockquote>\n<p>현재 setValue의 Option에 따라 유효성 검사를 자동화할지를 결정할 수 있습니다. </p>\n<p>의문이 드실 수 있는 부분은 자동화를 하지 않았으면 값의 유효성은 변하지 않을텐데요...라고 생각할 수 있습니다. 이는 FormBuilder가 아닌, FormGroup에서 해결하려고 합니다. </p>\n<p>그렇다고 FormBuilder에서 불가능한 것은 아닙니다. 그저 _handleOnValidation을 호출하면 됩니다. 하지만, _로 private처럼 사용하기 위해 명시화하였던 함수를 외부에서 사용하는 것은 올바르지 않다고 생각합니다.</p>\n<h2 id=\"6-formbuilder-completion\"><a href=\"#6-formbuilder-completion\" aria-label=\"6 formbuilder completion permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. FormBuilder Completion</h2>\n<p>완성된 FormBuilder 코드는 아래와 같습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/* eslint-disable no-underscore-dangle */</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">FORM_PROPERTIES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  key<span class=\"token punctuation\">:</span> <span class=\"token string\">'key'</span><span class=\"token punctuation\">,</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'value'</span><span class=\"token punctuation\">,</span>\n  hasError<span class=\"token punctuation\">:</span> <span class=\"token string\">'hasError'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token punctuation\">:</span> <span class=\"token string\">'message'</span><span class=\"token punctuation\">,</span>\n  isRequired<span class=\"token punctuation\">:</span> <span class=\"token string\">'isRequired'</span><span class=\"token punctuation\">,</span>\n  requiredMessage<span class=\"token punctuation\">:</span> <span class=\"token string\">'requiredMessage'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Event/s</span>\n  onValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'onValidation'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Options</span>\n  isOnCreatedValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'isOnCreatedValidation'</span><span class=\"token punctuation\">,</span>\n  isOnChangeValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'isOnChangeValidation'</span><span class=\"token punctuation\">,</span>\n  onGroupValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'onGroupValidation'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Will be improvement considering browser</span>\n<span class=\"token keyword\">const</span> <span class=\"token constant\">REQUIRED_CHECKING_TYPES</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  hasError<span class=\"token punctuation\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  message<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  isRequired<span class=\"token punctuation\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  requiredMessage<span class=\"token punctuation\">:</span> <span class=\"token string\">'string'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Events</span>\n  onValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Options</span>\n  isOnCreatedValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  isOnChangeValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'boolean'</span><span class=\"token punctuation\">,</span>\n  onGroupValidation<span class=\"token punctuation\">:</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">FormBuilder</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">properties<span class=\"token punctuation\">,</span> options</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 1. 함수를 생성할 때 가장 먼저 실행되는 것이 생성자이므로 생성자에서 유효성 검사를 실시합니다.</span>\n    <span class=\"token keyword\">const</span> validtionProperties <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_checkPropertiesValidation</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 4. 주어진 값에 문제가 있다면, 어디에 문제가 있는지를 사용자(개발자)에게 알려줍니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>validtionProperties<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Properties types('</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>validtionProperties<span class=\"token punctuation\">.</span>keys<span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token string\">', '</span><span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">') are invalid</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_buildFormProperties</span><span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">,</span> options<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function-variable function\">_checkPropertiesValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">properties</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 2. 유효성 검사는 위에서 언급한 Object 값을 이용하여 실행시켜줍니다.</span>\n    <span class=\"token keyword\">const</span> invalidProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> isInvalidProperty <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">keys</span><span class=\"token punctuation\">(</span><span class=\"token constant\">REQUIRED_CHECKING_TYPES</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">every</span><span class=\"token punctuation\">(</span>\n      <span class=\"token punctuation\">(</span><span class=\"token parameter\">key</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>properties<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token comment\">// 3. 주어진 변수에 값이 있다면, 해당 키를 이용하여 타입이 올바른지 확인합니다.</span>\n          <span class=\"token keyword\">const</span> propertyType <span class=\"token operator\">=</span> <span class=\"token keyword\">typeof</span> properties<span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> validType <span class=\"token operator\">=</span> <span class=\"token constant\">REQUIRED_CHECKING_TYPES</span><span class=\"token punctuation\">[</span>key<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">const</span> isMatch <span class=\"token operator\">=</span> validType <span class=\"token operator\">===</span> propertyType<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isMatch<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            invalidProperties<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          <span class=\"token keyword\">return</span> isMatch<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token punctuation\">:</span> isInvalidProperty<span class=\"token punctuation\">,</span>\n      keys<span class=\"token punctuation\">:</span> invalidProperties<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  _buildFormProperties <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Values</span>\n      key<span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">,</span>\n      hasError <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      message <span class=\"token operator\">=</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      isRequired <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      requiredMessage<span class=\"token punctuation\">,</span>\n      <span class=\"token comment\">// Events</span>\n      <span class=\"token function-variable function\">onValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token string\">''</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// Options</span>\n    <span class=\"token punctuation\">{</span>\n      isOnCreatedValidation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      isOnChangeValidation <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n      onGroupValidation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> isValidObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>isOnCreatedValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      isValidObject <span class=\"token operator\">=</span> <span class=\"token function\">onValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      key<span class=\"token punctuation\">,</span>\n      value<span class=\"token punctuation\">,</span>\n      hasError<span class=\"token punctuation\">:</span> isValidObject<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">:</span> isValidObject<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span>\n      isRequired<span class=\"token punctuation\">,</span>\n      requiredMessage<span class=\"token punctuation\">,</span>\n      onValidation<span class=\"token punctuation\">,</span>\n      isOnCreatedValidation<span class=\"token punctuation\">,</span>\n      isOnChangeValidation<span class=\"token punctuation\">,</span>\n      onGroupValidation<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 8. 그룹 유효성 검사를 실시합니다.</span>\n  <span class=\"token function-variable function\">_handleOnGroupValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> key<span class=\"token punctuation\">,</span> hasError<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onGroupValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key <span class=\"token operator\">===</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>key <span class=\"token operator\">&amp;&amp;</span> hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        key<span class=\"token punctuation\">,</span>\n        hasError<span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 7. 해당 값의 유효성 감사를 실행하여 줍니다.</span>\n  <span class=\"token function-variable function\">_handleOnValidation</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">value <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 필수 값의 옵션은 쉽게 체크할 수 있어 FomrBuilder 내에 구현해놓았습니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>isRequired <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        hasError<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        message<span class=\"token punctuation\">:</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>requiredMessage <span class=\"token operator\">||</span> <span class=\"token string\">'Value is required'</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// onValidation의 외부 Props값을 받았다면 클로저로 함수를 이용하여 유효성 검사값을 반영합니다.</span>\n    <span class=\"token keyword\">let</span> isValidObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">onValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 에러가 없다면, 그룹 값과 비교한 유효성 검사를 한 번 더 실시합니다.</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>isValidObject<span class=\"token punctuation\">.</span>hasError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>isValidObject<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      isValidObject <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleOnGroupValidation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>isValidObject<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">newProperties</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>this<span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">,</span>\n      <span class=\"token operator\">...</span>newProperties<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">setValue</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">value</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">.</span>isOnChangeValidation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">_handleOnValidation</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">/**\n   * Finished Methods\n   */</span>\n  <span class=\"token function\">getPropertyBy</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">propertyKey</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">[</span>propertyKey<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getProperties</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">getValues</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> value<span class=\"token punctuation\">,</span> hasError<span class=\"token punctuation\">,</span> message <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>properties<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      value<span class=\"token punctuation\">,</span>\n      hasError<span class=\"token punctuation\">,</span>\n      message<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> FormBuilder<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이번 FormBuilder를 이용하여 ES6 기반의 많은 feature들을 이용할 수 있었습니다. 또한, 객체를 return하여 함수를 쉽게 재호출할 수 있다는 것을 알게되었습니다.</p>\n<p>FormBuilder를 만들면서 가장 좋은 것은, FormGroup과 연계되어 생각하면 좋은데 React, Vue 등등을 이용할 때 해당 Builder를 이용하여 해당 객체를 State에 주입하여 사용하면 아주 쉽게 사용할 수 있다는 것입니다.</p>\n<p>즉, 어떠한 Library(Framework)에서도 매번 함수를 새로 구성하여 쉽게 파편화되고 하드코딩되는 부분들을 구조적으로 방지할 수 있다는 것입니다.</p>\n<p>아직 개선할 점이 많이 있지만, Form을 생성하는데는 무리가 없어보입니다. 다음 FormGroup 설명과 함께 직접 만든 코드로 작동되는 페이지를 보여드리겠습니다~!!</p>\n<p>여기까지 글 읽어주셔서 감사합니다! :)</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://www.w3schools.com/html/html_form_attributes.asp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Form Attributes - w3schools</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Reference/Operators/typeof\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">typeof - MDN</a></li>\n</ul>","id":"a65e896d-0c93-5232-8b34-dae8131d1309","fields":{"slug":"js-reactive한-form-group-builder-만들어보기-part-1"},"frontmatter":{"title":"[JS] Reactive한 FormGroup Builder 만들어보기 - Part 1","date":"2019-01-26T00:00:00.000Z","author":"Seolhun","subTitle":"Create a form group.","banner":"/assets/covers/js.png","category":"JS","tags":["JS","Form","FormGroup"]},"timeToRead":9},"next":null}}}
{"componentChunkName":"component---src-templates-post-tsx","path":"/contents/js-ts-graph-ql-graph-ql-시작해보기-part-1","result":{"data":{"markdownRemark":{"html":"<p>이번에 간단히 NodeJS와 GraphQL로 회사에 직원들과 책을 관리할 수 있는 프로젝트를 만들어보았습니다.\n이와 관련하여 간단히 정리해보자 합니다.</p>\n<ul>\n<li><a href=\"https://github.com/Seolhun/example-graphql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Example-GraphQL Repositroy</a></li>\n</ul>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>GraphQL로 프로젝트를 진행하면서 개인적으로 <code class=\"language-text\">GraphQL은 객체지향</code>의 가치를 갖고 있다고 얘기하고 싶습니다. 이유는, 각각의 타입을 정의하여 재사용 할 수 있으며, 그 안에서 유혀성 검사 및 다양한 기능들을 쉽게 이용할 수 있기 때문입니다.</p>\n<p>공식 홈페이지는 아래와 같이 설명하고 있습니다.</p>\n<blockquote>\n<p>GraphQL is a query language for your API, and a server-side runtime for executing queries by using a type system you define for your data. GraphQL isn't tied to any specific database or storage engine and is instead backed by your existing code and data.</p>\n</blockquote>\n<ol>\n<li>\n<p>A query language for your API</p>\n<ul>\n<li>API 호출을 쿼리처럼 질의하여 가져옵니다.</li>\n</ul>\n</li>\n<li>\n<p>Executing queries by using a type system you define for your data</p>\n<ul>\n<li>데이터를 정의한 타입을 이용하여 쿼리를 실행합니다.</li>\n</ul>\n</li>\n<li>\n<p>GraphQL isn't tied to any specific database or storage engine</p>\n<ul>\n<li>GraphQL은 데이터베이스나 스토리지 엔진에 묶여있지 않습니다.</li>\n</ul>\n</li>\n</ol>\n<p>위의 3가지 사항은 앞으로 간단히 코드를 짜면서 확인할 수 있습니다. GraphQL을 사용하므로써 REST로 JSON을 주고받는 일반적인 형식에서 벗어날 수 있는 추가사항이 생길 수 있습니다.\n일반적인 REST처럼 GraphQL은 자원에 주소값을 부여하지 않고, Query로 이를 접근할 수 있는 HTTP Interface입니다. 즉, GraphQL은 HTTP 통신을 위한 interface 역할을 수행합니다. HTTP Request 형식을 Query로 요청하며, 해당 서버가 이를 이해할 수 있게 변환시켜 사용할 수 있는 것입니다. 그래서, Server에서 설정시에도 GraphQL-HTTP 등 다양한 Interface와 MiddleWare를 설정하여 서버가 이해할 수 있는 방법으로 바뀌는 것입니다.</p>\n<p>가장 중요한 것은 GraphQL도 모든 것을 정의해주어야 합니다. 뭐 개발자로서 당연한 얘기겠지요. 공식 홈페이지의 2번 내용에 해당하는 것입니다. 해당 Type을 다 정의하여 GraphQL이 해당 객체를 인식하고 있어야 합니다. 기존의 'REST도 해당 언어에서 Domain(Model)을 구현하면 같은거 아니야?'라고 생각할 수 있습니다. 하지만, HTTP 계층에서 데이터를 세세하게 요청할 수는 없었습니다(Request Layer에서 인식하지 못한다는 것입니다). 그냥 해당 Domain을 JSON 형식으로 전송해준 것 뿐이죠.</p>\n<p>간단한 예를 들어, Github API를 이용해보시면 알 수 있습니다. Github에서 REST로 구성된 API.V3를 호출하면, 필요없는 데이터가 모두 Response로 나옵니다. 이에 반해 GraphQL API.V4은 필요한 데이터만 요청하여 가져올 수 있습니다.</p>\n<p>이제 간단히 GraphQL을 사용해보겠습니다.</p>\n<h5 id=\"1-내용순서\" style=\"position:relative;\"><a href=\"#1-%EB%82%B4%EC%9A%A9%EC%88%9C%EC%84%9C\" aria-label=\"1 내용순서 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 내용순서</h5>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">1. Express 서버 설정하기\n2. GraphQL 시작하기\n3. Schema와 Type이란?\n4. Query와 Mutation이란?\n5. Test</code></pre></div>\n<h5 id=\"2-dev-environments\" style=\"position:relative;\"><a href=\"#2-dev-environments\" aria-label=\"2 dev environments permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Dev Environments</h5>\n<ul>\n<li>\n<p>Language</p>\n<ul>\n<li>NodeJS 8.9.4</li>\n<li>Typescript 2.7.1</li>\n</ul>\n</li>\n<li>\n<p>IDE</p>\n<ul>\n<li>Visual Studio Code</li>\n</ul>\n</li>\n</ul>\n<p>이번 설명은 NodeJS와 Typescript를 사용하였습니다. 개인적으로 JS는 거의 Typescript로 사용하고 있습니다. 객체의 타입을 정의하는 것에 강한 집념을 가지고 있습니다.\n그래서 Java도 좋아하지만, Script 언어의 매력도 있고 Java보다 훨씬 자유롭고 편리해서 JS를 좋아합니다.</p>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<h5 id=\"1-express-서버-설정하기\" style=\"position:relative;\"><a href=\"#1-express-%EC%84%9C%EB%B2%84-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"1 express 서버 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Express 서버 설정하기</h5>\n<p>기본 패키지를 설치하겠습니다. Express Framework를 사용할 예정입니다. 그리고, 타입스크립트를 사용하므로써 타입이 정의된 Package도 같이 설치하여줍니다.</p>\n<ol>\n<li>npm install -g typescript</li>\n<li>npm init -y</li>\n<li>tsc --init</li>\n<li>strict는 제거해줍니다.</li>\n<li>npm install --save express express-graphql graphql typescript ts-node json-server axios</li>\n<li>npm install --save-dev @types/express @types/express-graphql @types/graphql</li>\n</ol>\n<p>마지막으로 index.ts 파일을 만들어주고 package.json에 있는 main 부분을 <code class=\"language-text\">&quot;main&quot;: &quot;app/index.ts&quot;</code>로 바꾸어주고, scripts부분에 <code class=\"language-text\">&quot;dev&quot;: &quot;ts-node app/index.ts&quot;</code>를 작성하여 줍니다.\n이렇게하여 GraphQL에 필요한 서버 패키지 설정이 끝났습니다.</p>\n<h5 id=\"2-graphql-시작하기\" style=\"position:relative;\"><a href=\"#2-graphql-%EC%8B%9C%EC%9E%91%ED%95%98%EA%B8%B0\" aria-label=\"2 graphql 시작하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. GraphQL 시작하기</h5>\n<ol>\n<li>간단하게 서버를 실행시킬 코드를 작성하여 줍니다. root에 <code class=\"language-text\">app/index.ts</code> 파일을 만들어줍니다.</li>\n<li>\n<p>Express와 GraphQL 설정을 같이 작성하였습니다.</p>\n<ul>\n<li>GraphQL를 사용하기 위해서는 <code class=\"language-text\">API를 쿼리로 호출했을 때, 무엇을 전송해줄 것인가? 즉, schema를 정의해야합니다.</code></li>\n<li>아래 코드에서 해당 schema 안에 앞으로 GraphQL 설정에 필요한 내용들이 들어갑니다.</li>\n</ul>\n</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> express <span class=\"token keyword\">from</span> <span class=\"token string\">'express'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> graphqlHTTP <span class=\"token keyword\">from</span> <span class=\"token string\">'express-graphql'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'./routes/graphql/schema'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// GraphQL</span>\napp<span class=\"token punctuation\">.</span><span class=\"token function\">use</span><span class=\"token punctuation\">(</span>\n  <span class=\"token string\">'/graphql'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function\">graphqlHTTP</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">request</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n      schema<span class=\"token punctuation\">,</span>\n      graphiql<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// GraphQL 쿼리를 테스트할 수 있는 Dev Tool입니다.</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Run Server</span>\napp\n  <span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">7000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'=========================app.ts==========================='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Listening the server 7000'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'===================================================='</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">err</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>현재 에러가 나있는 부분을 3,4번의 과정을 통해 해결해나가겠습니다.</p>\n<h5 id=\"3-schema와-type이란\" style=\"position:relative;\"><a href=\"#3-schema%EC%99%80-type%EC%9D%B4%EB%9E%80\" aria-label=\"3 schema와 type이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Schema와 Type이란?</h5>\n<p>GraphQL에 Schema는 간단하게 <code class=\"language-text\">GraphQL이 인식할 수 있는 구조</code>를 말합니다. GraphQL은 강타입 구조를 가지고 있어 해당 구조 안에 다양한 Type들을 정의하여야만 사용할 수 있습니다.\nGraphQL Query 내에서 타입체크 및 유효성 검사 기능도 있어 해당 구조 안에 정의에 맞게 사용하여야 합니다. 기본적으로 사용되는 Type은 Query와 Muation Type입니다.</p>\n<ul>\n<li>간단하게 schema 코드를 작성해보겠습니다. 경로는 <code class=\"language-text\">/app/routes/graphql/schema/index.ts</code> 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLSchema<span class=\"token punctuation\">,</span> printSchema <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> mutation <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../mutation'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../query'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">function</span> <span class=\"token function\">getSchemaString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">printSchema</span><span class=\"token punctuation\">(</span>schema<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLSchema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  query<span class=\"token punctuation\">,</span>\n  mutation<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> schema <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<p>Query와 Mutation에는 기본적으로 Domain과 같은 객체 Type을 지정해주어야합니다.</p>\n<ul>\n<li>간단하게 객체 type 코드를 작성해보겠습니다. 해당 파일의 경로는 <code class=\"language-text\">/app/routes/graphql/type/index.ts</code> 입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLList<span class=\"token punctuation\">,</span> GraphQLObjectType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLInt<span class=\"token punctuation\">,</span> GraphQLString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql/type/scalars'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UserType <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLObjectType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span>\n  fields<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    birth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> UserType <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>schema 안에는 기본적으로 사용되는 query와 mutation이 들어갑니다. 다음에는 query와 mutation을 정의하겠습니다.</p>\n<h5 id=\"4-query와-mutation이란\" style=\"position:relative;\"><a href=\"#4-query%EC%99%80-mutation%EC%9D%B4%EB%9E%80\" aria-label=\"4 query와 mutation이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Query와 Mutation이란?</h5>\n<p>query와 mutation은 헷갈릴 수 있지만, 둘다 Query입니다. 하지만, 둘의 명확한 차이점이 있습니다.</p>\n<p>둘의 가장 근본적인 차이는 <code class=\"language-text\">Query 필드는 병렬로 실행되지만, Mutation 필드는 순차적으로 실행됩니다.</code> 즉, 해당 Query 안에서 여러개의 요청이 주어지면 Mutation은 순차적으로 프로세스를 완료시킵니다. 그렇기 때문에 query를 사용하여 데이터를 변이시키는 작업은 적합하지 않습니다. 병렬로 실행되어 원하는 프로세스로 작동되지 않기 때문입니다.</p>\n<p>이제 간단하게 query와 mutation 코드를 작성해볼 예정입니다. 들어가기에 앞서 제한사항을 말씀드리겠습니다. GraphQL은 database나 storage에 묶여있지 않습니다. 반대로, 해당 데이터가 쿼리되는 과정을 보기위해서는 데이터베이스나 스토리지와 묶여있는 코드를 작성해야합니다. 그렇게되면 설명할게 늘어나므로, <code class=\"language-text\">json-server</code>를 간단하게 사용하여 <code class=\"language-text\">axios</code>로 해당 json-server의 있는 데이터를 호출해서 사용하도록 하겠습니다.</p>\n<ol>\n<li>root 경로에 <code class=\"language-text\">db.json</code> 파일을 만들어 줍니다.</li>\n<li>package.json에 <code class=\"language-text\">&quot;json-server&quot;: &quot;json-server --watch db.json&quot;</code>를 넣어줍니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token property\">\"users\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1990-01-26\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"seolhun@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Seolhun\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1980-11-11\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"mark@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Mark\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1977-03-15\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"john@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"John\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1987-07-17\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"gabriel@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Gabriel\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1983-05-16\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chris@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chris\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1990-01-26\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"chan@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Chan\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1994-02-28\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"solomon@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Solomon\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1992-04-05\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"ruby@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Ruby\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">9</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1983-10-10\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"python@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"Python\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span> <span class=\"token property\">\"id\"</span><span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"birth\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"1985-05-25\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"email\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"james@seolhun.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token property\">\"name\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"James\"</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>간단하게 <code class=\"language-text\">query</code> 코드를 작성해보겠습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLFieldConfigMap<span class=\"token punctuation\">,</span> GraphQLList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLInt<span class=\"token punctuation\">,</span> GraphQLString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql/type/scalars'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UserType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../type/index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UserQuery<span class=\"token operator\">:</span> GraphQLFieldConfigMap<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  user<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> UserType<span class=\"token punctuation\">,</span>\n    args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:3000/users/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  users<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLList</span><span class=\"token punctuation\">(</span>UserType<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/users'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> UserQuery <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<ul>\n<li>간단하게 <code class=\"language-text\">mutation</code> 코드를 작성해보겠습니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLFieldConfigMap<span class=\"token punctuation\">,</span> GraphQLNonNull <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> GraphQLInt<span class=\"token punctuation\">,</span> GraphQLString <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'graphql/type/scalars'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> UserType <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../type/index'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'../../../types'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">import</span> axios <span class=\"token keyword\">from</span> <span class=\"token string\">'axios'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> UserMutation<span class=\"token operator\">:</span> GraphQLFieldConfigMap<span class=\"token operator\">&lt;</span><span class=\"token builtin\">any</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">any</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Basic</span>\n  addUser<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> UserType<span class=\"token punctuation\">,</span>\n    args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      birth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">GraphQLNonNull</span><span class=\"token punctuation\">(</span>GraphQLString<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> email<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> birth <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">post</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:3000/users'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        email<span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">,</span>\n        birth<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  editUser<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> UserType<span class=\"token punctuation\">,</span>\n    args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      birth<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> email<span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">,</span> birth <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token function\">patch</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:3000/users/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        email<span class=\"token punctuation\">,</span>\n        name<span class=\"token punctuation\">,</span>\n        birth<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">as</span> User<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  deleteUser<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> UserType<span class=\"token punctuation\">,</span>\n    args<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      id<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLInt <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n      email<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">type</span><span class=\"token operator\">:</span> GraphQLString <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token keyword\">async</span> <span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">parent<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> id<span class=\"token punctuation\">,</span> email <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> User<span class=\"token punctuation\">,</span> context<span class=\"token punctuation\">,</span> info</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> result <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span><span class=\"token keyword\">delete</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">http://localhost:3000/</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>id<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> UserMutation <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<hr>\n<ul>\n<li>Type을 미리 정의해두면 여러 곳에서 객체 안의 값을 제한하여 개발속도 향상에 좋은 효과를 거둘 수 있습니다.\n코드에서 <code class=\"language-text\">types</code>에 들어가있는 코드 내용입니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">User</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">number</span><span class=\"token punctuation\">;</span>\n  email<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n  birth<span class=\"token operator\">?</span><span class=\"token operator\">:</span> <span class=\"token builtin\">string</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token punctuation\">{</span> User <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"5-test\" style=\"position:relative;\"><a href=\"#5-test\" aria-label=\"5 test permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Test</h5>\n<p>이렇게 작성되었으면 처음 설정하였던 <code class=\"language-text\">graphiql</code>를 이용하여 테스트해보겠습니다. <a href=\"http://localhost:7000/graphql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://localhost:7000/graphql</a></p>\n<ol>\n<li>Query 사용해보기 - 1</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">query {\n  users {\n    id\n    birth\n    email\n    name\n  }\n}</code></pre></div>\n<ol>\n<li>Query 사용해보기 - 2</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">query {\n  users {\n    id\n    birth\n    email\n    name\n  }\n\n  employees: users {\n    id\n    birth\n    email\n    name\n  }\n}</code></pre></div>\n<hr>\n<ol start=\"2\">\n<li>Mutation 사용해보기 - 1</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">mutation {\n  addUser(name: &quot;Ronaldo&quot;, email: &quot;ronaldo@seolhun.com&quot;, birth: &quot;1990-07-21&quot;) {\n    id\n    name\n    email\n    birth\n  }\n}</code></pre></div>\n<ol start=\"2\">\n<li>Mutation 사용해보기 - 2</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">mutation {\n  addUser(name: &quot;Ronaldo&quot;, email: &quot;ronaldo@seolhun.com&quot;, birth: &quot;1990-07-21&quot;) {\n    id\n    name\n    email\n    birth\n  }\n\n  editUser(id: 11, name: &quot;Messi&quot;) {\n    id\n    name\n    email\n    birth\n  }\n}</code></pre></div>\n<ol start=\"4\">\n<li>기타 Fragment 사용해보기.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"gql\"><pre class=\"language-gql\"><code class=\"language-gql\">query {\n  users {\n    ...onlyUK\n  }\n}\n\nfragment onlyUK on User {\n  id\n  email\n}</code></pre></div>\n<h2 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이렇게하여 간단하게 GraphQL을 체험해보았습니다. schema 구성부터 query, mutation 등등 기본적인 것을 코드로 작성해보면서 GraphQL이란 것을 간단히 알 수 있었을 것이라고 생각합니다. Query의 장점은 <code class=\"language-text\">서로가 원하는 것을 약속한 데로 이행한다.</code>라고 생각합니다. 기존의 모든 데이터를 받는 것보다 Query 내에서 해당 객체들을 조정할 수 있는 부분이 참 긍정적으로 보여집니다. 또한, 해당 Query들을 잘 구성하면 재사용이 쉽게 가능할 수 있습니다.</p>\n<p>문제점으로는 해당 객체들을 변경하는 부분들이 연속적으로 일어나 변경되는 부분에서의 큰 어려움이 있을 것이라고 생각합니다. 또한 Resolver를 통해 통신되기 때문에 속도가 생각보다 느려집니다. 속도 개선 오픈소스는 페이스북에서 <a href=\"https://github.com/facebook/dataloader\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dataloader</a>이란 것이 있습니다.</p>\n<p>추가적으로, 페이스북에서는 GraphQL의 속도문제를 해결하기 위해, 대부분의 데이터를 Cache Storage에 적재시켜 Cache에서 바로 꺼내쓸 수 있게 만든다는 얘기도 들었습니다. DB에서 계속 호출하여 네트워크와 서버비용을 감당하는 것보다, Cache를 통해 서버 비용만을 감당하는 것이 더 합리적일 수도 있다라는 이야기로 보입니다.</p>\n<p>이 외에도 GraphQL을 실무적으로 더 접근하면 권한문제를 해결해야 합니다. 요청하는 데이터의 Depth 제한, 권한에 따른 Field 값 제한 등 다양한 부분을 해결해주어야 합니다. 이 또한 오픈소스를 통해 개발들이 일어나고 있으니 블로그나 오픈소스를 찾아보시면 도움이 될 것이라고 생각합니다.</p>\n<p>부족하지만, 간단하게 GraphQL에 대해서 알아보는 시간은 여기까지하겠습니다. 이상한 부분이나 부족한 부분은 글로 써주시면 감사합니다.\n<code class=\"language-text\">다음 블로그는 GraphQL을 수치적으로 접근하여 어떠한 성능이 나오는지와 개선이 일어나는지를 알아보겠습니다.</code></p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"http://graphql.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">GraphQL.org</a></li>\n<li><a href=\"https://github.com/graphql/express-graphql\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Express-GraphQL</a></li>\n</ul>","fields":{"slug":"js-ts-graph-ql-graph-ql-시작해보기-part-1"},"frontmatter":{"title":"[JS/TS/GraphQL] GraphQL 시작해보기 - Part 1","author":"Seolhun","subTitle":"","banner":"/assets/covers/js.png","category":"GraphQL","tags":["Javascript","Typescript","NodeJS","GraphQL"],"date":"2018.04.03"},"excerpt":"이번에 간단히 NodeJS와 GraphQL로 회사에 직원들과 책을 관리할 수 있는 프로젝트를 만들어보았습니다.\n이와 관련하여 간단히 정리해보자 합니다. Example-GraphQL Repositroy Intro GraphQL…","timeToRead":8}},"pageContext":{"slug":"js-ts-graph-ql-graph-ql-시작해보기-part-1","prev":{"excerpt":"저번 시간에 ClosestNumbers 문제를 풀어보았습니다.\n이번에는 FindTheMedian 알고리즘을 풀어보겠습니다.\n주어진 배열 값 안에서 배열의 가운데 값을 찾는 알고리즘입니다.\nHackerRank - Sort - FindTheMedian 1. Question Sample Input Sample Output 2. Process…","fields":{"slug":"algorithm-javascript-hacker-rank-find-the-median"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Algorithm","date":"2018.03.26","subTitle":"","tags":["Algorithm","Javascript","HackerRank","Sort","FindTheMedian"],"title":"[Algorithm/Javascript] HackerRank - FindTheMedian"},"html":"<p>저번 시간에 ClosestNumbers 문제를 풀어보았습니다.\n이번에는 FindTheMedian 알고리즘을 풀어보겠습니다.\n주어진 배열 값 안에서 배열의 가운데 값을 찾는 알고리즘입니다.\n<a href=\"https://www.hackerrank.com/challenges/find-the-median/problem\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HackerRank - Sort - FindTheMedian</a></p>\n<h2 id=\"1-question\" style=\"position:relative;\"><a href=\"#1-question\" aria-label=\"1 question permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Question</h2>\n<ul>\n<li>\n<p>Sample Input</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">7\n0 1 2 4 6 5 3</code></pre></div>\n</li>\n<li>\n<p>Sample Output</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">3</code></pre></div>\n</li>\n</ul>\n<h2 id=\"2-process\" style=\"position:relative;\"><a href=\"#2-process\" aria-label=\"2 process permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Process</h2>\n<ul>\n<li>문제 사이트에서 문제를 자세히 보시면 주어지는 수의 개수는 항상 홀수라고 적혀있습니다.</li>\n<li>배열 최대, 최소 값에서 중간값이 아닌, 배열에서의 중간 값을 구하는 것입니다.</li>\n<li>배열을 정렬합니다.</li>\n<li>\n<p>배열의 길이를 구한 후 2로 나누어줍니다.</p>\n<ul>\n<li>길이가 항상 홀수이기 때문에 중간값은 내림해줍니다.(배열의 인덱스는 0부터 시작하기 때문).</li>\n</ul>\n</li>\n<li>정렬된 배열에서 해당 길이를 인덱스로 사용하여 배열 값을 가져옵니다.</li>\n<li>값을 출력합니다.</li>\n</ul>\n<h2 id=\"3-code\" style=\"position:relative;\"><a href=\"#3-code\" aria-label=\"3 code permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Code</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">findMedian</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    arr<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">a<span class=\"token punctuation\">,</span> b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">></span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> answer_index <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">.</span>length<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> arr<span class=\"token punctuation\">[</span>answer_index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">var</span> n <span class=\"token operator\">=</span> <span class=\"token function\">parseInt</span><span class=\"token punctuation\">(</span><span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr <span class=\"token operator\">=</span> <span class=\"token function\">readLine</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    arr <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>Number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">var</span> result <span class=\"token operator\">=</span> <span class=\"token function\">findMedian</span><span class=\"token punctuation\">(</span>arr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    process<span class=\"token punctuation\">.</span>stdout<span class=\"token punctuation\">.</span><span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span> <span class=\"token operator\">+</span> result <span class=\"token operator\">+</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","id":"b05920e3-cce7-5790-a03a-9ac3424b2d5a","timeToRead":1},"next":{"excerpt":"이번에 면접을 보면서 JS가 어떻게 Single Thread로 이벤트를 처리하는지에 대한 질문을 받고, WEb Worker라는 것에 대해서 알게 되었습니다.\n간단하게 Single Thread로 이벤트를 처리한다고만 생각했고 더 이를 추론할 수 없었습니다. 그래서 이를 좀 더 알아보고자 이렇게 글로 정리해볼까 합니다. Intro JS가 가장 많이 언급되는 특징은 라는 것입니다.\nJS가 Event를 처리하면서 어떻게 동시에 Ajax…","fields":{"slug":"js-js는-어떻게-싱글스레드로-작동되는가"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Javascript","date":"2018.04.04","subTitle":"","tags":["Javascript","JS","EventLoop","Web Worker","Stack"],"title":"[JS] JS는 어떻게 싱글스레드로 작동되는가?"},"html":"<p>이번에 면접을 보면서 JS가 어떻게 Single Thread로 이벤트를 처리하는지에 대한 질문을 받고, WEb Worker라는 것에 대해서 알게 되었습니다.\n간단하게 Single Thread로 이벤트를 처리한다고만 생각했고 더 이를 추론할 수 없었습니다. 그래서 이를 좀 더 알아보고자 이렇게 글로 정리해볼까 합니다.</p>\n<h2 id=\"intro\" style=\"position:relative;\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>JS가 가장 많이 언급되는 특징은 <code class=\"language-text\">Single Thread</code>라는 것입니다.\nJS가 Event를 처리하면서 어떻게 동시에 Ajax 등과 같은 Request가 요청되었을 때, 이를 바로 처리하지 않고 비동기로 나중에 처리할 수 있는지에 대한 질문이었습니다. 간단하게 생각하면 Queue에서 Message관리를 통해 처리한다고 생각했습니다. 하지만, 결국 Queue를 관리하기 위해서도 Thread는 필요합니다. 결국, Main Thread가 Queue 이를 관리하고 있어야하는데, Single Thread에서 이벤트를 관리하며 Queue를 따로 관리하는 것은 불가능합니다.</p>\n<p>이를 이해하기 위해서는 JS Event Loop를 이해하면 좋을 것 같습니다.\n<sub>\n<img src='/assets/images/contents/20180404/js/js-eventloop.png'>\n</sub></p>\n<ol>\n<li>Call Stack, Heap, Queue</li>\n<li>Single Event Loop(Event Handler)</li>\n<li>Event Queue(Message Queue)</li>\n<li>Non-Blocking I/O</li>\n<li>\n<p>Promise</p>\n<ul>\n<li>Micro Message</li>\n</ul>\n</li>\n<li>Additional Runtime Network</li>\n<li>Web APIs(Web Worker...)</li>\n</ol>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<p>Javascript는 Stack, Heap, Queue 영역을 가지고 있습니다. 해당 영역 별 기능이 다르기 때문에 이를 숙지하면 Single Thread로 작동되는 원리를 더 잘 이해할 수 있습니다.</p>\n<sub>\n    <img src='/assets/images/contents/20180404/js/js-eventloop.svg'>\n</sub>\n<h4 id=\"1-event-처리를-위한-영역들\" style=\"position:relative;\"><a href=\"#1-event-%EC%B2%98%EB%A6%AC%EB%A5%BC-%EC%9C%84%ED%95%9C-%EC%98%81%EC%97%AD%EB%93%A4\" aria-label=\"1 event 처리를 위한 영역들 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Event 처리를 위한 영역들</h4>\n<h5 id=\"--stack\" style=\"position:relative;\"><a href=\"#--stack\" aria-label=\"  stack permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Stack</h5>\n<ul>\n<li>Call Stack에서 해당 코드를 분석하여 어떠한 순서로 처리할지를 결정합니다.</li>\n</ul>\n<p>코드로 간단하게 예제를 만들어보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (3)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (2)</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (4)</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// (1)</span>\n<span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Javascript를 경험해본 사람이라면, 아무리 delay 함수가 10ms 보다 오래 걸린다고 해도 'baz!'가 'foo!' 보다 먼저 콘솔에 찍히는 일은 없을 거라는 것을 알수 있습니다. 즉, foo 내부에서 bar를 호출하기 전에 10ms이 지났다고 해도 baz가 먼저 호출되지는 않습니다. 그러므로 위의 예제를 실행하면 콘솔에는 'bar!' > 'foo!' > 'baz!'의 순서로 찍히게 됩니다.\n<code class=\"language-text\">bar() &gt; foo() &gt; baz() 순으로 stack에서 비워집니다.</code></p>\n<h5 id=\"--heap\" style=\"position:relative;\"><a href=\"#--heap\" aria-label=\"  heap permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Heap</h5>\n<p>객체들은 Heap 안에 할당됩니다. Heap은 구조화되지 않은 넓은 메모리 영역을 지칭합니다. 참조되는 객체들의 주소가 이 Heap 영역에 존재합니다.</p>\n<h5 id=\"--queue\" style=\"position:relative;\"><a href=\"#--queue\" aria-label=\"  queue permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Queue</h5>\n<p>Javascript는 런타임은 Message Queue를 가지고 있습니다. 이 Queue는 처리될 Message들의 리스트 입니다. 각 Message에는 함수가 연관 되어 있습니다. <code class=\"language-text\">Stack이 비어 있으면 Queue에서 하나의 Message가 꺼내지고 처리 됩니다.</code> 이 처리는 연관된 함수를 호출하는 것으로 구성됩니다 (결과적으로 초기 스택 프레임을 생성합니다). <code class=\"language-text\">Message 처리는 스택이 다시 비워질 때 종료 됩니다.</code></p>\n<h4 id=\"2-event-loop에서-어떻게-처리할지-결정합니다\" style=\"position:relative;\"><a href=\"#2-event-loop%EC%97%90%EC%84%9C-%EC%96%B4%EB%96%BB%EA%B2%8C-%EC%B2%98%EB%A6%AC%ED%95%A0%EC%A7%80-%EA%B2%B0%EC%A0%95%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"2 event loop에서 어떻게 처리할지 결정합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Event Loop에서 어떻게 처리할지 결정합니다.</h4>\n<ol>\n<li>stack에서 코드를 분석 한후 호출 순서를 정합니다.</li>\n<li>stack의 호출 순서대로 queue에서 할당하여 처리합니다.</li>\n<li>queue에서 모든 event가 처리되면 다음 Message를 기다립니다.</li>\n<li>queue.waitForMessage 함수는 현재 아무 Message도 없다면 새로운 Message 도착을 동기적으로 기다립니다.</li>\n<li>이를 반복합니다.</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'foo!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bar!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">baz</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">delay</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'baz!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>foo<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>bar<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">setTimeout</span><span class=\"token punctuation\">(</span>baz<span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>해당 코드는 Stack에서 <code class=\"language-text\">foo() &gt; bar() &gt; baz()</code>를 순서대로 할당되기 때문에 이는 순차적으로 처리됩니다. 이를 Single Thread에서 동시적으로 처리하기 위해서는 <code class=\"language-text\">Promise 혹은 CallBack()</code>을 통한 비동기 통신을 이용해야 합니다. 이를 더 이해하기위해서는 3번의 Non-Blocking I/O를 이해하면 좋을 것 같습니다.</p>\n<h4 id=\"3-non-blocking-io를-통해-해당-message를-처리하기-위한-요청을-실행합니다\" style=\"position:relative;\"><a href=\"#3-non-blocking-io%EB%A5%BC-%ED%86%B5%ED%95%B4-%ED%95%B4%EB%8B%B9-message%EB%A5%BC-%EC%B2%98%EB%A6%AC%ED%95%98%EA%B8%B0-%EC%9C%84%ED%95%9C-%EC%9A%94%EC%B2%AD%EC%9D%84-%EC%8B%A4%ED%96%89%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"3 non blocking io를 통해 해당 message를 처리하기 위한 요청을 실행합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Non-Blocking I/O를 통해 해당 Message를 처리하기 위한 요청을 실행합니다.</h4>\n<ul>\n<li>Non-Blocking I/O을 통해 요청되면 해당 Message들을 처리(요청)하기 시작합니다.</li>\n<li>I/O 처리는 흔히 이벤트와 콜백(<code class=\"language-text\">Promise</code>)으로 처리 됩니다. 그래서 query 반환을 기다리거나 XHR 요청 반환을 기다릴 때에도 여전히 사용자 입력과 같은 다른 것을을 처리할 수 있습니다.</li>\n</ul>\n<p>Non-Blocking I/O로 요청된 Message들은 callback 되어 완료됐음을 알려주면 Queue에 Message처리가 종료되고 Stack에서 완전히 비워집니다.</p>\n<h4 id=\"4-additional-runtime-network\" style=\"position:relative;\"><a href=\"#4-additional-runtime-network\" aria-label=\"4 additional runtime network permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Additional Runtime Network</h4>\n<blockquote>\n<p>Web Worker는 script 실행을 메인 쓰레드가 아니라 백그라운드 쓰레드에서 실행할 수 있도록 해주는 기술 입니다. 이 기술을 통해 무거운 작업을 분리된 쓰레드에서 처리할 수 있으며, 이를 통해 메인 쓰레드(일반적으로 UI 쓰레드)는 멈춤, 속도저하 없이 동작할 수 있게 됩니다.</p>\n</blockquote>\n<p><code class=\"language-text\">웹 워커 또는 크로스 오리진 아이프레임은 자신의 스택, 힙, Message 큐를 가지고 있습니다.</code> 두 별개의 런타임들은 postMessage method를 통해서만 서로 통신할 수 있습니다. 이 메서드는 다른 런타임이 message 이벤트 핸들러를 등록하고 있다면 해당 런타임의 큐에 Message를 추가합니다.</p>\n<p><a href=\"https://blog.sessionstack.com/how-javascript-works-the-building-blocks-of-web-workers-5-cases-when-you-should-use-them-a547c0757f6a\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Web Woker Best Practice - Medium</a>를 참고하면 더 많은 도움이 될 것 같습니다.</p>\n<h2 id=\"outro\" style=\"position:relative;\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>JS가 어떻게 Single Thread이면서도 동시적으로 작업을 수행할 수 있었는지를 이번 블로그 정리를 통해 간단한 정보들을 알 수 있었습니다. 특히, Event Loop에서 Single Thread의 끊임없이 움직이면서 해당 Event들을 관리한다는 것을 이제는 머리 속에 그릴 수 있습니다. Non-Blocking I/O를 통해 Promise를 사용해야하는 이유 등 다양한 것들도 이해할 수 있었습니다. 추가적으로는 Web Worker 등을 이용하여 UI의 흐름을 별개의 Thread(backend)로 구성하여 병렬적으로 이벤트를 처리할 수 있을 것으로 보입니다.</p>\n<p>이번 내용을 계기로 JS 개발자로서 앞으로 이를 더 학습해야 할 필요성은 확실히 느낄 수 있었습니다. 하지만, 많은 것을 참조하면서 이해하느라 부족한 것도 있었으며, 코드를 통해 여러가지를 더 확인해야 할 필요가 있다고 생각합니다. 더 학습하고 정리할 수 있는 시간을 갖도록 노력하겠습니다. 감사합니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/EventLoop\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla - Event Loop</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/API/Web_Workers_API\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozila - Web Worker</a></li>\n<li><a href=\"http://meetup.toast.com/posts/89\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">NHN Tech Blog - Javascript와 이벤트 루프</a></li>\n</ul>","id":"eb2c6e08-928c-5ccb-8a3c-5bf51106b448","timeToRead":5}}}}
{"componentChunkName":"component---src-templates-post-tsx","path":"/contents/algorithm-java-자주-언급되는-sort-algorithm-자바로-구현해보기-part-1","webpackCompilationHash":"560bb0148261c3bb7eb6","result":{"data":{"markdownRemark":{"html":"<p>저번에 개인적으로 구현한 QuickSort가 있지만, 이번에는 <code class=\"language-text\">Bubble, Insertion, Selection, Merge, Counting, Quick 총 6가지</code>에 대한 정렬에 대해서 구현해볼까 합니다. 각 정렬에 대한 정의와 시간복잡도를 생각하면서 고려해보겠습니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>이번에는 기본적으로 언급되는 O(n^2)정렬과 O(n Log n)정렬에 대해서 알아보고자 글을 작성하게 되었습니다. Java, Python, JS 등 기본적으로 Sort의 기능을 제공해주지만, 내부적으로 어떠한 복잡도를 가지고있으며, 어떠한 특징을 가지고 있는지를 이해하는 것이 중요하다고 생각하여 Sort만을 분리하여 직접 작성하고 특징에 대해 알아보고자 합니다. 직접 구성하면서 부족한 부분도 있겠지만 몇몇 메소드를 이해하고 각각의 정렬에 대한 복잡도와 특징에 대해 이해하는데 초점을 두도록 해보겠습니다.</p>\n<h4 id=\"--part-1\"><a href=\"#--part-1\" aria-label=\"  part 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <a href=\"/algorithms/posts/20180422-java-allaboutsort1/\">Part 1</a></h4>\n<ul>\n<li>Bubble Sort</li>\n<li>Selection Sort</li>\n<li>Insertion Sort</li>\n</ul>\n<h4 id=\"--part-2\"><a href=\"#--part-2\" aria-label=\"  part 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <a href=\"/algorithms/posts/20180422-java-allaboutsort2/\">Part 2</a></h4>\n<ul>\n<li>Quick Sort</li>\n<li>Merge Sort</li>\n<li>Counting Sort</li>\n</ul>\n<h2 id=\"1-bubble-sort\"><a href=\"#1-bubble-sort\" aria-label=\"1 bubble sort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Bubble Sort</h2>\n<p>거품 정렬은 1번째와 2번째 원소를 비교하여 정렬하고, 2번째와 3번째, ..., n-1번째와 n번째를 정렬한 뒤 다시 처음으로 돌아가 이번에는 n-2번째와 n-1번째까지, ...해서 최대 n(n-1)/2번 정렬합니다.</p>\n<p>간단하게 <code class=\"language-text\">한 번 돌 때마다 마지막 하나가 정렬되므로 원소들이 거품이 올라오는 것처럼 보여 거품정렬입니다.</code> 하지만, 거품정렬은 O(N^2)의 시간복잡도를 가지고 있어, 기본내장된 Sort를 사용하는 것이 더 효과적이라 버블정렬의 효용성은 거의 없습니다.</p>\n<p>그래도 코드로 한번 구현해보겠습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BubbleSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> unsorted_array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> unsorted_array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> unsorted_array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> unsorted_array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    unsorted_array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> unsorted_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    unsorted_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" Step is : \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 1 Step is : [6, 10, 4, 5, 1]</span>\n    <span class=\"token comment\">// 1 Step is : [6, 4, 10, 5, 1]</span>\n    <span class=\"token comment\">// 1 Step is : [6, 4, 5, 10, 1]</span>\n    <span class=\"token comment\">// 1 Step is : [6, 4, 5, 1, 10]</span>\n    <span class=\"token comment\">// 2 Step is : [4, 6, 5, 1, 10]</span>\n    <span class=\"token comment\">// 2 Step is : [4, 5, 6, 1, 10]</span>\n    <span class=\"token comment\">// 2 Step is : [4, 5, 1, 6, 10]</span>\n    <span class=\"token comment\">// 3 Step is : [4, 1, 5, 6, 10]</span>\n    <span class=\"token comment\">// 4 Step is : [1, 4, 5, 6, 10]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>결과로 출력되는 과정(Step)을 보면, 맨 앞의 수부터 차례차례 비교해가면서 끝에 거품처럼 쌓여가며 정렬하는 것을 볼 수 있습니다. 그리고, 1차 루프가 끝날때마다 마지막 값은 정렬이 된 것으로 판단하여 두번쨰 정렬에 <code class=\"language-text\">- i</code>를 처리하여 해당 값을 비교하지 않도록 처리하는 것입니다.</p>\n<h2 id=\"2-selection-sort\"><a href=\"#2-selection-sort\" aria-label=\"2 selection sort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Selection Sort</h2>\n<p>선택 정렬은 처음부터 끝까지 훑어서 가장 작은 게 1번째, 2번째부터 끝까지 훑어서 가장 작은 게 2번째... 해서 (n-1)번 반복한다. 어찌 보면 인간이 사용하는 정렬 방식입니다. 어떻게 정렬이 되어 있든 일관성 있게 n(n-1)/2​에 비례하는 시간복잡도를 가진다는게 특징입니다. 비교하면서 자리를 바꿔가는 버블 정렬보다 두 배 정도 빠르다고 할 수 있습니다.</p>\n<p>해당 값을 정렬 된 값에 비교하며 맞는 위치에 삽입하는 삽입정렬과는 달리, 선택정렬은 가장 작은 값을 찾아가며 순서대로 정렬하는 차이가 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">SelectionSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> unsorted_array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> min <span class=\"token operator\">=</span> unsorted_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">int</span> min_index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> unsorted_array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">></span> unsorted_array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    min <span class=\"token operator\">=</span> unsorted_array<span class=\"token punctuation\">[</span>j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    min_index <span class=\"token operator\">=</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token comment\">// Re-arrange</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">&lt;</span> unsorted_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> unsorted_array<span class=\"token punctuation\">,</span> i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> min_index <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                unsorted_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> min<span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token operator\">+</span> <span class=\"token string\">\" Step is : \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// 0 Step is : [10, 6, 4, 5, 1]</span>\n    <span class=\"token comment\">// 1 Step is : [1, 10, 6, 4, 5]</span>\n    <span class=\"token comment\">// 2 Step is : [1, 4, 10, 6, 5]</span>\n    <span class=\"token comment\">// 3 Step is : [1, 4, 5, 10, 6]</span>\n    <span class=\"token comment\">// 4 Step is : [1, 4, 5, 6, 10]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"3-insertion-sort\"><a href=\"#3-insertion-sort\" aria-label=\"3 insertion sort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Insertion Sort</h2>\n<p>삽입 정렬은 <code class=\"language-text\">j번째 원소를 기준으로 1부터 j-1까지와 비교해 적절한 위치에 삽입한 후, 그 뒤의 데이터를 한 칸씩 뒤로 밀어내는 방식으로 정렬하는 알고리즘입니다.</code></p>\n<p>평균적으론 O(N^2)중 빠른 편이나 배열에 크기가 증가할 수록 밀어내는데 걸리는 복잡도가 커지는 단점이 있습니다. 다만 이미 정렬되어 있는 자료구조에 자료를 하나씩 삽입/제거하는 경우에는 현실적으로 최고의 정렬 알고리즘이 됩니다. 버블정렬처럼 자리를 바꿔가며 재정렬하는 것이 아니라, 해당 자리를 탐색하는 것이기 때문에 탐색을 제외한 오버헤드가 매우 적기 때문에 다른 O(n^2) 정렬 알고리즘 보다 효과적이라고 할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">InsertionSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> unsorted_array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> i<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> unsorted_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> unsorted_array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> unsorted_array<span class=\"token punctuation\">,</span> j <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">-</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    unsorted_array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> <span class=\"token string\">\" Step is : \"</span> <span class=\"token operator\">+</span> <span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// 1 Step is : [6, 10, 4, 5, 1]</span>\n    <span class=\"token comment\">// 2 Step is : [4, 6, 10, 5, 1]</span>\n    <span class=\"token comment\">// 3 Step is : [4, 5, 6, 10, 1]</span>\n    <span class=\"token comment\">// 4 Step is : [1, 4, 5, 6, 10]</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>결과로 출력되는 과정(Step)을 보면 첫 배열의 값을 기준으로 다음 값들이 삽입되어 정해진 위치로 정렬됨을 알 수 있습니다. 그리고 삽입된 값의 원래 인덱스와 삽입된 인덱스 사이는 한 칸씩 뒤로 밀려나며 다시 배열이 정렬됨을 알 수 있습니다.</p>\n<h2 id=\"--sort에서-사용하면-좋을-메소드-code-classlanguage-textsystemarraycopycode\"><a href=\"#--sort%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%A9%B4-%EC%A2%8B%EC%9D%84-%EB%A9%94%EC%86%8C%EB%93%9C-code-classlanguage-textsystemarraycopycode\" aria-label=\"  sort에서 사용하면 좋을 메소드 code classlanguage textsystemarraycopycode permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Sort에서 사용하면 좋을 메소드 <code class=\"language-text\">System.arraycopy</code></h2>\n<p>이번에 삽입정렬과 선택정렬을 구현하면서, 배열의 단점인, 동적인 반영이 안되는 것을 해결하기 위해 각각의 배열의 값이 바뀌면 재배열해줘야 하는 로직이 작성되어야 합니다.\n이러한 경우 루프문을 통해 조건으로 확인할 수도 있지만, 편리하게 해당 배열의 길이를 복사하여 붙여넣기 할 수 있는 Java Method가 존재합니다. 이에 대해서 간단히 적어볼까 합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">native</span> <span class=\"token keyword\">void</span> <span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Object</span> src<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">int</span>  srcPos<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Object</span> dest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> destPos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n      src\n    </th>\n    <th>\n      srcPos\n    </th>\n    <th>\n      dest\n    </th>\n    <th>\n      destPos\n    </th>\n    <th>\n      length\n    </th>\n  </tr>\n  <tr>\n    <td>\n      (복사 할) 배열 instance\n    </td>\n    <td>\n      복사 시작지점\n    </td>\n    <td>\n      (붙여넣기 할) 배열 instance\n    </td>\n    <td>\n      붙여넣기 시작지점\n    </td>\n    <td>\n      붙여넣기 할 길이\n    </td>\n  </tr>\n</table>\n<h5 id=\"--간단하게-코드로-알아가보기\"><a href=\"#--%EA%B0%84%EB%8B%A8%ED%95%98%EA%B2%8C-%EC%BD%94%EB%93%9C%EB%A1%9C-%EC%95%8C%EC%95%84%EA%B0%80%EB%B3%B4%EA%B8%B0\" aria-label=\"  간단하게 코드로 알아가보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 간단하게 코드로 알아가보기</h5>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayCopy</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> unsorted_array<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 원본 : 1, 2, 3, 4, 5, 6</span>\n    <span class=\"token comment\">// 결과 : 1, 4, 5, 6, 5, 6</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>unsorted_array2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> unsorted_array2<span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>unsorted_array2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 원본 : 1, 2, 3, 4, 5, 6</span>\n    <span class=\"token comment\">// 결과 : 1, 2, 3, 1, 2, 3</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span><span class=\"token function\">arraycopy</span><span class=\"token punctuation\">(</span>unsorted_array3<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> unsorted_array3<span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>unsorted_array3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 원본 : 1, 2, 3, 4, 5, 6</span>\n    <span class=\"token comment\">// 결과 : 1, 2, 3, 4, 3, 4</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이번 Part1에서는 Bubble, Selection, Insertion Sort를 정리해보았습니다. 배열을 사용하여 Sort를 구현하였습니다. 정렬에서 가장 중요한 것은 결국 확률에서 어떠한 것을 기준으로 선택하여 어떻게 해결할 것인가가 핵심입니다. 이는 선택정렬과 삽입정렬을 비교하면 쉽게 알 수 있습니다. 가장 작은 수를 찾아서 순서대로 정렬할 것인가(선택정렬), 아니면 해당 숫자를 맞는 위치에 삽입하며 정렬할 것인가(삽입정렬)처럼 말입니다.</p>\n<p>추가적으로 arraycopy라는 Java Method를 숙지할 수 있는 시간이 되었으며, Array 단점으로 인한 재정렬 문제 등으로 복잡도 상승 등의 여러가지 특징들을 파악할 수 있었습니다. 현재 ArrayList와 LinkedList도 직접 작성하려고 하고 있는데, 이러한 부분도 정렬과 고려하여 직접 코드로 구현해보는 시간을 갖도록 하겠습니다.</p>\n<p>마지막으로, 위의 알고리즘들은 O(n^2)의 복잡도를 가지고 있어 대부분의 언어에서 채택되어 사용되지 않았습니다. 하지만, Python에서는 Merge Sort와 함께 Insertion Sort를 병행하여 사용한다고 합니다. 이유는 Quick Sort가 Stable하지 않다는 이유때문입니다. 이러한 내용들은 Part2에서 알아보겠습니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://namu.wiki/w/%EC%A0%95%EB%A0%AC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98#s-2.1.2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Namu Wiki - 정렬 알고리즘</a></li>\n<li><a href=\"http://www.xybernetics.com/techtalk/SortingAlgorithmsExplained/SortingAlgorithmsExplained.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xybernetics - SortingAlgorithmsExplained</a></li>\n</ul>","fields":{"slug":"algorithm-java-자주-언급되는-sort-algorithm-자바로-구현해보기-part-1"},"frontmatter":{"title":"[Algorithm/Java] 자주 언급되는 Sort Algorithm 자바로 구현해보기 - Part 1","author":"Seolhun","subTitle":"","banner":"/assets/covers/java.png","category":"Algorithm","tags":["Algorithm","Java","Sort","Quick","Merge","Insertion","Selection","Bubble","Counting"],"date":"2018.04.22"},"timeToRead":6}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"algorithm-java-자주-언급되는-sort-algorithm-자바로-구현해보기-part-1","prev":{"excerpt":"저번에 개인적으로 구현한 QuickSort가 있지만, 이번에는 에 대한 정렬에 대해서 구현해볼까 합니다. 각 정렬에 대한 정의와 시간복잡도를 생각하면서 고려해보겠습니다. Intro 저번 시간에는 O(n^2)에 해당되는 정렬 알고리즘 3가지를 알아보았습니다. 이번에는 O(n Log n)에 해당되는 알고리즘을 알아보겠습니다. Sort에서 대중적으로 가장 빠르다는 정렬은 QuickSort로 O(n Log n…","html":"<p>저번에 개인적으로 구현한 QuickSort가 있지만, 이번에는 <code class=\"language-text\">Bubble, Insertion, Selection, Merge, Counting, Quick 총 6가지</code>에 대한 정렬에 대해서 구현해볼까 합니다. 각 정렬에 대한 정의와 시간복잡도를 생각하면서 고려해보겠습니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>저번 시간에는 O(n^2)에 해당되는 정렬 알고리즘 3가지를 알아보았습니다. 이번에는 O(n Log n)에 해당되는 알고리즘을 알아보겠습니다.</p>\n<p>Sort에서 대중적으로 가장 빠르다는 정렬은 QuickSort로 O(n Log n)으로 알려져 있습니다만, 상황에 따라 QuickSort는 O(n^2)의 속도를 나타낸다고 합니다. 이러한 상황들을 견주어본다면 각각의 상활을 이해하고 적절한 Sort 알고리즘을 판단할 수 있는것이 중요할 것으로 생각합니다. 하지만, 그 보다 먼저 선행되어야 하는 것은 각각의 정렬에 대한 정의와 어떻게 구현하면 되는지를 직접 이해하고 숙지한다면 큰 도움이 될 것이라고 생각했습니다. 그래서 코드로 직접 작성해보며 각각의 특징에 대해서 정리해보겠습니다.</p>\n<h4 id=\"--part-1\"><a href=\"#--part-1\" aria-label=\"  part 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <a href=\"/algorithms/posts/20180422-java-allaboutsort1/\">Part 1</a></h4>\n<ul>\n<li>Bubble Sort</li>\n<li>Selection Sort</li>\n<li>Insertion Sort</li>\n</ul>\n<h4 id=\"--part-2\"><a href=\"#--part-2\" aria-label=\"  part 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <a href=\"/algorithms/posts/20180422-java-allaboutsort2/\">Part 2</a></h4>\n<ul>\n<li>Quick Sort</li>\n<li>Merge Sort</li>\n<li>Counting Sort</li>\n</ul>\n<h2 id=\"4-quick-sort\"><a href=\"#4-quick-sort\" aria-label=\"4 quick sort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Quick Sort</h2>\n<p>찰스 앤터니 리처드 호어가 1959년에 개발한 알고리즘이며, 퀵이라는 이름에서 알 수 있듯이 평균적인 상황에서 최고의 성능을 나타냅니다.</p>\n<p>컴퓨터로 가장 많이 구현된 정렬 알고리즘 중 하나이며, C, C++, PHP, 자바 등 거의 모든 언어에서 제공하는 정렬 함수에서 퀵 정렬 혹은 퀵 정렬의 변형 알고리즘을 사용합니다.\n단, 파이썬은 퀵정렬을 하지 않는데, 이유는 파이썬은 stable한 정렬을 하는데, 퀵정렬은 stable하지 않기 때문이다. 파이썬에서 사용하는것은 팀 정렬로 삽입정렬과 병합정렬을 조합한 것입니다.</p>\n<p><code class=\"language-text\">방식은 적절한 원소 하나를 기준(피벗, pivot)으로 삼아 그보다 작은 것을 앞으로 빼내고 그 뒤에 피벗을 옮겨 피벗보다 작은 것, 큰 것으로 나눈뒤 나누어진 각각에서 다시 피벗을 잡고 정렬해서 각각의 크기가 0이나 1이 될 때까지 정렬하는 것입니다. 위에서도 말했듯이 최악의 경우에는 시간복잡도가 O(n2)가 되는데, 피벗을 최솟값이나 최댓값으로 계속해서 잡게 되는 경우에 그런 문제가 발생합니다.</code></p>\n<p>이를 방지하기 위하여 여러 기법들이 개발 되었는데, 대표적인 것이 피벗을 랜덤으로 잡는 것(Random Quick sort). 또는, 배열 중에 3개나 9개의 원소를 골라서 이들의 중앙값을 피벗으로 고르는 것입니다. 이러한 방법을 사용하더라도 최악의 경우가 나올 수는 있지만, 그 경우가 극히 드물게 됩니다. 재귀 깊이가 어느 제한 이상으로 깊어질 경우 힙 정렬 알고리즘을 사용하여 항상 O(n log n)을 보장해주는 방법도 많이 쓰입니다.</p>\n<p><strong>요즘에는 디스크에서 데이터를 블럭 단위로 읽어서 각각을 퀵정렬한 뒤 정렬된 두 블럭을 병합정렬하는 식으로 알고리즘을 설계한다.</strong></p>\n<h4 id=\"--quicksort-code\"><a href=\"#--quicksort-code\" aria-label=\"  quicksort code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- QuickSort Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">QuickSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1390</span><span class=\"token punctuation\">,</span> <span class=\"token number\">425</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1122</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1208</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1443</span><span class=\"token punctuation\">,</span> <span class=\"token number\">462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1155</span><span class=\"token punctuation\">,</span> <span class=\"token number\">849</span><span class=\"token punctuation\">,</span> <span class=\"token number\">455</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1053</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1155</span><span class=\"token punctuation\">,</span> <span class=\"token number\">318</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79</span><span class=\"token punctuation\">,</span> <span class=\"token number\">788</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">QuickSort</span> quickSort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">QuickSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        quickSort<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> unsorted_array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> list<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> lowest<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> highest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowest <span class=\"token operator\">>=</span> highest<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> lowest <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>highest <span class=\"token operator\">-</span> lowest<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> pivot <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">int</span> low <span class=\"token operator\">=</span> lowest<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> high <span class=\"token operator\">=</span> highest<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                low<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> pivot<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                high<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">int</span> temp <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                list<span class=\"token punctuation\">[</span>low<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> list<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                list<span class=\"token punctuation\">[</span>high<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n                low<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                high<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lowest <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> lowest<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>highest <span class=\"token operator\">></span> low<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>list<span class=\"token punctuation\">,</span> low<span class=\"token punctuation\">,</span> highest<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"--주의사항\"><a href=\"#--%EC%A3%BC%EC%9D%98%EC%82%AC%ED%95%AD\" aria-label=\"  주의사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 주의사항</h4>\n<p>제 코드는 현재 Pivot 값을 항상 배열의 가운데 값을 기준으로 정렬할 수 있도록 만들었습니다. Pivot에 따라 복잡도도 달라지지만, 여러가지 Pivot 선정하는 방법이 존재합니다. 하지만, Pivot을 잘못 선정하는 알고리즘을 짜게되면 QuickSort는 Quick이라는 이름처럼 빠른 알고리즘으로 작동되지 않습니다. 이를 잘 고려하여 알고리즘을 짜야할 필요가 있습니다.</p>\n<h4 id=\"--그림으로-보는-quicksort\"><a href=\"#--%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EB%8A%94-quicksort\" aria-label=\"  그림으로 보는 quicksort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 그림으로 보는 QuickSort</h4>\n<div class='text-center'>\n  <img src=\"/images/contents/20180422/sort/Quicksort.gif\" width=\"50%\">\n</div>\n<h2 id=\"5-merge-sort\"><a href=\"#5-merge-sort\" aria-label=\"5 merge sort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Merge Sort</h2>\n<blockquote>\n<p>합병 정렬 또는 병합 정렬(merge sort)은 O(n log n) 비교 기반 정렬 알고리즘이다. 일반적인 방법으로 구현했을 때 이 정렬은 안정 정렬에 속하며, 분할 정복 알고리즘의 하나이다. 존 폰 노이만이 1945년에 개발했다.</p>\n</blockquote>\n<p>원소 개수가 1 또는 0이 될 때까지 두 부분으로 짜개고 짜개서 (두 개씩이 될때까지) 자른 순서의 역순으로 크기를 비교해 병합해 나갑니다. 병합된 부분 안은 이미 정렬되어 있으므로 전부 비교하지 않아도 제자리를 찾을 수 있습니다. 대표적인 분할 정복 알고리즘으로 존 폰 노이만의 천재성을 엿볼 수 있는 알고리즘입니다.</p>\n<p>성능은 퀵정렬보다 전반적으로 뒤떨어지고, 데이터 크기만한 메모리가 더 필요하지만 <code class=\"language-text\">최대의 장점은 데이터의 상태에 별 영향을 받지 않는다는 점과 stable sort라는 점입니다.</code> 힙이나 퀵의 경우에는 배열 A[25] = 100, A[33] = 100인 정수형 배열을 정렬한다고 할 때, 33번째에 있던 100이 25번째에 있던 100보다 앞으로 오는 경우가 생길 수 있습니다. 그에 반해서 병합정렬은 그런 문제를 일으키지 않습니다.</p>\n<h4 id=\"--mergesort-code\"><a href=\"#--mergesort-code\" aria-label=\"  mergesort code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- MergeSort Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">MergeSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1390</span><span class=\"token punctuation\">,</span> <span class=\"token number\">425</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1122</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1208</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1443</span><span class=\"token punctuation\">,</span> <span class=\"token number\">462</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1155</span><span class=\"token punctuation\">,</span> <span class=\"token number\">849</span><span class=\"token punctuation\">,</span> <span class=\"token number\">455</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1053</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1155</span><span class=\"token punctuation\">,</span> <span class=\"token number\">318</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79</span><span class=\"token punctuation\">,</span> <span class=\"token number\">788</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> helper<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">MergeSort</span> mergeSort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MergeSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        mergeSort<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>numbers <span class=\"token operator\">=</span> values<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> size <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>helper <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>size<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>low <span class=\"token operator\">&lt;</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">int</span> middle <span class=\"token operator\">=</span> low <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>high <span class=\"token operator\">-</span> low<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">,</span> middle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">mergesort</span><span class=\"token punctuation\">(</span>middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>low<span class=\"token punctuation\">,</span> middle<span class=\"token punctuation\">,</span> high<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> low<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> middle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            helper<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> numbers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">int</span> l1 <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> mid <span class=\"token operator\">=</span> middle <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> l2 <span class=\"token operator\">=</span> low<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">&lt;=</span> middle <span class=\"token operator\">&amp;&amp;</span> mid <span class=\"token operator\">&lt;=</span> high<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>helper<span class=\"token punctuation\">[</span>l1<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> helper<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                numbers<span class=\"token punctuation\">[</span>l2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">[</span>l1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                l1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                numbers<span class=\"token punctuation\">[</span>l2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                mid<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            l2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>l1 <span class=\"token operator\">&lt;=</span> middle<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            numbers<span class=\"token punctuation\">[</span>l2<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> helper<span class=\"token punctuation\">[</span>l1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            l2<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            l1<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"--그림으로-보는-mergesort\"><a href=\"#--%EA%B7%B8%EB%A6%BC%EC%9C%BC%EB%A1%9C-%EB%B3%B4%EB%8A%94-mergesort\" aria-label=\"  그림으로 보는 mergesort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 그림으로 보는 MergeSort</h4>\n<div class='text-center'>\n  <img src=\"/images/contents/20180422/sort/Mergesort.gif\" width=\"50%\">\n</div>\n<h2 id=\"6-counting-sort\"><a href=\"#6-counting-sort\" aria-label=\"6 counting sort permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Counting Sort</h2>\n<p>카운팅 정렬은 가장 큰 데이터에 따라 효율이 좌지우지됩니다. 쉽게 설명하자면 특정 데이터의 개수(1이 두 개 있다면 2)를 데이터의 값에 대응하는 위치에 저장한 뒤, 자신의 위치에서 앞에 있던 값을 모두 더한 배열을 만든 뒤, 거기서 데이터가 들어가야 할 위치를 찾아내는 정렬 알고리즘입니다. 이 경우에 데이터의 최댓값을 k라 두면, 시간 복잡도는 O(n+k)입니다. 예를 들어 10개의 숫자를 정렬하는 데, 가장 큰 숫자가 100일 경우, O(n^2)이 됩니다. 100(k)은 10(n)의 제곱이니까요. 1000이면 O(n^3)이 되죠. 즉 정렬할 수들의 최대값에 영향을 받는 알고리즘이라고 볼 수 있습니다.</p>\n<p>하지만, 만약 k가 억 단위를 넘어간다면? n이 아무리 작아도 동작시간이 커집니다. 이럴 때는 Counting Sort를 사용하는 것은 바람직하지 않습니다. 반대로 k가 매우 작다면, 오히려 선형시간의 효과를 볼 수 있습니다. 즉, k가 작다는 조건이라면 매우 효율적인 정렬입니다. 또한, 카운팅 정렬은 배열을 사용하는 특성상, 정수라는 전제를 깔고 있습니다.</p>\n<h4 id=\"--countingsort-code\"><a href=\"#--countingsort-code\" aria-label=\"  countingsort code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- CountingSort Code</h4>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">import</span> <span class=\"token namespace\">java<span class=\"token punctuation\">.</span>util</span><span class=\"token punctuation\">.</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">CountingSort</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> unsorted_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">139</span><span class=\"token punctuation\">,</span> <span class=\"token number\">42</span><span class=\"token punctuation\">,</span> <span class=\"token number\">112</span><span class=\"token punctuation\">,</span> <span class=\"token number\">120</span><span class=\"token punctuation\">,</span> <span class=\"token number\">144</span><span class=\"token punctuation\">,</span> <span class=\"token number\">46</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115</span><span class=\"token punctuation\">,</span> <span class=\"token number\">84</span><span class=\"token punctuation\">,</span> <span class=\"token number\">45</span><span class=\"token punctuation\">,</span> <span class=\"token number\">105</span><span class=\"token punctuation\">,</span> <span class=\"token number\">115</span><span class=\"token punctuation\">,</span> <span class=\"token number\">31</span><span class=\"token punctuation\">,</span> <span class=\"token number\">79</span><span class=\"token punctuation\">,</span> <span class=\"token number\">78</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> counts<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> results<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> args<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">CountingSort</span> countingSort <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">CountingSort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Arrays</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span>countingSort<span class=\"token punctuation\">.</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>unsorted_array<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token function\">findMaxValue</span><span class=\"token punctuation\">(</span>values<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        counts <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        results <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> counts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            counts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            counts<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> counts<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            counts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> counts<span class=\"token punctuation\">[</span>i <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> values<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            results<span class=\"token punctuation\">[</span>counts<span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            counts<span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> counts<span class=\"token punctuation\">[</span>values<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> results<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">int</span> <span class=\"token function\">findMaxValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> value <span class=\"token operator\">:</span> values<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                max <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> max<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h4 id=\"--countingsort-체험해보기\"><a href=\"#--countingsort-%EC%B2%B4%ED%97%98%ED%95%B4%EB%B3%B4%EA%B8%B0\" aria-label=\"  countingsort 체험해보기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- CountingSort 체험해보기</h4>\n<p>아래 사이트에 가면 CountingSort를 직접 단계별 과정을 확인하실 수 있습니다.\n<a href=\"http://www.cs.miami.edu/home/burt/learning/Csc517.091/workbook/countingsort.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">View - CountingSort Test</a></p>\n<h2 id=\"대부분의-sort-시간공간복잡도\"><a href=\"#%EB%8C%80%EB%B6%80%EB%B6%84%EC%9D%98-sort-%EC%8B%9C%EA%B0%84%EA%B3%B5%EA%B0%84%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"대부분의 sort 시간공간복잡도 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>대부분의 Sort 시간/공간복잡도</h2>\n<div class='text-center'>\n  <img src=\"/images/contents/20180422/sort/Sorts.png\" width=\"50%\">\n</div>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이번 Part 2에서는 Quick, Merge, Counting Sort에 대해서 간단히 구현해보고 알아보았습니다. Quick, MergeSort 같은 경우는 분할정복의 패턴으로 각각의 배열들을 분할/합치는 작업을 통해서 해당 배열들을 정렬하는 방법을 선택하고 있습니다. 그 중, QuickSort 같은 경우는 Pivot을 기준으로 분할되는데, Pivot의 기준이 잘못선택되는 경우 혹은 각각의 값들의 차가 불규칙하고 커서 이를 잘 나누기가 힘든 경우 O(n^2)의 복잡도를 가질 확률이 높아집니다.</p>\n<p>이에 반해 MergeSort는 배열의 갯수를 기준으로 정확히 나누어서 정렬하기 때문에 O(n Lon n)의 시간복잡도를 일정하게 가져갈 수 있습니다. 거기에 Stable하게 배열을 나눌 수 있어서 QuickSort보다 안정적인 정렬을 할 수 있습니다. 그러한 이유가, Python에서 QuickSort로 구현되지 않은 이유라고 할 수 있을 것입니다.</p>\n<p>CountingSort는 최대 값을 기준으로 시간복잡도가 달라지는 경우인데, 각각의 값이 일정한 순서로 증가한 값들일수록 CountingSort가 더 적합할 것으로 보입니다. 특히, n Log n보다 K의 값이 작아지는 경계선을 잘 고려한다면 이를 잘 사용할 수 있을 것으로 판단합니다.</p>\n<p>기본적인 코드와 함께 간단히 Sort에 대해서 알아보았는데, 내용적으로 많이 부족해보인다고 생각합니다. 책과 여러가지를 더 검색하여 해당 내용을 보충해야 될것으로 보이며, 이와 같은 내용은 계속 수정해나가도록 하겠습니다. 감사합니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://namu.wiki/w/%EC%A0%95%EB%A0%AC%20%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98#s-2.1.2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Namu Wiki - 정렬 알고리즘</a></li>\n<li><a href=\"http://www.xybernetics.com/techtalk/SortingAlgorithmsExplained/SortingAlgorithmsExplained.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">xybernetics - SortingAlgorithmsExplained</a></li>\n<li><a href=\"http://www.vogella.com/tutorials/JavaAlgorithmsMergesort/article.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Vogella - Sort</a></li>\n</ul>","id":"dae00d6b-a814-5278-a3e3-85f116ee8f34","fields":{"slug":"algorithm-java-자주-언급되는-sort-algorithm-자바로-구현해보기-part-2"},"frontmatter":{"title":"[Algorithm/Java] 자주 언급되는 Sort Algorithm 자바로 구현해보기 - Part 2","date":"2018-04-22T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/java.png","category":"Algorithm","tags":["Algorithm","Java","Sort","Quick","Merge","Insertion","Selection","Bubble","Counting"]},"timeToRead":7},"next":{"excerpt":"이번에는 웹사이트를 개선하기 위한 구글에서 추천하는 방법들에 간단히 정리해볼까 합니다. 서비스의 성공을 위해 이제는 프론트엔드의 중요성이 많이 커진 만큼 유저들이 불편하지 않도록 만들기 위한 웹 사이트 최적화 방법을 이해/숙지하면 큰 도움이 될 것이라 생각하였습니다. Intro 구글에서 잘 정리한 웹 사이트를 개선하기 위한…","html":"<p>이번에는 웹사이트를 개선하기 위한 구글에서 추천하는 방법들에 간단히 정리해볼까 합니다. 서비스의 성공을 위해 이제는 프론트엔드의 중요성이 많이 커진 만큼 유저들이 불편하지 않도록 만들기 위한 웹 사이트 최적화 방법을 이해/숙지하면 큰 도움이 될 것이라 생각하였습니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>구글에서 잘 정리한 웹 사이트를 개선하기 위한 9가지 방법에 대해서 필요한 정보들을 모아서 정리해보는 시간을 가져볼까 합니다. 너무 잘 작성된 글이지만, 이를 한번 더 정독하면서 조금씩 정리하면 이해하고 숙지하는데 더 큰 도움이 되어 이런 시간을 가져볼까 합니다.</p>\n<p>목차는 내용이 커질것으로 생각하여 아래와 같이 2개의 파트로 나눠서 적어볼까 합니다.</p>\n<h4 id=\"--part-1\"><a href=\"#--part-1\" aria-label=\"  part 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <a href=\"/posts/web/20180423-web-howtooptimizeweb1/\">Part 1</a></h4>\n<ul>\n<li>방문 페이지 리디렉션 사용 안함</li>\n<li>압축 사용</li>\n<li>서버 응답 시간 개선</li>\n<li>브라우저 캐싱 활용</li>\n</ul>\n<h4 id=\"--part-2\"><a href=\"#--part-2\" aria-label=\"  part 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <a href=\"/posts/web/20180423-web-howtooptimizeweb2/\">Part 2</a></h4>\n<ul>\n<li>리소스 축소</li>\n<li>이미지 최적화</li>\n<li>CSS 전송 최적화</li>\n<li>표시되는 콘텐츠의 우선순위 지정</li>\n<li>렌더링 차단 자바스크립트 삭제</li>\n</ul>\n<h2 id=\"5-리소스html-css-js-축소\"><a href=\"#5-%EB%A6%AC%EC%86%8C%EC%8A%A4html-css-js-%EC%B6%95%EC%86%8C\" aria-label=\"5 리소스html css js 축소 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 리소스(HTML, CSS, JS) 축소</h2>\n<p>이 규칙은 PageSpeed Insights에서 압축을 통해 리소스 중 하나의 크기를 줄일 수 있음이 감지되면 트리거됩니다.</p>\n<h4 id=\"--개요\"><a href=\"#--%EA%B0%9C%EC%9A%94\" aria-label=\"  개요 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p><code class=\"language-text\">압축은 브라우저에서 리소스를 처리하는 방식에 영향을 주지 않고 불필요하거나 중복된 데이터를 삭제하는 과정</code>을 말합니다. 예를 들어, 코드 주석 및 형식 지정, 사용되지 않는 코드 삭제, 더 짧은 변수와 함수 이름 사용하기 등의 과정이 있습니다.</p>\n<p>자세한 내용은 사전 처리 및 상황별 최적화를 참조하세요.</p>\n<h4 id=\"--권장사항\"><a href=\"#--%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD\" aria-label=\"  권장사항 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 권장사항</h4>\n<p>다음과 같이 HTML, CSS, 자바스크립트 리소스를 압축합니다.</p>\n<ul>\n<li>HTML을 압축하려면 <a href=\"https://github.com/kangax/html-minifier\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">HTMLMinifier</a>를 사용해 보세요.</li>\n<li>CSS를 압축하려면 <a href=\"https://github.com/ben-eb/cssnano\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSSNano</a> 및 <a href=\"https://github.com/css/csso\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">csso</a>를 사용해 보세요.</li>\n<li>자바스크립트를 압축하려면 <a href=\"https://github.com/mishoo/UglifyJS2\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">UglifyJS</a>를 사용해 보세요. <a href=\"https://developers.google.com/closure/compiler/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Closure Compiler</a>도 매우 효과적입니다.</li>\n</ul>\n<div class='text-center'>\n  <img src=\"/images/contents/20180423/optimization/resources-zip.png\" width=\"100%\">\n</div><br>\n<ul>\n<li>다른 방법으로는, <a href=\"https://developers.google.com/speed/pagespeed/module/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PageSpeed 모듈</a>을 사용하면, Apache나 Nginx 웹 서버와 통합되어 리소스를 압축하고 사이트를 자동으로 최적화할 수 있습니다.</li>\n</ul>\n<h4 id=\"--첨언\"><a href=\"#--%EC%B2%A8%EC%96%B8\" aria-label=\"  첨언 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 첨언</h4>\n<p>위와 관련된 사항들에서 Webpack을 사용하면 대부분을 해결할 수 있습니다. 위에서 언급된 라이브러리들은 대부분 Webpack Module로 제공되고 있으며, Webpack 설정에서 해당 라이브러리들을 빌드 혹은 개발시 손쉽게 설정하여 사용할 수 있습니다. 간단한 예로 <a href=\"https://github.com/webpack-contrib/uglifyjs-webpack-plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">uglifyjs-webpack-plugin</a>를 참고하시면 이해가 빠르리라 생각합니다.</p>\n<h2 id=\"6-이미지-최적화\"><a href=\"#6-%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"6 이미지 최적화 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 이미지 최적화</h2>\n<p>이 규칙은 PageSpeed Insights에서 화질에 큰 영향을 주지 않고 파일 크기를 줄여서 페이지의 이미지를 최적화할 수 있음이 감지되면 트리거됩니다.</p>\n<h4 id=\"--개요-1\"><a href=\"#--%EA%B0%9C%EC%9A%94-1\" aria-label=\"  개요 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p>이미지는 대개 페이지에 다운로드된 바이트의 대부분을 차지합니다. 따라서 이미지를 최적화하면 브라우저에서 다운로드해야 하는 바이트 수가 감소하고 클라이언트의 대역폭 경쟁이 줄어들며 브라우저가 콘텐츠를 다운로드하여 화면에 렌더링할 수 있는 속도가 빨라져서 일부 대용량 바이트를 절감하고 성능이 개선되는 경우가 많습니다.</p>\n<h4 id=\"--권장사항-1\"><a href=\"#--%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD-1\" aria-label=\"  권장사항 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 권장사항</h4>\n<p>이미지 애셋에 가장 적합한 형식과 최적화 전략을 찾으려면 인코딩되는 데이터의 유형, 이미지 형식 기능, 화질 설정, 해상도 등을 꼼꼼히 분석해야 합니다. 또한 어떤 이미지가 벡터 형식으로 가장 잘 전송되는지, CSS를 통해 원하는 효과를 얻을 수 있는지, 각 기기 유형에 맞게 확장된 애셋을 전송하는 방법을 고려해야 합니다.</p>\n<h4 id=\"--code-classlanguage-text이미지-유형의-최적화필독code\"><a href=\"#--code-classlanguage-text%EC%9D%B4%EB%AF%B8%EC%A7%80-%EC%9C%A0%ED%98%95%EC%9D%98-%EC%B5%9C%EC%A0%81%ED%99%94%ED%95%84%EB%8F%85code\" aria-label=\"  code classlanguage text이미지 유형의 최적화필독code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <code class=\"language-text\">이미지 유형의 최적화(필독)</code></h4>\n<ul>\n<li><a href=\"https://developers.google.com/web/fundamentals/design-and-ux/responsive/images\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">반응형 이미지 전송을 위한 권장사항</a>을 따르세요.</li>\n<li>각 <a href=\"https://developers.google.com/web/fundamentals/performance/optimizing-content-efficiency/image-optimization#image_optimization_checklist\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">이미지의 이미지 최적화 검사 목록</a>을 따르세요.</li>\n</ul>\n<h4 id=\"--첨언-1\"><a href=\"#--%EC%B2%A8%EC%96%B8-1\" aria-label=\"  첨언 1 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 첨언</h4>\n<p>이미지 최적화는 반응형/압축/파일형식에 따라 권장되는 방법이 다양합니다. 또한, 브라우저에 따라 지원되는 최신기술이 생겨나면서 이에 따라 쉽게 적용될 수 있는 부분도 증가되었습니다. 이러한 부분들알 숙지하여 개발한다면 프론트엔드 개발에서 큰 도움이 될 것입니다.</p>\n<p>간단한 1가지를 작성하겠습니다.</p>\n<blockquote>\n<p>picture 요소가 브라우저에 들어가기 시작했습니다. 아직은 이 요소가 모든 브라우저에서 제공되지는 않지만, 뛰어난 이전 버전과의 호환성과 <a href=\"https://scottjehl.github.io/picturefill/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Picturefill</a> 폴리필의 잠재적 용도가 있기 때문에 이 요소를 사용하는 것이 좋습니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>picture</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(min-width: 800px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>head.jpg, head-2x.jpg 2x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>source</span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>(min-width: 450px)<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>head-small.jpg, head-small-2x.jpg 2x<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>head-fb.jpg<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">srcset</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>head-fb-2x.jpg 2x<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">alt</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>a head carved out of wood<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>picture</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>위의 예시에서 브라우저 너비가 최소 800px 이상이면 기기 해상도에 따라 head.jpg 또는 head-2x.jpg가 사용됩니다.</li>\n<li>브라우저가 450px 및 800px 사이이면 다시 기기 해상도에 따라 head-small.jpg 또는 head-small-2x.jpg가 사용됩니다.</li>\n<li>450px 미만인 화면 너비의 경우 picture 요소가 지원되지 않는 이전 버전과의 호환성을 위해, 브라우저는 대신 img 요소를 렌더링해야 합니다.</li>\n</ul>\n<h2 id=\"7-css-전송-최적화\"><a href=\"#7-css-%EC%A0%84%EC%86%A1-%EC%B5%9C%EC%A0%81%ED%99%94\" aria-label=\"7 css 전송 최적화 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. CSS 전송 최적화</h2>\n<p>이 규칙은 PageSpeed Insights에서 페이지에 첫 번째 렌더링 시간을 지연시키는 렌더링 차단 외부 스타일시트가 포함되어 있음이 감지되면 트리거됩니다.</p>\n<h4 id=\"--개요-2\"><a href=\"#--%EA%B0%9C%EC%9A%94-2\" aria-label=\"  개요 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p>브라우저에서 콘텐츠를 렌더링하려면 먼저 현재 페이지의 모든 스타일과 레이아웃 정보를 처리해야 합니다. 따라서 브라우저는 외부 스타일시트가 다운로드되고 처리될 때까지 렌더링을 차단하는데, 이로 인해 왕복을 여러 번 해야 하고 첫 번째 렌더링 시간이 지연될 수 있습니다. 중요 렌더링 경로에 관해 자세히 알아보려면 <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-tree-construction\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">렌더링 트리 생성, 레이아웃 및 페인트</a>를 참조하세요. 또한 렌더링 차단을 해제하고 CSS 전송을 향상하는 방법에 관한 도움말은 <a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/render-blocking-css\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">렌더링 차단 CSS</a>를 참조하세요.</p>\n<h4 id=\"--권장사항-2\"><a href=\"#--%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD-2\" aria-label=\"  권장사항 2 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 권장사항</h4>\n<p>외부 CSS 리소스의 크기가 작은 경우 HTML 문서에 직접 리소스를 삽입할 수 있는데, 이를 인라인이라고도 합니다. 이렇게 작은 CSS를 삽입하면 브라우저에서 페이지 렌더링을 진행할 수 있습니다. CSS 파일이 큰 경우 CSS를 전부 삽입하면 PageSpeed Insights에서 표시되는 콘텐츠의 우선순위 지정을 통해 페이지에서 스크롤 없이 볼 수 있는 부분이 너무 크다는 경고를 보낼 수 있습니다. CSS 파일이 크면 스크롤 없이 볼 수 있는 콘텐츠의 렌더링에 필요한 CSS를 확인하여 삽입한 다음 스크롤 없이 볼 수 있는 콘텐츠의 로드가 완료될 때까지 나머지 스타일의 로드를 지연시켜야 합니다.</p>\n<h4 id=\"--css의-렌더링-차단-컨트롤-하기\"><a href=\"#--css%EC%9D%98-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B0%A8%EB%8B%A8-%EC%BB%A8%ED%8A%B8%EB%A1%A4-%ED%95%98%EA%B8%B0\" aria-label=\"  css의 렌더링 차단 컨트롤 하기 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- CSS의 렌더링 차단 컨트롤 하기</h4>\n<blockquote>\n<p>CSS는 렌더링 차단 리소스입니다. 최초 렌더링에 걸리는 시간을 최적화하려면 클라이언트에 최대한 빠르게 다운로드되어야 합니다.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span>    <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span>    <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>all<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>portrait.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>orientation:portrait<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>print.css<span class=\"token punctuation\">\"</span></span>    <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">media</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>print<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<ul>\n<li>첫 번째 선언은 렌더링을 차단하고 모든 조건에서 일치합니다.</li>\n<li>두 번째 선언도 렌더링을 차단합니다. <code class=\"language-text\">all</code>이 기본 유형이므로 특정 유형을 지정하지 않을 경우 암묵적으로 <code class=\"language-text\">all</code>로 설정됩니다. <code class=\"language-text\">따라서 첫 번째와 두 번째 선언은 사실상 똑같습니다.</code></li>\n<li>\n<p>세 번째 선언은 페이지가 로드될 때 평가되는 동적 미디어 쿼리를 가집니다. portrait.css의 렌더링 차단 여부는 페이지가 로드되는 중에 기기의 방향에 따라 달라질 수 있습니다.</p>\n<ul>\n<li>가로방향일 때는 landscape를, 세로방향일 땐 portrait를 지정할 시 true를 반환합니다.</li>\n</ul>\n</li>\n<li>마지막 선언은 페이지가 인쇄될 때만 적용됩니다. 따라서 페이지가 브라우저에서 처음 로드될 때는 렌더링이 차단되지 않습니다.</li>\n</ul>\n<h4 id=\"--code-classlanguage-text필독-사항code\"><a href=\"#--code-classlanguage-text%ED%95%84%EB%8F%85-%EC%82%AC%ED%95%ADcode\" aria-label=\"  code classlanguage text필독 사항code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <code class=\"language-text\">필독 사항</code></h4>\n<p>HTML 및 CSS 입력을 기반으로 DOM 및 CSSOM 트리를 빌드되며, 이들 모두 문서의 각기 다른 측면을 캡처하는 서로 독립적인 객체입니다. 하나는 콘텐츠를 설명하고, 다른 하나는 문서에 적용되어야 하는 스타일 규칙을 설명합니다. 이 두 가지를 병합하여 브라우저가 화면에 픽셀을 렌더링하도록 하려면 어떻게 해야 할까요?</p>\n<ol>\n<li>HTML 마크업을 처리하고 DOM 트리를 빌드합니다.</li>\n<li>CSS 마크업을 처리하고 CSSOM 트리를 빌드합니다.</li>\n<li><code class=\"language-text\">DOM 및 CSSOM을 결합하여 렌더링 트리를 형성</code>합니다.</li>\n<li>\n<p>렌더링 트리를 생성하려면 브라우저가 대략적으로 다음 작업을 수행합니다.</p>\n<ol>\n<li>DOM 트리의 루트에서 시작하여 표시되는 노드 각각을 트래버스합니다.</li>\n<li>일부 노드는 표시되지 않으며(예: 스크립트 태그, 메타 태그 등), 렌더링된 출력에 반영되지 않으므로 생략됩니다.</li>\n<li>\n<p>일부 노드는 CSS를 통해 숨겨지며 렌더링 트리에서도 생략됩니다.</p>\n<ul>\n<li>예를 들어, span 노드의 경우 'display: none' 속성을 설정하는 명시적 규칙이 있기 때문에 렌더링 트리에서 누락됩니다.</li>\n</ul>\n</li>\n</ol>\n</li>\n<li>렌더링 트리에서 레이아웃을 실행하여 각 노드의 기하학적 형태를 계산합니다.</li>\n<li>마지막 단계는 최종 렌더링 트리에서 수행되는 페인트이며, 픽셀을 화면에 렌더링합니다.</li>\n</ol>\n<img src=\"/images/contents/20180423/optimization/render-tree.png\" width=\"100%\">\n<h2 id=\"8-표시되는-컨텐츠-우선순위-지정\"><a href=\"#8-%ED%91%9C%EC%8B%9C%EB%90%98%EB%8A%94-%EC%BB%A8%ED%85%90%EC%B8%A0-%EC%9A%B0%EC%84%A0%EC%88%9C%EC%9C%84-%EC%A7%80%EC%A0%95\" aria-label=\"8 표시되는 컨텐츠 우선순위 지정 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 표시되는 컨텐츠 우선순위 지정</h2>\n<p>이 규칙은 PageSpeed Insights에서 페이지의 스크롤 없이 볼 수 있는 콘텐츠를 렌더링하는 데 추가적인 네트워크 왕복이 필요함이 감지되면 트리거됩니다.</p>\n<h4 id=\"--개요-3\"><a href=\"#--%EA%B0%9C%EC%9A%94-3\" aria-label=\"  개요 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p>필요한 데이터 양이 초기 혼잡 윈도우(일반적으로 14.6 KB 압축)를 초과하면 서버와 사용자 브라우저 간에 추가 왕복이 필요합니다. 모바일 네트워크와 같이 지연 시간이 긴 네트워크를 사용하는 사용자의 경우 이로 인해 페이지 로드가 크게 지연될 수 있습니다.</p>\n<h4 id=\"--권장사항-3\"><a href=\"#--%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD-3\" aria-label=\"  권장사항 3 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 권장사항</h4>\n<p>페이지 로드 속도를 높이려면 페이지에서 스크롤 없이 볼 수 있는 콘텐츠를 렌더링하는 데 필요한 데이터(HTML 마크업, 이미지, CSS, 자바스크립트)의 크기를 제한하세요. 몇 가지 방법은 다음과 같습니다.</p>\n<h5 id=\"1-스크롤-없이-볼-수-있는-중요한-콘텐츠를-먼저-로드하도록-html-구성\"><a href=\"#1-%EC%8A%A4%ED%81%AC%EB%A1%A4-%EC%97%86%EC%9D%B4-%EB%B3%BC-%EC%88%98-%EC%9E%88%EB%8A%94-%EC%A4%91%EC%9A%94%ED%95%9C-%EC%BD%98%ED%85%90%EC%B8%A0%EB%A5%BC-%EB%A8%BC%EC%A0%80-%EB%A1%9C%EB%93%9C%ED%95%98%EB%8F%84%EB%A1%9D-html-%EA%B5%AC%EC%84%B1\" aria-label=\"1 스크롤 없이 볼 수 있는 중요한 콘텐츠를 먼저 로드하도록 html 구성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 스크롤 없이 볼 수 있는 중요한 콘텐츠를 먼저 로드하도록 HTML 구성</h5>\n<p>페이지의 주요 콘텐츠를 먼저 로드하세요. 서버의 초기 응답에서 페이지의 중요한 부분을 렌더링하는 데 필요한 데이터를 즉시 보내고 나머지를 지연하도록 페이지를 구성하세요. 이렇게 구성하려면 CSS를 두 부분, 즉 콘텐츠 중 ATF 부분의 스타일 지정을 담당하는 인라인 부분과 지연해도 되는 부분으로 분할해야 할 수 있습니다.</p>\n<p>사이트의 로드 속도를 높이기 위해 재구성하는 방법에 관한 다음 예를 고려하세요.</p>\n<ul>\n<li>HTML에서 제3자 위젯을 로드한 후 주요 콘텐츠를 로드하는 경우 주요 콘텐츠를 먼저 로드하도록 순서를 변경합니다.</li>\n<li>사이트에서 탐색 사이드바와 자료가 포함된 2열 디자인을 사용하는데 HTML에서 사이드바를 내용보다 먼저 로드하는 경우 내용을 먼저 로드해 보세요.</li>\n</ul>\n<h5 id=\"2-리소스에서-사용하는-데이터의-양-축소\"><a href=\"#2-%EB%A6%AC%EC%86%8C%EC%8A%A4%EC%97%90%EC%84%9C-%EC%82%AC%EC%9A%A9%ED%95%98%EB%8A%94-%EB%8D%B0%EC%9D%B4%ED%84%B0%EC%9D%98-%EC%96%91-%EC%B6%95%EC%86%8C\" aria-label=\"2 리소스에서 사용하는 데이터의 양 축소 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 리소스에서 사용하는 데이터의 양 축소</h5>\n<p>사이트를 여러 기기에서 잘 작동하고 중요한 콘텐츠를 먼저 로드하도록 다시 디자인했으면 다음 기술을 사용하여 페이지 렌더링에 필요한 데이터의 양을 줄입니다.</p>\n<ul>\n<li>\n<p>리소스 축소 : 불필요한 공백과 주석을 삭제하면 HTML, CSS, 자바스크립트를 축소할 수 있습니다.</p>\n<ul>\n<li>리소스의 변수 이름을 변경하는 도구를 사용하여 세부적으로 최적화할 수 있습니다.</li>\n</ul>\n</li>\n<li>가능하면 이미지 대신 CSS 사용</li>\n<li>압축 사용</li>\n</ul>\n<h2 id=\"9-렌더링-차단-자바스크립트-삭제\"><a href=\"#9-%EB%A0%8C%EB%8D%94%EB%A7%81-%EC%B0%A8%EB%8B%A8-%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8-%EC%82%AD%EC%A0%9C\" aria-label=\"9 렌더링 차단 자바스크립트 삭제 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>9. 렌더링 차단 자바스크립트 삭제</h2>\n<p>이 규칙은 HTML이 페이지의 스크롤 없이 볼 수 있는 부분에 있는 외부 차단 자바스크립트 파일을 참조하는 것이 PageSpeed Insights에서 감지하면 트리거됩니다.</p>\n<h4 id=\"--개요-4\"><a href=\"#--%EA%B0%9C%EC%9A%94-4\" aria-label=\"  개요 4 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 개요</h4>\n<p>브라우저가 페이지를 렌더링하려면 먼저 HTML 마크업을 파싱하여 DOM을 빌드해야 합니다. 처리되는 동안 파서에서는 스크립트를 발견할 때마다 파싱을 중지하고 스크립트를 실행해야 HTML을 계속 파싱할 수 있습니다. 또한 외부 스크립트의 경우 파서에서는 리소스가 다운로드될 때까지 기다려야 하며, 이로 인해 한 번 이상의 네트워크 왕복이 발생하고 페이지의 첫 렌더링 시간이 지연될 수 있습니다. 자바스크립트가 중요한 렌더링 경로에 어떻게 영향을 미치는지 자세히 알아보려면<a href=\"https://developers.google.com/web/fundamentals/performance/critical-rendering-path/adding-interactivity-with-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\"> 자바스크립트로 상호작용 추가</a>를 참조하세요.</p>\n<ul>\n<li>자바스크립트는 DOM 및 CSSOM을 쿼리하고 수정할 수 있습니다.</li>\n<li>자바스크립트 실행은 CSSOM을 차단합니다.</li>\n<li>자바스크립트는 명시적으로 비동기로 선언되지 않은 경우 DOM 생성을 차단합니다.</li>\n</ul>\n<h4 id=\"--권장사항-4\"><a href=\"#--%EA%B6%8C%EC%9E%A5%EC%82%AC%ED%95%AD-4\" aria-label=\"  권장사항 4 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 권장사항</h4>\n<p>차단 자바스크립트의, 특히 실행하기 전에 가져와야 하는 외부 스크립트의 사용을 피하고 최소화해야 합니다. 추가적인 네트워크 요청을 방지하기 위해 페이지 콘텐츠를 렌더링하는 데 필수적인 스크립트를 인라인으로 삽입할 수도 있지만, 좋은 성능을 내려면 인라인 콘텐츠는 크기가 작아야 하고 빠르게 실행할 수 있어야 합니다. 첫 렌더링에서 중요하지 않은 스크립트는 비동기 스크립트로 생성하거나 첫 번째 렌더링이 완료될 때까지 지연되어야 합니다. 또한 이 경우 로드 시간을 향상하려면 CSS 전송을 최적화 해야 합니다.</p>\n<h4 id=\"--code-classlanguage-text필독사항code\"><a href=\"#--code-classlanguage-text%ED%95%84%EB%8F%85%EC%82%AC%ED%95%ADcode\" aria-label=\"  code classlanguage text필독사항code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- <code class=\"language-text\">필독사항</code></h4>\n<p>스크립트를 실행하려는 경우 브라우저가 CSSOM을 다운로드하고 빌드하는 작업을 완료하지 않았으면 어떻게 될까요? 답은 간단하지만 성능에는 그다지 좋지 않습니다. <code class=\"language-text\">브라우저가 CSSOM을 다운로드하고 생성하는 작업을 완료할 때까지 스크립트 실행 및 DOM 생성을 지연시킵니다.</code></p>\n<p>간단히 말해서, 자바스크립트에서는 DOM, CSSOM 및 자바스크립트 실행 간에 여러 가지 새로운 종속성을 도입합니다. 이 때문에 브라우저가 화면에서 페이지를 처리하고 렌더링할 때 상당한 지연이 발생할 수 있습니다.</p>\n<ul>\n<li>문서에서 스크립트의 위치는 중요합니다.</li>\n<li>브라우저가 스크립트 태그를 만나면 이 스크립트가 실행 종료될 때까지 DOM 생성이 일시 중지됩니다.</li>\n<li>자바스크립트는 DOM 및 CSSOM을 쿼리하고 수정할 수 있습니다.</li>\n<li>자바스크립트 실행은 CSSOM이 준비될 때까지 일시 중지됩니다.</li>\n</ul>\n<h5 id=\"--script-태그와-인라인-javascript-snippet-차이\"><a href=\"#--script-%ED%83%9C%EA%B7%B8%EC%99%80-%EC%9D%B8%EB%9D%BC%EC%9D%B8-javascript-snippet-%EC%B0%A8%EC%9D%B4\" aria-label=\"  script 태그와 인라인 javascript snippet 차이 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- &#x3C;script> 태그와 인라인 Javascript snippet 차이</h5>\n<p>대부분이 &#x3C;script> 태그를 사용하든 인라인 자바스크립트 스니펫을 사용하든 간에 여러분은 이 둘이 동일한 방식으로 동작할 것으로 기대합니다. 두 경우 모두 브라우저가 일시 중지하고 스크립트를 실행해야만 문서의 나머지 부분을 처리할 수 있습니다.</p>\n<p>하지만, <code class=\"language-text\">외부 자바스크립트 파일의 경우 브라우저가 일시 중지하고 디스크, 캐시 또는 원격 서버에서 스크립트를 가져올 때까지 기다려야 합니다.</code> 이로 인해 주요 렌더링 경로에 수십 ~ 수천 밀리초의 지연이 추가로 발생할 수 있습니다. 이러한 것을 방지하기 위해 비동기로 외부 JS를 로드할 수 있습니다.</p>\n<h5 id=\"--자바스크립트를-code-classlanguage-text비동기asynccode로-생성\"><a href=\"#--%EC%9E%90%EB%B0%94%EC%8A%A4%ED%81%AC%EB%A6%BD%ED%8A%B8%EB%A5%BC-code-classlanguage-text%EB%B9%84%EB%8F%99%EA%B8%B0asynccode%EB%A1%9C-%EC%83%9D%EC%84%B1\" aria-label=\"  자바스크립트를 code classlanguage text비동기asynccode로 생성 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 자바스크립트를 <code class=\"language-text\">비동기(async)</code>로 생성</h5>\n<div class=\"gatsby-highlight\" data-language=\"html\"><pre class=\"language-html\"><code class=\"language-html\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>html</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>head</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>meta</span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>viewport<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">content</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>width=device-width,initial-scale=1<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>link</span> <span class=\"token attr-name\">href</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>style.css<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">rel</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>stylesheet<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>title</span><span class=\"token punctuation\">></span></span>Critical Path: Script Async<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>title</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>head</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>body</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span>Hello <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>span</span><span class=\"token punctuation\">></span></span>web performance<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>span</span><span class=\"token punctuation\">></span></span> students!<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>img</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>awesome-photo.jpg<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>script</span> <span class=\"token attr-name\">src</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>app.js<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">async</span><span class=\"token punctuation\">></span></span><span class=\"token script\"></span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>script</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>body</span><span class=\"token punctuation\">></span></span>\n<span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>html</span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>위의 예시처럼, <code class=\"language-text\">async</code> 키워드를 스크립트 태그에 추가하면, 스크립트가 사용 가능해질 때까지 기다리는 동안 DOM 생성을 차단하지 말라고 브라우저에 지시하는 것입니다. 이 경우 성능이 크게 향상됩니다.</p>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>개인적으로 웹 개발에서의 가장 큰 어려움은 브라우저 별 차이점에서 발생하는 것 같다고 생각합니다. 하지만, HTTP와 같은 표준을 준수하여 개발한다면 옛 브라우저 외에는 대부분의 브라우저가 표준을 따라가고 있기 때문에 큰 어려움없이 개발 간 문제에 대처할 수 있을것으로 판단합니다.</p>\n<p>특히, Resources를 잘 관리하는 것이 웹 페이지를 최적화하는데 중요한 요소로 보입니다. 또한, 브라우저의 간단한 작동원리를 이해해야 할 필요가 있습니다. CSS 경우는 렌더링 트리를 만들기 위해서 로드 전까지 렌더링을 차단하는, JS는 DOM생성을 차단하는 특징을 확인할 수 있었습니다. 이러한 브라우저의 작동 흐름을 이해한다면 해당 코드들을 분리하고 필요한 경우에 따라서 이를 응용하여 최적화하는데 큰 도움이 될 것으로 생각합니다.</p>\n<p>이번내용은 Frontend 관련 내용이 많다고 생각합니다. Resources 관리부터 압축, 최적화 등 다양한 기능들은 현재 Webpack Bundler를 통해 해결할 수 있습니다. 하지만, 프로젝트가 커지면 분리해야되는 부분이 생기기 때문에 이를 100% 규칙적으로 따라갈수는 없다고 생각합니다. 하지만, 이러한 내용을 숙지한다면 웹 최적화를 고려한 개발할 수 있다고 생각합니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developers.google.com/speed/docs/insights/rules\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Google PageSpeed Insights</a></li>\n</ul>","id":"f032498a-cff0-520b-8846-44bea21eafca","fields":{"slug":"web-웹사이트의-속도를-개선할-수-있는-방법-9-가지-정리-part-2"},"frontmatter":{"title":"[Web] 웹사이트의 속도를 개선할 수 있는 방법 9가지 정리 - Part 2","date":"2018-04-23T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/http.png","category":"Web","tags":["Web","Optimization","Cache","HTTP","gzip","Priority"]},"timeToRead":12}}}}
{"componentChunkName":"component---src-templates-blog-tsx","path":"/contents/9","webpackCompilationHash":"f5ffc0169e9a43b261a9","result":{"data":{"allMarkdownRemark":{"totalCount":66,"edges":[{"node":{"fields":{"slug":"js-ts-graph-ql-graph-ql-시작해보기-part-1"},"frontmatter":{"title":"[JS/TS/GraphQL] GraphQL 시작해보기 - Part 1","date":"2018.04.03","category":"GraphQL","tags":["Javascript","Typescript","NodeJS","GraphQL"],"banner":"/assets/covers/js.png"},"excerpt":"이번에 간단히 NodeJS와 GraphQL로 회사에 직원들과 책을 관리할 수 있는 프로젝트를 만들어보았습니다.\n이와 관련하여 간단히 정리해보자 합니다. Example-GraphQL Repositroy Intro GraphQL로 프로젝트를 진행하면서 개인적으로 의 가치를 갖고 있다고 얘기하고 싶습니다. 이유는, 각각의 타입을 정의하여 재사용 할 수 있으며, 그 안에서 유혀성 검사 및 다양한 기능들을 쉽게 이용할 수 있기 때문입니다. 공식 홈페이지는 아래와 같이 설명하고 있습니다. GraphQL is a query language…","timeToRead":8}},{"node":{"fields":{"slug":"algorithm-javascript-hacker-rank-find-the-median"},"frontmatter":{"title":"[Algorithm/Javascript] HackerRank - FindTheMedian","date":"2018.03.26","category":"Algorithm","tags":["Algorithm","Javascript","HackerRank","Sort","FindTheMedian"],"banner":"/assets/covers/js.png"},"excerpt":"저번 시간에 ClosestNumbers 문제를 풀어보았습니다.\n이번에는 FindTheMedian 알고리즘을 풀어보겠습니다.\n주어진 배열 값 안에서 배열의 가운데 값을 찾는 알고리즘입니다.\nHackerRank - Sort - FindTheMedian 1. Question Sample Input Sample Output 2. Process…","timeToRead":1}},{"node":{"fields":{"slug":"algorithm-javascript-hacker-rank-closest-numbers"},"frontmatter":{"title":"[Algorithm/Javascript] HackerRank - ClosestNumbers","date":"2018.03.25","category":"Algorithm","tags":["Algorithm","Javascript","HackerRank","Sort","ClosestNumbers"],"banner":"/assets/covers/js.png"},"excerpt":"저번 시간에 Counting Sort 2문제를 모두 풀어보았습니다. 이번에는 ClosestNumbers 알고리즘을 풀어보겠습니다.\n두 값의 차가 가장 적은 두 수를 찾는 것입니다. 만약, 차가 다른 것과 같다면 같이 보여주어야 합니다.\nHackerRank - Sort - ClosestNumbers 1. Question Sample Input #1 Sample Output #1 Explanation (30) - (-20) = 50, which is the smallest difference. Sample Input #2 Sample…","timeToRead":2}},{"node":{"fields":{"slug":"algorithm-javascript-hacker-rank-counting-sort-part-2"},"frontmatter":{"title":"[Algorithm/Javascript] HackerRank - CountingSort Part 2","date":"2018.03.24","category":"Algorithm","tags":["Algorithm","Javascript","HackerRank","Sort","Counting"],"banner":"/assets/covers/js.png"},"excerpt":"저번 시간에 Counting Sort Part 1을 풀어보았습니다.\n이번에는 Counting Sort Part 2를 풀어보겠습니다. 이번 알고리즘은 개수에 상관없이 정렬하면 될것으로 보입니다.\nHackerRank - Sort - CountingSort Part 2 1. Question Sample Input Sample Output 2. Process 오름차순으로 정렬한다. 3. Code","timeToRead":1}},{"node":{"fields":{"slug":"algorithm-javascript-hacker-rank-counting-sort-part-1"},"frontmatter":{"title":"[Algorithm/Javascript] HackerRank - CountingSort Part 1","date":"2018.03.24","category":"Algorithm","tags":["Algorithm","Javascript","HackerRank","Sort","Counting"],"banner":"/assets/covers/js.png"},"excerpt":"저번 시간에 삽입정렬 2개 모두 풀어보았습니다.\n이번에는 배열 안에서 같은 값의 개수를 파악하는 CountingSort를 풀어보겠습니다. 정렬되지 않은 값들에서 0~99까지의 번호순으로 개수를 파악하는 알고리즘\nHackerRank - Sort - CountingSort Part 1 1. Question Sample Input Sample Output 2. Process 0~99까지의 개수를 파악할 배열을 만든다. 0~99까지의 각 값을 배열의 인덱스로 사용하여 개수를 추가한다. 결과를 출력한다. 3. Code","timeToRead":1}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":5,"skip":40,"totalPages":14,"currentPage":9}}}
{"componentChunkName":"component---src-templates-blog-tsx","path":"/contents/12","result":{"data":{"allMarkdownRemark":{"totalCount":67,"edges":[{"node":{"excerpt":"Typescript의 Class를 사용하면서 Javascript의 Prototype에 대한 개념이 중요할 것으로 판단했습니다. 그리고, Javascript의 Module Pattern을 공부하면서 Typescript…","fields":{"slug":"javascript-typescript-prototype이란"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Javascript","date":"2018.03.05","subTitle":"","tags":["Prototype","Javascript","Typescript","Class","Module"],"title":"[Javascript/Typescript] Prototype이란?"},"html":"<p>Typescript의 Class를 사용하면서 Javascript의 Prototype에 대한 개념이 중요할 것으로 판단했습니다. 그리고, Javascript의 Module Pattern을 공부하면서 Typescript의 접근제한자 개념이 어떻게 작동되는지에 대해서 알아보고자 합니다.</p>\n<h2 id=\"prototype-link와-prototype-object\" style=\"position:relative;\"><a href=\"#prototype-link%EC%99%80-prototype-object\" aria-label=\"prototype link와 prototype object permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Prototype Link와 Prototype Object</h2>\n<p>자바스크립트에는 Prototype Link 와 Prototype Object라는 것이 존재합니다. 그리고 이 둘을 통틀어 Prototype이라고 부릅니다. 프로토타입을 좀 안다는 것은 이 둘을 완벽히 이해하고 갖고 놀 수준이 되었다는 뜻입니다.</p>\n<h2 id=\"예제로-보는-특징\" style=\"position:relative;\"><a href=\"#%EC%98%88%EC%A0%9C%EB%A1%9C-%EB%B3%B4%EB%8A%94-%ED%8A%B9%EC%A7%95\" aria-label=\"예제로 보는 특징 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>예제로 보는 특징.</h2>\n<h4 id=\"1-메모리를-줄일-수-있다상속재사용-할-수-있다\" style=\"position:relative;\"><a href=\"#1-%EB%A9%94%EB%AA%A8%EB%A6%AC%EB%A5%BC-%EC%A4%84%EC%9D%BC-%EC%88%98-%EC%9E%88%EB%8B%A4%EC%83%81%EC%86%8D%EC%9E%AC%EC%82%AC%EC%9A%A9-%ED%95%A0-%EC%88%98-%EC%9E%88%EB%8B%A4\" aria-label=\"1 메모리를 줄일 수 있다상속재사용 할 수 있다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 메모리를 줄일 수 있다.(상속/재사용 할 수 있다.)</h4>\n<ul>\n<li>\n<p>Car 객체 생성시 기다 객체에 새 값으로 할당.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>tire <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>door <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> matiz <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> avante <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">matiz.tire : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>matiz<span class=\"token punctuation\">.</span>tire<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">avante.door : </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>avante<span class=\"token punctuation\">.</span>door<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>Car Prototype 객체에 할당하여 재사용.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>tire <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>door <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>const matiz = new Car();\nconst avante = new Car();\nconsole.log(<code class=\"language-text\">matiz.tire : ${matiz.tire}</code>)\nconsole.log(<code class=\"language-text\">avante.door : ${avante.door}</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#### 2. prototype 속성은 함수만 가지고있으며. __proto__는 모든 객체가 가지고 있다.\n&gt; 함수를 정의하면 함수만 생성되는 것이 아니라 Prototype Object도 같이 생성이 됩니다.\n\n- 함수의 prototype\n```tsx\nfunction Car() {}\nCar.prototype\n// {…}\n\t// constructor: function Car()\n\t// __proto__: Object { … }</code></pre></div>\n<ul>\n<li>\n<p>결론</p>\n<ul>\n<li>prototype과 constructor(생성자), <strong>proto</strong>값을 모두 가지고 있음을 알 수 있다.</li>\n</ul>\n</li>\n<li>\n<p>함수를 받은 객체의 prototype</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'에쿠스'</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\na<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// '에쿠스'</span>\na<span class=\"token punctuation\">.</span>prototype <span class=\"token comment\">// undefined</span>\na\n<span class=\"token comment\">// {}</span>\n<span class=\"token comment\">// __proto__: {…}</span>\n\t<span class=\"token comment\">// constructor: function Car()</span>\n\t<span class=\"token comment\">// name: '에쿠스'</span>\n\t<span class=\"token comment\">// __proto__: Object { … }</span></code></pre></div>\n</li>\n<li>\n<p>결론</p>\n<ul>\n<li>함수를 받은 객체도 <code class=\"language-text\">prototype은 없다</code>, <strong>proto</strong>만 있다.</li>\n<li><strong>proto</strong> 객체의 이름이 <code class=\"language-text\">&#39;에쿠스&#39;</code>이다. 이 부분은 아래 3번과 일치된다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-proto는-객체가-생성될-때-조상이었던-함수의-prototype-object을-생성한다\" style=\"position:relative;\"><a href=\"#3-proto%EB%8A%94-%EA%B0%9D%EC%B2%B4%EA%B0%80-%EC%83%9D%EC%84%B1%EB%90%A0-%EB%95%8C-%EC%A1%B0%EC%83%81%EC%9D%B4%EC%97%88%EB%8D%98-%ED%95%A8%EC%88%98%EC%9D%98-prototype-object%EC%9D%84-%EC%83%9D%EC%84%B1%ED%95%9C%EB%8B%A4\" aria-label=\"3 proto는 객체가 생성될 때 조상이었던 함수의 prototype object을 생성한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. <strong>proto</strong>는 객체가 생성될 때 조상이었던 함수의 Prototype Object을 생성한다.</h4>\n<ul>\n<li>\n<p>Object.prototpye을 변경하지 않았을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype\n<span class=\"token comment\">// {…}</span>\n<span class=\"token comment\">// constructor: function Car()</span>\n<span class=\"token comment\">// __proto__: Object { … }</span></code></pre></div>\n</li>\n<li>\n<p>Object.prototype을 변경했을 때</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'설훈'</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype\n<span class=\"token comment\">// {…}</span>\n<span class=\"token comment\">// constructor: function Car()</span>\n\t<span class=\"token comment\">// arguments: null</span>\n\t<span class=\"token comment\">// caller: null</span>\n\t<span class=\"token comment\">// length: 0</span>\n\t<span class=\"token comment\">// name: 'Car'</span>\n\t<span class=\"token comment\">// prototype: Object { … }</span>\n<span class=\"token comment\">// proto__: Object { name: '설훈', … }</span></code></pre></div>\n</li>\n<li>\n<p>결론</p>\n<ul>\n<li>함수도 Object 객체의 일부이기 때문에, 최상의 Object.prototype을 상속받는다.</li>\n<li>\n<p>스코프의 객체 참조를 찾는 과정에서 최상단 혹은 전역변수 값을 참조하기 전에 해당 값을 찾는다면 해당 값을 참조한다.</p>\n<ul>\n<li>Car.prototype과 Object.prototype을 모두 정의하면 <code class=\"language-text\">const a = new Car()</code>의 a는 Car > Object 순으로 값을 검색한다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>__proto__\na<span class=\"token punctuation\">.</span>name <span class=\"token comment\">// 설훈</span></code></pre></div>\n<ul>\n<li>\n<p>Number</p>\n<ul>\n<li>constructor: function Number()</li>\n<li>toExponential: function toExponential()</li>\n<li>...</li>\n<li><strong>proto</strong>: Object { name: '설훈', … }</li>\n</ul>\n</li>\n<li>\n<p>결론</p>\n<ul>\n<li>모든 객체는 Object의 일부이므로 <strong>proto</strong>에서 해당 객체를 가리킨다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"4-proto속성을-통해-상위-프로토타입과-연결되어있는-형태를-prototype-chain이라고-한다\" style=\"position:relative;\"><a href=\"#4-proto%EC%86%8D%EC%84%B1%EC%9D%84-%ED%86%B5%ED%95%B4-%EC%83%81%EC%9C%84-%ED%94%84%EB%A1%9C%ED%86%A0%ED%83%80%EC%9E%85%EA%B3%BC-%EC%97%B0%EA%B2%B0%EB%90%98%EC%96%B4%EC%9E%88%EB%8A%94-%ED%98%95%ED%83%9C%EB%A5%BC-prototype-chain%EC%9D%B4%EB%9D%BC%EA%B3%A0-%ED%95%9C%EB%8B%A4\" aria-label=\"4 proto속성을 통해 상위 프로토타입과 연결되어있는 형태를 prototype chain이라고 한다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. <strong>proto</strong>속성을 통해 상위 프로토타입과 연결되어있는 형태를 Prototype Chain이라고 한다.</h4>\n<ul>\n<li>함수를 생성하면, prototpye도 같이 생성하여 prototype 객체를 통한 상속 및 재사용이 가능하다.</li>\n<li>3번에서도 알 수 있듯이, 모든 객체는 Object의 일부이기에 <strong>proto</strong>를 통해 Prototype Object의 값을 생성한다.</li>\n<li>\n<p>결론</p>\n<ul>\n<li>\n<p>이러한 Prototype Chain 구조 때문에 모든 객체는 Object의 자식이라 할 수 있으며, Object Prototype Object에 있는 모든 속성을 사용할 수 있습니다.</p>\n<ul>\n<li>예를 들면, toString 함수가 있다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li><a href=\"https://medium.com/@bluesh55/javascript-prototype-%EC%9D%B4%ED%95%B4%ED%95%98%EA%B8%B0-f8e67c286b67\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">[Javascript] 프로토타입 이해하기</a></li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Guide/Inheritance_and_the_prototype_chain\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla - Prototype에 대해</a></li>\n</ul>","id":"caaa4f32-fdb6-556b-a5c6-a5af4582cad4","timeToRead":4}},{"node":{"excerpt":"Continuous Integration doesn’t get rid of bugs, but it does make them dramatically easier to find and remove. - Martin Fowler CI…","fields":{"slug":"jenkins-ci-continuous-integration-with-jenkins-and-github-알아보고-예제-작성하기-1"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/jenkins.png","category":"Jenkins","date":"2018.03.02","subTitle":"","tags":["CI","Jenkins","Test","Pipeline","Devops"],"title":"[Jenkins/CI] Continuous Integration with Jenkins and Github 알아보고 예제 작성하기 - 1"},"html":"<blockquote>\n<p>Continuous Integration doesn’t get rid of bugs, but it does make them dramatically easier to find and remove. - Martin Fowler</p>\n</blockquote>\n<p>CI 툴을 이용한다는 것은 위 인용한 글 처럼, <strong>손 쉽게 버그를 찾고 제거하기 위함일 것입니다.</strong> 이를 위한 CI 과정과 Jenkins 예제코드를 알아보겠습니다.</p>\n<h2 id=\"pre-requirement\" style=\"position:relative;\"><a href=\"#pre-requirement\" aria-label=\"pre requirement permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Pre-Requirement</h2>\n<ul>\n<li>\n<p>Ubuntu 16.04</p>\n<ul>\n<li>다른 운영체제도 상관없지만 이번 포스트 내용은 Ubuntu 16.04를 기준으로 작성되었습니다.</li>\n</ul>\n</li>\n<li>Java 8</li>\n<li>Git</li>\n<li>Jenkins</li>\n</ul>\n<h2 id=\"contents\" style=\"position:relative;\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<h4 id=\"목록\" style=\"position:relative;\"><a href=\"#%EB%AA%A9%EB%A1%9D\" aria-label=\"목록 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>목록</h4>\n<ol>\n<li><a href=\"#1-ci%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\">CI란 무엇인가?</a></li>\n<li><a href=\"#2-jenkins%EB%9E%80\">Jenkins란?</a></li>\n<li><a href=\"#3-jenkins-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\">Jenkins 설치하기</a></li>\n<li><a href=\"#4-jenkins-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\">Jenkins 기본 설정</a></li>\n<li><a href=\"#5-jenkins-github-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EB%93%B1%EB%A1%9D%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0\">Jenkins, Github 서비스에 등록/인증하기</a></li>\n<li>\n<p><a href=\"#6-jenkins%EC%97%90%EC%84%9C--%EC%83%88%EB%A1%9C%EC%9A%B4-itemjob-%EB%A7%8C%EB%93%A4%EA%B8%B0---freestyle-pipeline\">Jenkins에서 새로운 Item(Job) 만들기</a></p>\n<ul>\n<li><a href=\"#1-freestyle-project%EB%9E%80\">Freestyle</a></li>\n<li><a href=\"#1-pipeline%EC%9D%B4%EB%9E%80\">Pipeline</a></li>\n</ul>\n</li>\n<li><a href=\"#7-%EA%B8%B0%ED%83%80-%EB%B0%8F-%EC%B6%94%EA%B0%80%EC%82%AC%ED%95%AD\">기타 및 추가사항</a></li>\n</ol>\n<sub>\n\t<img src='/assets/images/contents/20180302/Github-Jenkins.jpg' alt='Jenkins - Github'>\n\t<p> 이미지 출처 : http://cicd.life/u3-p4-configuring-jenkins-github-groovy/</p>\n</sub>\n<h2 id=\"1-ci란-무엇인가\" style=\"position:relative;\"><a href=\"#1-ci%EB%9E%80-%EB%AC%B4%EC%97%87%EC%9D%B8%EA%B0%80\" aria-label=\"1 ci란 무엇인가 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. CI란 무엇인가?</h2>\n<ul>\n<li>\n<p>Continuous Integrate, Continuous Delivery, Continuous Deploy\n<sub>\n<img src='/assets/images/contents/20180302/CICD.jpg' alt='CI(Continuouse Integration) vs CD(Continuouse Delivery) vs CD(Continuouse Deploy)'></p>\n<p> 이미지 출처 : http://skillslane.com/continuous-integration-delivery-deployment/</p>\n</sub>\n</li>\n</ul>\n<p>CI와 CD의 차이는 Process 단계의 정도로 나누어짐을 볼 수 있습니다. 해당 단계의 차이마다 조금씩의 차이가 있는 것이죠. 해당 과정을 예전에는 수동으로 했기때문에 조금만 변경되어도 많은 어려움이 있었습니다. 하지만, CI 툴이 생긴이후로 대부분의 작업들이 자동화되었습니다.</p>\n<p>그렇다면, CI 툴이 위의 모든 단계의 모든 기능을 제공하는걸까요? 반은 맞고 반은 틀리다고 할 수 있습니다. CI 툴이 순수하게 모든 기능을 다 제공하지는 않습니다. 다만, 다양한 플러그인(라이브러리) 등으로 인터페이스를 제공하고 기능을 통합하여 제공하는 것이죠.</p>\n<p>Jenkins와 Git(Github)을 연결하는 예제를 선택한 이유도 이와 같습니다. Jenkins가 Git(Github)이란 SCM(Source Code Management)을 통해 코드를 관리하고 통합(<code class=\"language-text\">Code</code>, <code class=\"language-text\">Integrate</code>)하는 기능을 제공하기 때문입니다. 엄밀히 보면 <code class=\"language-text\">Build</code>, <code class=\"language-text\">Test</code>, <code class=\"language-text\">Release</code>, <code class=\"language-text\">Deploy</code> 과정이 Jenkins가 담당하는(할 수 있는) 부분인 것이죠.</p>\n<p>즉, 이번과정에서 Jenkins와 Git(Github)를 연결하는 방법을 통해 <code class=\"language-text\">Code</code>, <code class=\"language-text\">Build</code>, <code class=\"language-text\">Integrate</code> 과정을 설명하기 위함입니다. 지금부터 알아보도록 할까요?</p>\n<h2 id=\"2-jenkins란\" style=\"position:relative;\"><a href=\"#2-jenkins%EB%9E%80\" aria-label=\"2 jenkins란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Jenkins란?</h2>\n<ul>\n<li>Jenkins는 2004년에 썬 마이크로시스템즈에서 시작된 소프트웨어이며, 지속적인 통합과 테스트를 위해 Kawaguchi Kohsuke에 의해 만들어졌습니다. 처음 이름은 Hudson이지만, 이후 분기되어 현재는 Jenkins라는 이름으로 관리되고 있습니다.</li>\n<li>Jenkins는 개발 작업을 자동화 할뿐 아니라, 파이프라인(Pipeline)을 사용해 거의 모든 언어와 소스코드에 대해 지속적인 통합(CI)과 전달(CD) 환경을 구축하는 간단한 방법을 제공합니다.</li>\n<li>Jenkins가 각각의 단계에 대한 스크립트 작성의 필요성을 없애주지는 않지만, 사용자가 쉽게 구축할 수 있는 것보다 더 빠르고 더 강력하게 빌드(Build), 테스트(Test), 그리고 배포(Deployment) 등 체인 전체를 통합할 수 있는 방법을 제공해 줍니다.</li>\n<li>\n<p>핵심 키워드</p>\n<ul>\n<li>\n<p>Item(Job)</p>\n<ul>\n<li>Executor</li>\n<li>\n<p>Node(Distributed System)</p>\n<ul>\n<li>Master - Slave</li>\n</ul>\n</li>\n<li>\n<p>SCM(Source Code Management)</p>\n<ul>\n<li>Git, SVN, etc...</li>\n</ul>\n</li>\n<li>\n<p>Build Tool</p>\n<ul>\n<li>Maven, Gradle, Ant, make, Npm, etc...</li>\n</ul>\n</li>\n<li>\n<p>Test Tool</p>\n<ul>\n<li>JUnit, Mocha, Jest, etc...</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"3-jenkins-설치하기\" style=\"position:relative;\"><a href=\"#3-jenkins-%EC%84%A4%EC%B9%98%ED%95%98%EA%B8%B0\" aria-label=\"3 jenkins 설치하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Jenkins 설치하기</h2>\n<h4 id=\"1-java-설치\" style=\"position:relative;\"><a href=\"#1-java-%EC%84%A4%EC%B9%98\" aria-label=\"1 java 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Java 설치</h4>\n<ul>\n<li>Jenkins는 자바로 구현되어 Java(Servlet container)가 필요합니다.</li>\n<li>\n<p>Java는 8버전을 설치하도록 합니다. Java 9 버전을 아직 Jenkins가 100% 지원하지 않아(<a href=\"https://www.infoworld.com/article/3234470/java/which-developer-tools-support-javas-new-modularity-features.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Which tool support Java 9</a>) 몇가지 에러가 발생합니다. Plugin설치로 해결이 가능할 것으로 보이지만 몇가지 이슈가 제기된 것으로 보입니다. 안정적인 Jenkins 사용을 위해 Java 8 버전을 설치하겠습니다.</p>\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-java-with-apt-get-on-ubuntu-16-04#managing-java\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Install Multiple Java on Ubuntu 16.04</a></li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-git-설치\" style=\"position:relative;\"><a href=\"#2-git-%EC%84%A4%EC%B9%98\" aria-label=\"2 git 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Git 설치</h4>\n<ul>\n<li>\n<p>Jenkins가 SCM(Source Code Management)으로 사용 할 Git이 필요합니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">git</span></code></pre></div>\n</li>\n</ul>\n<h4 id=\"3-jenkins-설치\" style=\"position:relative;\"><a href=\"#3-jenkins-%EC%84%A4%EC%B9%98\" aria-label=\"3 jenkins 설치 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Jenkins 설치</h4>\n<ul>\n<li>\n<p>Jenkins를 구동시키기 위해서는 Jenkins가 설치되어있는 서버가 필요합니다. Jenkins 설치와 관련한 내용은 잘 정리되어 있는 글이 많기에 추가적으로 작성하지는 않았습니다. 설치가 필요하신 분들은 아래 링크를 통해 Jenkins를 설치하시기 바랍니다.</p>\n<ul>\n<li><a href=\"https://www.digitalocean.com/community/tutorials/how-to-install-jenkins-on-ubuntu-16-04\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">How to Install Jenkins on Ubuntu 16.04</a></li>\n</ul>\n</li>\n<li>\n<p><strong>주의사항</strong></p>\n<ul>\n<li>\n<p><code class=\"language-text\">ufw enalbe</code></p>\n<ul>\n<li>방화벽을 활성화시켜줍니다. 미적용 시 <code class=\"language-text\">/github-web-hook/</code> 설정에서 방화벽에 차단되는 문제가 발생합니다.</li>\n</ul>\n</li>\n<li>추가적으로 Jenkins를 설치한 서버에 추가적인 가상 방화벽으로 차단해 둔 경우 Github Webhook의 요청이 방화벽에 차단되어 <code class=\"language-text\">Timeout error</code>가 발생합니다.</li>\n</ul>\n</li>\n</ul>\n<p>3가지 모두 설치를 완료하고 첫 계정을 생성하면 아래와 같은 그림을 볼 수 있습니다.\n<img src='/assets/images/contents/20180302/1-firstJenkins.jpg' alt='Init Jenkins'></p>\n<h2 id=\"4-jenkins-기본-설정\" style=\"position:relative;\"><a href=\"#4-jenkins-%EA%B8%B0%EB%B3%B8-%EC%84%A4%EC%A0%95\" aria-label=\"4 jenkins 기본 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Jenkins 기본 설정</h2>\n<p><code class=\"language-text\">Jenkins 관리</code>에 들어가면 많은 항목을 볼 수 있습니다. 그 중 지금 필요한 것은 3가지 설정입니다.</p>\n<h4 id=\"1-global-tool-configuration\" style=\"position:relative;\"><a href=\"#1-global-tool-configuration\" aria-label=\"1 global tool configuration permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Global Tool Configuration</h4>\n<ul>\n<li>Jenkins가 실행될 때 필요한 기본 Build Tool들의 경로를 설정하는 곳입니다.</li>\n<li>현재 Jenkins는 Build Tool로 JDK, Git, Gradle, Ant, Maven, Docker 총 6개를 기본적으로 지원하고 있습니다.</li>\n</ul>\n<p>JDK와 Git을 아래와 같이 설정해줍니다.</p>\n<img src='/assets/images/contents/20180302/2-globalToolConfig.jpg' alt='Jenkins Git Plugins'>\n<h4 id=\"2-시스템-설정\" style=\"position:relative;\"><a href=\"#2-%EC%8B%9C%EC%8A%A4%ED%85%9C-%EC%84%A4%EC%A0%95\" aria-label=\"2 시스템 설정 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 시스템 설정</h4>\n<ul>\n<li>서버관련 환경, 플러그인, 스크립트, 알림 등 다양한 Jenkins 관련 시스템 설정을 할 수 있는 곳입니다.</li>\n</ul>\n<p>시스템 설정에서는 Git config에 기본적으로 필요한 name과 email을 기본적으로 설정해줍니다.</p>\n<img src='/assets/images/contents/20180302/3-systemGitPlugin.jpg' alt='Jenkins Git Plugins'>\n<h4 id=\"3-플러그인-관리\" style=\"position:relative;\"><a href=\"#3-%ED%94%8C%EB%9F%AC%EA%B7%B8%EC%9D%B8-%EA%B4%80%EB%A6%AC\" aria-label=\"3 플러그인 관리 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 플러그인 관리</h4>\n<ul>\n<li>말 그대로 플러그인 설치/업데이트/삭제 등 플러그인을 관리할 수 있는 곳입니다.</li>\n</ul>\n<p>기본 설치시 설치되는 Git Plugins는 아래 그림으로 확인할 수 있습니다.</p>\n<img src='/assets/images/contents/20180302/4-defaultGitPlugins.jpg' alt='Jenkins Git Plugins'>\n<h2 id=\"5-jenkins-github-서비스에-등록인증하기\" style=\"position:relative;\"><a href=\"#5-jenkins-github-%EC%84%9C%EB%B9%84%EC%8A%A4%EC%97%90-%EB%93%B1%EB%A1%9D%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0\" aria-label=\"5 jenkins github 서비스에 등록인증하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Jenkins, Github 서비스에 등록/인증하기</h2>\n<h4 id=\"jenkins-github-webhook-서비스로-등록하기\" style=\"position:relative;\"><a href=\"#jenkins-github-webhook-%EC%84%9C%EB%B9%84%EC%8A%A4%EB%A1%9C-%EB%93%B1%EB%A1%9D%ED%95%98%EA%B8%B0\" aria-label=\"jenkins github webhook 서비스로 등록하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Jenkins, Github Webhook 서비스로 등록하기</h4>\n<ul>\n<li>Github 연결 할 Repositroy > Settings에서 <code class=\"language-text\">Integrations &amp; Services</code>로 Jenkins를 등록하면, 해당 Url에 맞게 <code class=\"language-text\">Webhooks</code>에 Integrations &#x26; Services 설정 값이 자동으로 저장됩니다.</li>\n<li>Services 적용 후 요청 테스트에서 Success Check이 완료되면, Integrations &#x26; Services에 있던 설정이 삭제되며, Webhooks에 맞게 저장됩니다.</li>\n<li>\n<p><strong>이전과의 변경사항</strong></p>\n<ul>\n<li>이전에는 Username/Password 혹은 Token 값 설정만으로도 Webhooks가 지원되었지만, 이제는 CI 서버와 Github Repository를 명시적으로 연결하여야지만 정상작동됩니다. 아래와 같은 방법으로 해당 Repsitory에 Jenkins 서비스를 등록하여줍니다.</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"1-아래와-같은-방식으로-repositroy--settings-찾아주시기-바랍니다\" style=\"position:relative;\"><a href=\"#1-%EC%95%84%EB%9E%98%EC%99%80-%EA%B0%99%EC%9D%80-%EB%B0%A9%EC%8B%9D%EC%9C%BC%EB%A1%9C-repositroy--settings-%EC%B0%BE%EC%95%84%EC%A3%BC%EC%8B%9C%EA%B8%B0-%EB%B0%94%EB%9E%8D%EB%8B%88%EB%8B%A4\" aria-label=\"1 아래와 같은 방식으로 repositroy  settings 찾아주시기 바랍니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 아래와 같은 방식으로 Repositroy > Settings 찾아주시기 바랍니다.</h5>\n<img src='/assets/images/contents/20180302/7-gitServiceJenkins2.jpg' alt='Webhooks1'>\n<h5 id=\"2-jenkins가-설치된-서버의-ip와-port를-입력해주시기-바랍니다\" style=\"position:relative;\"><a href=\"#2-jenkins%EA%B0%80-%EC%84%A4%EC%B9%98%EB%90%9C-%EC%84%9C%EB%B2%84%EC%9D%98-ip%EC%99%80-port%EB%A5%BC-%EC%9E%85%EB%A0%A5%ED%95%B4%EC%A3%BC%EC%8B%9C%EA%B8%B0-%EB%B0%94%EB%9E%8D%EB%8B%88%EB%8B%A4\" aria-label=\"2 jenkins가 설치된 서버의 ip와 port를 입력해주시기 바랍니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Jenkins가 설치된 서버의 IP와 Port를 입력해주시기 바랍니다.</h5>\n<ul>\n<li>아래와 같이 설정하면 <strong>Public Repository</strong>에서 추가 인증 없이 Jenkins와 Repository가 연동되어 Build Trigger가 정상작동됩니다.\n<img src='/assets/images/contents/20180302/7-gitServiceJenkins3.jpg' alt='Webhooks2'></li>\n<li>\n<p>주의사항</p>\n<ol>\n<li>Jenkins 서버 URL이 적합하지 않으면 정상작동되지 않습니다.</li>\n<li>URL 마지막에 <code class=\"language-text\">/github-webhook/</code>을 붙여주지 않아도 정상작동되지 않습니다.</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"6-jenkins에서--새로운-itemjob-만들기---freestyle-pipeline\" style=\"position:relative;\"><a href=\"#6-jenkins%EC%97%90%EC%84%9C--%EC%83%88%EB%A1%9C%EC%9A%B4-itemjob-%EB%A7%8C%EB%93%A4%EA%B8%B0---freestyle-pipeline\" aria-label=\"6 jenkins에서  새로운 itemjob 만들기   freestyle pipeline permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Jenkins에서  새로운 Item(Job) 만들기 - (Freestyle, Pipeline)</h2>\n<ul>\n<li>Item(Job)을 정의하는 곳입니다.</li>\n<li>일련의 CI 과정을 정의하는 Item(Job)을 만드는 곳이라고 생각할 수 있습니다.</li>\n<li>Item(Job) 별로 다양하며, 기본적으로 Freestyle, Pipeline 등이 있습니다.</li>\n</ul>\n<h4 id=\"이전과의-변경사항\" style=\"position:relative;\"><a href=\"#%EC%9D%B4%EC%A0%84%EA%B3%BC%EC%9D%98-%EB%B3%80%EA%B2%BD%EC%82%AC%ED%95%AD\" aria-label=\"이전과의 변경사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>이전과의 변경사항</h4>\n<ul>\n<li>\n<p>Jenkins와 Github를 연결하기 위해서는 <a href=\"https://wiki.jenkins.io/display/JENKINS/GitHub+Plugin\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">JENKINS/GitHub+Plugin</a>이 사용됩니다. 이전과 달라진 점은 Github Plugin은 업데이트(v1.25.1부터 - 현재 v1.29.0)되면서 Jenkins와 Github가 Trigger되는 이름이 바뀌었으며, 설정하는 방법도 조금 바뀌었습니다.</p>\n<ul>\n<li>\n<p>이름</p>\n<ul>\n<li>\n<p>Old</p>\n<ul>\n<li><del>Previously named as 'Build when a change is pushed to GitHub'</del></li>\n</ul>\n</li>\n<li>\n<p>New</p>\n<ul>\n<li>GitHub hook trigger for GITScm polling</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>방법</p>\n<ul>\n<li>\n<p>Old</p>\n<ul>\n<li>\n<p><del>이전에는 push가 되면 자동으로 Repository 소스를 pull하여 Build trigger가 작동되었습니다.</del> 하지만, 깃허브의 보안정책으로 인해 추가작업이 필요해졌습니다.</p>\n<ul>\n<li><a href=\"https://help.github.com/articles/about-two-factor-authentication/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">관련 깃허브 보안사항 - About Two-Factor Authentication</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>New</p>\n<ul>\n<li>새로운 방법에는 Jenkins를 해당 Github Repository 서비스로 등록해야 합니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"1-freestyle-project란\" style=\"position:relative;\"><a href=\"#1-freestyle-project%EB%9E%80\" aria-label=\"1 freestyle project란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Freestyle project란?</h4>\n<ul>\n<li>GUI를 통해 Jenkins의 기본적인 Job을 설정할 수 있습니다.</li>\n</ul>\n<h4 id=\"2-freestyle-project-설정하기\" style=\"position:relative;\"><a href=\"#2-freestyle-project-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"2 freestyle project 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Freestyle project 설정하기</h4>\n<h5 id=\"1-freestyle-project를-만듭니다\" style=\"position:relative;\"><a href=\"#1-freestyle-project%EB%A5%BC-%EB%A7%8C%EB%93%AD%EB%8B%88%EB%8B%A4\" aria-label=\"1 freestyle project를 만듭니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Freestyle project를 만듭니다.</h5>\n<img src='/assets/images/contents/20180302/5-freestyleJob.jpg' alt='FreeStyle Item'>\n<h5 id=\"2-git-repository를-연결합니다\" style=\"position:relative;\"><a href=\"#2-git-repository%EB%A5%BC-%EC%97%B0%EA%B2%B0%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"2 git repository를 연결합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Git Repository를 연결합니다.</h5>\n<img src='/assets/images/contents/20180302/6-jenkinsGitConfig1.jpg' alt='Git Repository'>\n<h5 id=\"3-build-trigger를-github-hook-trigger로-설정합니다-여기에-체크하는-것이-github에-services에-등록한-것과-연결이-됩니다\" style=\"position:relative;\"><a href=\"#3-build-trigger%EB%A5%BC-github-hook-trigger%EB%A1%9C-%EC%84%A4%EC%A0%95%ED%95%A9%EB%8B%88%EB%8B%A4-%EC%97%AC%EA%B8%B0%EC%97%90-%EC%B2%B4%ED%81%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-github%EC%97%90-services%EC%97%90-%EB%93%B1%EB%A1%9D%ED%95%9C-%EA%B2%83%EA%B3%BC-%EC%97%B0%EA%B2%B0%EC%9D%B4-%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-label=\"3 build trigger를 github hook trigger로 설정합니다 여기에 체크하는 것이 github에 services에 등록한 것과 연결이 됩니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Build Trigger를 Github hook trigger로 설정합니다. 여기에 체크하는 것이 Github에 Services에 등록한 것과 연결이 됩니다.</h5>\n<img src='/assets/images/contents/20180302/6-jenkinsGitConfig2.jpg' alt='Build Trigger'>\n<h5 id=\"4-build에서-shell에-해당-git-정보를-확인하는-script를-작성합니다\" style=\"position:relative;\"><a href=\"#4-build%EC%97%90%EC%84%9C-shell%EC%97%90-%ED%95%B4%EB%8B%B9-git-%EC%A0%95%EB%B3%B4%EB%A5%BC-%ED%99%95%EC%9D%B8%ED%95%98%EB%8A%94-script%EB%A5%BC-%EC%9E%91%EC%84%B1%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"4 build에서 shell에 해당 git 정보를 확인하는 script를 작성합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Build에서 Shell에 해당 Git 정보를 확인하는 Script를 작성합니다.</h5>\n<img src='/assets/images/contents/20180302/freestyleResult1.jpg' alt='Build Trigger'>\n<h5 id=\"5-github에-해당-branch에-새롭게-푸쉬를-해봅니다\" style=\"position:relative;\"><a href=\"#5-github%EC%97%90-%ED%95%B4%EB%8B%B9-branch%EC%97%90-%EC%83%88%EB%A1%AD%EA%B2%8C-%ED%91%B8%EC%89%AC%EB%A5%BC-%ED%95%B4%EB%B4%85%EB%8B%88%EB%8B%A4\" aria-label=\"5 github에 해당 branch에 새롭게 푸쉬를 해봅니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Github에 해당 Branch에 새롭게 푸쉬를 해봅니다.</h5>\n<h5 id=\"6-github에-push되면-jenkins에-code-classlanguage-textweb-hookcode가-전송되어-jenkins의-itemjob이-trigger되어-해당-itemjob을-수행합니다\" style=\"position:relative;\"><a href=\"#6-github%EC%97%90-push%EB%90%98%EB%A9%B4-jenkins%EC%97%90-code-classlanguage-textweb-hookcode%EA%B0%80-%EC%A0%84%EC%86%A1%EB%90%98%EC%96%B4-jenkins%EC%9D%98-itemjob%EC%9D%B4-trigger%EB%90%98%EC%96%B4-%ED%95%B4%EB%8B%B9-itemjob%EC%9D%84-%EC%88%98%ED%96%89%ED%95%A9%EB%8B%88%EB%8B%A4\" aria-label=\"6 github에 push되면 jenkins에 code classlanguage textweb hookcode가 전송되어 jenkins의 itemjob이 trigger되어 해당 itemjob을 수행합니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Github에 Push되면, Jenkins에 <code class=\"language-text\">/web-hook/</code>가 전송되어 Jenkins의 Item(Job)이 Trigger되어 해당 Item(Job)을 수행합니다.</h5>\n<ul>\n<li>Build에 정의한 Shell Script가 수행되어 아래와 같은 결과를 얻을 수 있습니다.</li>\n<li>\n<p>관련한 <a href=\"https://wiki.jenkins.io/display/JENKINS/Git+Plugin#GitPlugin-Configuration\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Environment Variable</a>을 보고싶으시면 해당 사이트에서 더 볼 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"></code></pre></div>\n</li>\n<li>echo GIT<em>COMMIT 5ea853076a700e3387970eb69c1c6d567d7193de\nGIT</em>COMMIT 5ea853076a700e3387970eb69c1c6d567d7193de</li>\n<li>echo GIT<em>PREVIOUS</em>COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92\nGIT<em>PREVIOUS</em>COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92</li>\n<li>echo GIT<em>PREVIOUS</em>SUCCESSFUL<em>COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92\nGIT</em>PREVIOUS<em>SUCCESSFUL</em>COMMIT 20fb1ef9046c39ff6cff8e2df698360876428d92</li>\n<li>echo GIT<em>BRANCH origin/master\nGIT</em>BRANCH origin/master</li>\n<li>echo GIT<em>LOCAL</em>BRANCH\nGIT<em>LOCAL</em>BRANCH</li>\n<li>echo GIT<em>URL <a href=\"https://github.com/Seolhun/test-jenkins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Seolhun/test-jenkins/</a>\nGIT</em>URL <a href=\"https://github.com/Seolhun/test-jenkins/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/Seolhun/test-jenkins/</a></li>\n<li>echo GIT<em>COMMITTER</em>NAME testJenkins\nGIT<em>COMMITTER</em>NAME testJenkins</li>\n<li>echo GIT<em>AUTHOR</em>NAME testJenkins\nGIT<em>AUTHOR</em>NAME testJenkins</li>\n<li>echo GIT<em>COMMITTER</em>EMAIL testJenkins@testJenkins.com\nGIT<em>COMMITTER</em>EMAIL testJenkins@testJenkins.com</li>\n<li>\n<p>echo GIT<em>AUTHOR</em>EMAIL testJenkins@testJenkins.com\nGIT<em>AUTHOR</em>EMAIL testJenkins@testJenkins.com</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\"></code></pre></div>\n</li>\n</ul>\n<hr>\n<h4 id=\"1-pipeline이란\" style=\"position:relative;\"><a href=\"#1-pipeline%EC%9D%B4%EB%9E%80\" aria-label=\"1 pipeline이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. <a href=\"https://jenkins.io/doc/book/pipeline/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pipeline</a>이란?</h4>\n<ul>\n<li>여러 빌드 Slave에 걸쳐있을 수있는 장기 실행 활동을 구성합니다. Pipeline(이전에는 워크 플로우라고 함)을 구축하거나 자유 작업 유형에 쉽게 들어 가지 않는 복잡한 활동을 구성하는 데 적합합니다.</li>\n<li>Pipeline은 Jenkins 2.0부터 시작되었습니다. Pipeline은 스크립트를 통해 Pipeline의 흐름을 정의하는 기능입니다. Pipeline은 <a href=\"http://groovy-lang.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Groovy</a>로 쉽게 정의할 수 있으며 Pipeline DSL을 통해 전달 파이프라인을 작성할 수 있습니다.</li>\n<li>\n<p>핵심 키워드</p>\n<ul>\n<li>\n<p>Pipeline</p>\n<ul>\n<li>Pipeline(스크립트)은 Pipeline(프로세스)을 사용자가 직접 정의할 수 있는 Pipeline입니다.</li>\n</ul>\n</li>\n<li>\n<p>Node</p>\n<ul>\n<li>Node는 Jenkins 환경의 일부로 Pipeline을 실행시키는 시스템이라고 할 수 있습니다.</li>\n</ul>\n</li>\n<li>\n<p>Stage</p>\n<ul>\n<li>Stage block은 Pipeline의 상태/진행상태 등을 시각화하는 작업의 단계를 정의합니다.</li>\n</ul>\n</li>\n<li>\n<p>Step</p>\n<ul>\n<li>Step은 젠킨스가 특정 시점에서 해야 할 일을 정의합니다.</li>\n</ul>\n</li>\n<li>\n<p>Declarative Pipeline fundamentals</p>\n<ul>\n<li>Declarative Pipeline 구문에서 파이프 라인 블록은 전체 파이프 라인에서 수행 된 모든 작업을 정의합니다.</li>\n</ul>\n</li>\n<li>\n<p>Scripted Pipeline fundamentals</p>\n<ul>\n<li>파이프라인의 핵심작업을 정의합니다.</li>\n<li>\n<p><strong>Pipeline의 작업을 노드 블록 내부로 한정하는 2가지 경우에 사용됩니다.</strong></p>\n<ul>\n<li>\n<p>작업 큐에 항목을 추가/예약하여 Node에서 Executor가 사용 가능 해지자 마자 실행됩니다.</p>\n<ul>\n<li>SCM에서 Checkout 한 파일에서 작업을 수행 할 수있는 작업 영역을 만듭니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"2-pipeline-project로-설정하기\" style=\"position:relative;\"><a href=\"#2-pipeline-project%EB%A1%9C-%EC%84%A4%EC%A0%95%ED%95%98%EA%B8%B0\" aria-label=\"2 pipeline project로 설정하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Pipeline project로 설정하기</h4>\n<h5 id=\"1-pipeline-project-만들기\" style=\"position:relative;\"><a href=\"#1-pipeline-project-%EB%A7%8C%EB%93%A4%EA%B8%B0\" aria-label=\"1 pipeline project 만들기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Pipeline Project 만들기</h5>\n<sub>\n\t<img src='/assets/images/contents/20180302/10-pipelineConfig1.jpg' alt='Build Trigger'>\n</sub>\n<h5 id=\"2-build-trigger를-github-hook-trigger로-설정합니다-여기에-체크하는-것이-github에-services에-등록한-것과-연결이-됩니다\" style=\"position:relative;\"><a href=\"#2-build-trigger%EB%A5%BC-github-hook-trigger%EB%A1%9C-%EC%84%A4%EC%A0%95%ED%95%A9%EB%8B%88%EB%8B%A4-%EC%97%AC%EA%B8%B0%EC%97%90-%EC%B2%B4%ED%81%AC%ED%95%98%EB%8A%94-%EA%B2%83%EC%9D%B4-github%EC%97%90-services%EC%97%90-%EB%93%B1%EB%A1%9D%ED%95%9C-%EA%B2%83%EA%B3%BC-%EC%97%B0%EA%B2%B0%EC%9D%B4-%EB%90%A9%EB%8B%88%EB%8B%A4\" aria-label=\"2 build trigger를 github hook trigger로 설정합니다 여기에 체크하는 것이 github에 services에 등록한 것과 연결이 됩니다 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Build Trigger를 Github hook trigger로 설정합니다. 여기에 체크하는 것이 Github에 Services에 등록한 것과 연결이 됩니다.</h5>\n<sub>\n\t<img src='/assets/images/contents/20180302/6-jenkinsGitConfig2.jpg' alt='Build Trigger'>\n</sub>\n<h5 id=\"3-github에서-pipeline-trigger\" style=\"position:relative;\"><a href=\"#3-github%EC%97%90%EC%84%9C-pipeline-trigger\" aria-label=\"3 github에서 pipeline trigger permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Github에서 Pipeline Trigger</h5>\n<ul>\n<li><a href=\"https://jenkins.io/doc/pipeline/steps/workflow-scm-step/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Pipeline SCM Step</a>은 여기서 더 알아볼 수 있습니다.\n<sub>\n<img src='/assets/images/contents/20180302/10-pipelineConfig2.jpg' alt='Build Trigger'>\n</sub></li>\n<li>Script Path에 Jenkinsfile로 Script를 정의했다고 알려주면, 해당 branch에 Jenkinsfile을 읽어 Script를 수행합니다.</li>\n</ul>\n<h5 id=\"4-jenkinsfile\" style=\"position:relative;\"><a href=\"#4-jenkinsfile\" aria-label=\"4 jenkinsfile permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Jenkinsfile</h5>\n<ul>\n<li>\n<p>Jenkinsfile은 Pipeline을 정의하기 위한 Jenkinsfile 형식입니다. Jenkinsfile은 Declaretive, Scripted 모두 지원하며 지속적으로 Pipelines들을 전달하여 손쉽게 CI환경을 구축할 수 있습니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">node <span class=\"token punctuation\">{</span>\n<span class=\"token comment\">// 1번 Stage</span>\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1. Clone sources with Git Plugin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">def</span> gitValues <span class=\"token operator\">=</span> git credentialsId<span class=\"token punctuation\">:</span> <span class=\"token string\">'JenkinsGithubUser'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span><span class=\"token string\">'https://github.com/Seolhun/test-jenkins.git'</span>\n\techo <span class=\"token string\">'GIT_COMMIT : ${gitValues.GIT_COMMIT}'</span>\n\techo <span class=\"token string\">'GIT_PREVIOUS_COMMIT : ${gitValues.GIT_PREVIOUS_COMMIT}'</span>\n\techo <span class=\"token string\">'GIT_PREVIOUS_SUCCESSFUL_COMMIT : ${gitValues.GIT_PREVIOUS_SUCCESSFUL_COMMIT}'</span>\n\techo <span class=\"token string\">'GIT_BRANCH : ${gitValues.GIT_BRANCH}'</span>\n\techo <span class=\"token string\">'GIT_LOCAL_BRANCH : ${gitValues.GIT_LOCAL_BRANCH}'</span>\n\techo <span class=\"token string\">'GIT_COGIT_URLMMIT : ${gitValues.GIT_URL}'</span>\n\techo <span class=\"token string\">'GIT_COMMITTER_NAME : ${gitValues.GIT_COMMITTER_NAME}'</span>\n\techo <span class=\"token string\">'GIT_AUTHOR_NAME : ${gitValues.GIT_AUTHOR_NAME}'</span>\n\techo <span class=\"token string\">'GIT_COMMITTER_EMAIL : ${gitValues.GIT_COMMITTER_EMAIL}'</span>\n\techo <span class=\"token string\">'GIT_AUTHOR_EMAIL : ${gitValues.GIT_AUTHOR_EMAIL}'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 2번 Stage</span>\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2. Clone sources with SCM Step Plugin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">def</span> gitValues <span class=\"token operator\">=</span> checkout scm\n\techo <span class=\"token string\">'GIT_COMMIT : ${gitValues.GIT_COMMIT}'</span>\n\techo <span class=\"token string\">'GIT_PREVIOUS_COMMIT : ${gitValues.GIT_PREVIOUS_COMMIT}'</span>\n\techo <span class=\"token string\">'GIT_PREVIOUS_SUCCESSFUL_COMMIT : ${gitValues.GIT_PREVIOUS_SUCCESSFUL_COMMIT}'</span>\n\techo <span class=\"token string\">'GIT_BRANCH : ${gitValues.GIT_BRANCH}'</span>\n\techo <span class=\"token string\">'GIT_LOCAL_BRANCH : ${gitValues.GIT_LOCAL_BRANCH}'</span>\n\techo <span class=\"token string\">'GIT_COGIT_URLMMIT : ${gitValues.GIT_URL}'</span>\n\techo <span class=\"token string\">'GIT_COMMITTER_NAME : ${gitValues.GIT_COMMITTER_NAME}'</span>\n\techo <span class=\"token string\">'GIT_AUTHOR_NAME : ${gitValues.GIT_AUTHOR_NAME}'</span>\n\techo <span class=\"token string\">'GIT_COMMITTER_EMAIL : ${gitValues.GIT_COMMITTER_EMAIL}'</span>\n\techo <span class=\"token string\">'GIT_AUTHOR_EMAIL : ${gitValues.GIT_AUTHOR_EMAIL}'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 3번 Stage</span>\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Build'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\techo <span class=\"token string\">'Building...'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 4번 Stage</span>\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\techo <span class=\"token string\">'Testing...'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// 5번 Stage</span>\n<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Deploy'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\techo <span class=\"token string\">'Deploying...'</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p>Jenkinsfile 분석</p>\n<ul>\n<li>\n<p>참고사항</p>\n<ul>\n<li>\n<p><a href=\"https://jenkins.io/doc/pipeline/steps/git/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins Pipeline Git</a></p>\n<ul>\n<li><a href=\"https://plugins.jenkins.io/git\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins Git Plugin</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://jenkins.io/doc/pipeline/steps/workflow-scm-step/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins Pipeline SCM step</a></p>\n<ul>\n<li><a href=\"https://plugins.jenkins.io/workflow-scm-step\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins Pipeline:SCM Step Plugin</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>1번 Stage</p>\n<ul>\n<li>Git Plugin을 사용하여 Github에 접근합니다. <strong>해당 Job에 credentials를 정의하고 credentialId 변수를 줌으로써 정상작동합니다.</strong></li>\n</ul>\n</li>\n<li>\n<p>2번 Stage</p>\n<ul>\n<li>Pipeline:SCM Step Plugin을 사용하여 Github에 접근합니다. <strong>해당 Job에 credentials 정의하고 선택해야 기능이 정상작동합니다.</strong></li>\n</ul>\n</li>\n<li>\n<p>나머지 스테이지는 각 기능 별로 필요한 기능을 정의하여 사용할 수 있습니다.</p>\n<ul>\n<li>\n<p><a href=\"https://qa.nuxeo.org/jenkins/pipeline-syntax/globals\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins Global Variables</a></p>\n<ul>\n<li>WORKSPACE 등 다양한 Jenkins 전역 변수를 통해 Artifact 등에 접근하여 Test 및 Deploy를 실행할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>해당 Jenkins 파일을 실행하면 아래와 같은 결과가 나옵니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">GIT_COMMIT <span class=\"token builtin class-name\">:</span> 6be818a0007ce1b07bec3426d610314e89e1c52b\nGIT_PREVIOUS_COMMIT <span class=\"token builtin class-name\">:</span> 0ffbbe45b353aa46a048df4aaabd1257c00d79ba\nGIT_PREVIOUS_SUCCESSFUL_COMMIT <span class=\"token builtin class-name\">:</span> 0ffbbe45b353aa46a048df4aaabd1257c00d79ba\nGIT_BRANCH <span class=\"token builtin class-name\">:</span> origin/master\nGIT_LOCAL_BRANCH <span class=\"token builtin class-name\">:</span> null\nGIT_COGIT_URLMMIT <span class=\"token builtin class-name\">:</span> https://github.com/Seolhun/test-jenkins\nGIT_COMMITTER_NAME <span class=\"token builtin class-name\">:</span> testJenkins\nGIT_AUTHOR_NAME <span class=\"token builtin class-name\">:</span> testJenkins\nGIT_COMMITTER_EMAIL <span class=\"token builtin class-name\">:</span> testJenkins@testJenkins.com\nGIT_AUTHOR_EMAIL <span class=\"token builtin class-name\">:</span> testJenkins@testJenkins.com</code></pre></div>\n</li>\n</ul>\n<h2 id=\"7-기타-및-추가사항\" style=\"position:relative;\"><a href=\"#7-%EA%B8%B0%ED%83%80-%EB%B0%8F-%EC%B6%94%EA%B0%80%EC%82%AC%ED%95%AD\" aria-label=\"7 기타 및 추가사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. 기타 및 추가사항</h2>\n<h4 id=\"1-jenkins-blue-ocean\" style=\"position:relative;\"><a href=\"#1-jenkins-blue-ocean\" aria-label=\"1 jenkins blue ocean permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a><a href=\"https://jenkins.io/projects/blueocean/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">1. Jenkins Blue Ocean</a></h4>\n<ul>\n<li>Jenkins의 Pipeline을 다양하게 보고 조작할 수 있는 UI/UX를 최신으로 제공해줍니다.\n<img src='/assets/images/contents/20180302/7-etc-blueOcean.jpg'></li>\n</ul>\n<h4 id=\"2-credentials를-이용하기-전-주의-사항\" style=\"position:relative;\"><a href=\"#2-credentials%EB%A5%BC-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0-%EC%A0%84-%EC%A3%BC%EC%9D%98-%EC%82%AC%ED%95%AD\" aria-label=\"2 credentials를 이용하기 전 주의 사항 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Credentials를 이용하기 전 주의 사항</h4>\n<ul>\n<li>\n<p>참고자료</p>\n<ul>\n<li><a href=\"https://issues.jenkins-ci.org/browse/JENKINS-32417\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins Git Plugin Credential Issue1</a></li>\n<li><a href=\"https://groups.google.com/forum/#!msg/jenkinsci-users/MkSJvvNFQCk/DAYdcIKaCAAJ\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins Git Plugin Credential Issue2</a></li>\n</ul>\n</li>\n<li>\n<p>결론</p>\n<ul>\n<li>User Credential이 System이 운영하는 Job 구성에 나타나서는 안되기 때문에 Job에서 Credentials가 모두 보이지 않는 것은 결함이 아닌 것으로 보는게 맞습니다.</li>\n<li>User Credential을 매개 변수화하면 User Credentials을 올바르게 표시할 수 있습니다. 작업을 빌드 할 때 사용자에게 속한 자격 증명을 성공적으로 선택할 수 있습니다.</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"3-credential을-이용하여-github-인증하기private-repository\" style=\"position:relative;\"><a href=\"#3-credential%EC%9D%84-%EC%9D%B4%EC%9A%A9%ED%95%98%EC%97%AC-github-%EC%9D%B8%EC%A6%9D%ED%95%98%EA%B8%B0private-repository\" aria-label=\"3 credential을 이용하여 github 인증하기private repository permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Credential을 이용하여 Github 인증하기(Private Repository)</h4>\n<ul>\n<li>Jenkins는 Github Service에 등록하여 Webhooks와는 잘 연결이 되었습니다. 하지만, 추가적으로 Private Repository에 접근하기 위해서는 인증과정이 필요합니다.</li>\n</ul>\n<h5 id=\"1-username-with-password\" style=\"position:relative;\"><a href=\"#1-username-with-password\" aria-label=\"1 username with password permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Username with Password</h5>\n<ul>\n<li>Github 계정 아이디(Eamil/Name)와 비밀번호로 인증합니다.</li>\n<li>Jenkins Item(Job)에 credentials에 설정하면 해당 Github Repository와의 연결을 인증할 수 있습니다.</li>\n</ul>\n<p> - Credentials를 생성할 때 보이는 ID가 credeintalsId에 입력되는 값입니다.</p>\n<img src='/assets/images/contents/20180302/selectCredential.jpg' alt='Build Trigger'>\n- 위처럼 정의한 credentials에 ID는 아래 Pipeline Script 정의에서 `credentialsId`로 작동됩니다.\n\t- Private Repository의 경우 사용됩니다.\n<h5 id=\"2-secret-text--oauth2-token-받기\" style=\"position:relative;\"><a href=\"#2-secret-text--oauth2-token-%EB%B0%9B%EA%B8%B0\" aria-label=\"2 secret text  oauth2 token 받기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Secret Text : Oauth2 Token 받기</h5>\n<ol>\n<li>\n<p>Oauth2 Token 생성하러 가기</p>\n<ul>\n<li>Settings > Developer settings > Personal access tokens\n<img src='/assets/images/contents/20180302/8-oauth2Token1.jpg' alt='Oauth2 Token1'></li>\n</ul>\n</li>\n<li>Oauth2 Token 생성하기\n<img src='/assets/images/contents/20180302/8-oauth2Token2.jpg' alt='Oauth2 Token2'></li>\n<li>Oauth2 Token 권한 설정\n<img src='/assets/images/contents/20180302/8-oauth2Token3.jpg' alt='Oauth2 Token3'></li>\n<li>\n<p>Oauth2 Token 값 받기</p>\n<ul>\n<li>해당 값을 credentials로 생성시, <code class=\"language-text\">Secret Text</code>에 입력하여줍니다.\n<img src='/assets/images/contents/20180302/8-oauth2Token4.jpg' alt='Oauth2 Token3'></li>\n</ul>\n</li>\n</ol>\n<h5 id=\"3-credentials를-binding하여-pipeline에서-이용하기\" style=\"position:relative;\"><a href=\"#3-credentials%EB%A5%BC-binding%ED%95%98%EC%97%AC-pipeline%EC%97%90%EC%84%9C-%EC%9D%B4%EC%9A%A9%ED%95%98%EA%B8%B0\" aria-label=\"3 credentials를 binding하여 pipeline에서 이용하기 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Credentials를 Binding하여 Pipeline에서 이용하기</h5>\n<ul>\n<li>\n<p>참고사항</p>\n<ul>\n<li><a href=\"https://jenkins.io/doc/pipeline/steps/credentials-binding/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Credentials Binding Plugin</a></li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"groovy\"><pre class=\"language-groovy\"><code class=\"language-groovy\">node <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'1. Clone sources with Git Plugin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">def</span> gitValues <span class=\"token operator\">=</span> git credentialsId<span class=\"token punctuation\">:</span> <span class=\"token string\">'JenkinsGithubUser'</span><span class=\"token punctuation\">,</span> url<span class=\"token punctuation\">:</span><span class=\"token string\">'https://github.com/Seolhun/test-jenkins.git'</span>\n\t\techo <span class=\"token string\">'GIT_COMMIT : ${gitValues.GIT_COMMIT}'</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'2. Clone sources with SCM Step Plugin'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">def</span> gitValues <span class=\"token operator\">=</span> checkout scm\n\t\techo <span class=\"token string\">'GIT_COMMIT : ${gitValues.GIT_COMMIT}'</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Binding Credentials'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// credentials block with Github Username/Password</span>\n\t\t<span class=\"token function\">withCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">usernamePassword</span><span class=\"token punctuation\">(</span>credentialsId<span class=\"token punctuation\">:</span> <span class=\"token string\">'JenkinsGithubUser'</span><span class=\"token punctuation\">,</span> passwordVariable<span class=\"token punctuation\">:</span> <span class=\"token string\">'GIT_PASSWORD'</span><span class=\"token punctuation\">,</span> usernameVariable<span class=\"token punctuation\">:</span> <span class=\"token string\">'GIT_USERNAME'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\techo <span class=\"token string\">'$GIT_USERNAME'</span>\n\t\t\techo <span class=\"token string\">'$GIT_PASSWORD'</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t\t<span class=\"token comment\">// credentials block with GithubToken</span>\n\t\t<span class=\"token function\">withCredentials</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>credentialsId<span class=\"token punctuation\">:</span> <span class=\"token string\">'JenkinsGithubToken'</span><span class=\"token punctuation\">,</span> variable<span class=\"token punctuation\">:</span> <span class=\"token string\">'TOKEN'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\techo <span class=\"token string\">'$TOKEN'</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Build'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\techo <span class=\"token string\">'Building...'</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Test'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\techo <span class=\"token string\">'Testing...'</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">stage</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Deploy'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\techo <span class=\"token string\">'Deploying...'</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>\n<p>withCredentials를 통해 해당 블록에서 추가적인 Credentials를 적용할 수 있습니다.</p>\n<ul>\n<li>해당 값들은 ****로 출력될뿐 정상값으로 사용됩니다.</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"결론\" style=\"position:relative;\"><a href=\"#%EA%B2%B0%EB%A1%A0\" aria-label=\"결론 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>결론</h2>\n<p>Jenkins 설치부터 Github 연결, 그리고 Pipeline까지 다양하게 알아봤습니다. 특히, Jenkins와 Git(Github)를 연결하여 <code class=\"language-text\">Code &gt; Build</code>가 일어나는 과정을 알아보았습니다. <code class=\"language-text\">Build Trigger</code>가 되어 해당 코드들이 Build/Test가 되는 과정은 생략되었습니다만, 해당 Script 혹은 Item 별로 각 Stage에 적절한 Pipeline을 구현해준다면 Build/Test까지도 구현가능 할 수 있습니다.</p>\n<p>이번 과정을 통해 Jenkins와 Git(Github)를 통해 끊임없이 코드가 빌드/테스트/통합 등 일련의 과정을 머리 속에 그리실 수 있었을 것이라고 생각합니다. 또한, FreeStyle과 Pipeline의 변화를 보며, Jenkins 2.0부터 큰 변화라고 느끼실 수 있었을 것입니다. 이전의 방식(Freestyle)으로는 코드가 없어 재사용이 전혀 없고 추가/수정 마다 큰 어려움 있었습니다. 하지만, Pipeline을 통해서는 해당 흐름을 모두 코드로 정의할 수 있게 되어 재사용성 및 가독성 모두가 좋아졌습니다. 거기다가 BlueOcean이라는 뛰어난 UI/UX 플러그인을 통해 대부분의 기능들을 쉽게 적용시킬 수 있습니다. 이 외에도 Jenkins에서 Docker를 사용하여 Build/Test System의 환경을 자동화할 수 있는 부분이 더 많아습니다. 또한, 이를 통해 Node 별 분산 시스템 구현도 예전보다 쉬워졌으리라 판단합니다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://jenkins.io/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins</a></li>\n<li><a href=\"https://jenkins.io/projects/blueocean/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins Blue Ocean</a></li>\n<li><a href=\"https://jenkins.io/solutions/github/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Jenkins with Github</a></li>\n<li><a href=\"https://wiki.jenkins.io/display/JENKINS/Meet+Jenkins\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Meet Jenkins Wiki</a></li>\n<li><a href=\"https://www.infoworld.com/article/3239666/devops/what-is-jenkins-the-ci-server-explained.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">What is Jenkins from InfoWorld</a></li>\n<li><a href=\"https://www.atlassian.com/continuous-delivery/ci-vs-ci-vs-cd\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Continuouse Integration vs Continuouse Delivery</a></li>\n<li><a href=\"https://www.thoughtworks.com/continuous-integration\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Thoughtworks - CI</a></li>\n</ul>","id":"b83eca97-b80e-594c-a29e-0127570720a4","timeToRead":20}},{"node":{"excerpt":"Singleton Pattern을 구현하면서 static이 Javascript에서는 어떻게 작동되는지 궁금하여 간단히 알아보았습니다. Goal 의 작동원리와 활용법 이해 Typescript와 Javascript의 코드 차이를 이해한다. Overview…","fields":{"slug":"javascript-typescript-static이란"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Javascript","date":"2018.02.27","subTitle":"","tags":["Prototype","Javascript","Typescript","Class","Module"],"title":"[Javascript/Typescript] Static이란?"},"html":"<p>Singleton Pattern을 구현하면서 static이 Javascript에서는 어떻게 작동되는지 궁금하여 간단히 알아보았습니다.</p>\n<h2 id=\"goal\" style=\"position:relative;\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h2>\n<ul>\n<li><code class=\"language-text\">static</code>의 작동원리와 활용법 이해</li>\n<li>Typescript와 Javascript의 코드 차이를 이해한다.</li>\n</ul>\n<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<p>정적 메서드는 클래스의 인스턴스 없이 호출이 가능하며 클래스가 인스턴스화되면 호출할 수 없다. 정적 메서드는 종종 어플리케이션의 유틸리티 함수를 만드는데 사용된다.</p>\n<h2 id=\"content\" style=\"position:relative;\"><a href=\"#content\" aria-label=\"content permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content</h2>\n<ol>\n<li>\n<p>클래스 생성자 및 다른 메서드에서의 호출</p>\n<ul>\n<li>정적 메서드가 비정적 메서드에서 키워드 <code class=\"language-text\">this</code>를 써서는 직접적인 접근을 할 수 없다. 바른 호출 방법은 클래스 명칭을 쓰거나, 직접 CLASSNAME.STATIC<em>METHOD</em>NAME()을 이용하거나 혹은 그 메서드를 생성자의 한 속성으로 부르는 것으로, 즉 constructor : this.constructor.STATIC<em>METHOD</em>NAME()를 이용한다.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> Helpers <span class=\"token operator\">=</span> <span class=\"token comment\">/** @class */</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">function</span> <span class=\"token function\">Helpers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n    Helpers<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">calcCircumference</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">diameter</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">*</span> diameter<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    Helpers<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> Helpers<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span> <span class=\"token operator\">*</span> Helpers<span class=\"token punctuation\">.</span><span class=\"token constant\">PI</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 6.28</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>Helpers<span class=\"token punctuation\">.</span><span class=\"token function\">calcCircumference</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 25.12</span></code></pre></div>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<ul>\n<li>Javascript에서 static은 결국, 해당 instance를 class 혹은 function 안에 객체를 선언하여 해당 값을 담아놓는 것이다.</li>\n<li>\n<p>Typescript와 Javascript 코드를 같이 보면 이것이 더 명확해진다.</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">StaticClass</span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> size<span class=\"token operator\">:</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> <span class=\"token function\">getStaticClassSize</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">var</span> StaticClass <span class=\"token operator\">=</span> <span class=\"token comment\">/** @class */</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\nSingleton<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> <span class=\"token number\">20</span><span class=\"token punctuation\">;</span>\nStaticClass<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">getStaticClassSize</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">return</span> StaticClass\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Reference/Classes/static\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/Javascript/Reference/Classes/static</a></li>\n</ul>","id":"93c5895c-934e-521a-afb5-7166a6e8634f","timeToRead":1}},{"node":{"excerpt":"디자인 패턴의 Singleton Pattern에 대해서 간단히 정리해보았습니다. Singleton이란 싱글턴 패턴(Singleton pattern…","fields":{"slug":"typescript-singleton-pattern이란"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Javascript","date":"2018.02.27","subTitle":"","tags":["Typescript","Singleton","Static","Private"],"title":"[Typescript] Singleton Pattern이란?"},"html":"<p>디자인 패턴의 Singleton Pattern에 대해서 간단히 정리해보았습니다.</p>\n<h2 id=\"singleton이란\" style=\"position:relative;\"><a href=\"#singleton%EC%9D%B4%EB%9E%80\" aria-label=\"singleton이란 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Singleton이란</h2>\n<ul>\n<li>싱글턴 패턴(Singleton pattern)을 따르는 클래스는, 생성자가 여러 차례 호출되더라도 실제로 생성되는 객체는 하나이고 최초 생성 이후에 호출된 생성자는 최초의 생성자가 생성한 객체를 리턴한다. 이와 같은 디자인 유형을 싱글턴 패턴이라고 한다. 주로 공통된 객체를 여러개 생성해서 사용하는 DBCP(DataBase Connection Pool)와 같은 상황에서 많이 사용된다.</li>\n<li>싱글톤 패턴은 가장 단순한 디자인 패턴 중 하나입니다. 이 유형의 디자인 패턴은 오브젝트를 생성하는 가장 좋은 방법 중 하나를 제공하므로이 패턴은 Creational Patterns에 속해 있습니다. <strong>이 패턴은 단일 객체 만 생성되도록하면서 객체를 만드는 단일 클래스를 포함합니다. 이 클래스는 클래스 객체를 인스턴스화하지 않고 직접 액세스 할 수있는 유일한 객체에 접근하는 방법을 제공합니다.</strong></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Singleton</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> instance<span class=\"token operator\">:</span> Singleton<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Singleton<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">get</span> <span class=\"token function\">getInstance</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Singleton<span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Singleton<span class=\"token punctuation\">.</span>instance <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Singleton</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>instance<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> Singleton<span class=\"token punctuation\">;</span></code></pre></div>\n<h2 id=\"내용\" style=\"position:relative;\"><a href=\"#%EB%82%B4%EC%9A%A9\" aria-label=\"내용 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>내용</h2>\n<ol>\n<li>객체를 생성하지 않고 같은 객체로 메소드와 변수를 사용할 수 있다.</li>\n<li><code class=\"language-text\">this</code>와 <code class=\"language-text\">instance</code>는 <strong>같은 값을 갖고 있지만, 항상 같진 않다.</strong> (3번과 연관)</li>\n<li>생성자를 사용하면 결국 다른 주소값을 반환한다. 즉, 생성자를 사용하여 값을 비교하면 결코 같을 수 없다.</li>\n<li>즉, 1개의 주소값을 갖고 있기때문에, 생성된 값과 비교하면 항상 같은 값을 얻을 수 있다.</li>\n<li>\n<p>static</p>\n<ul>\n<li>동일한 클래스 내의 다른 정적 메서드 내에서 정적 메서드를 호출하는 경우 키워드 <code class=\"language-text\">this</code>를 사용할 수 있다</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"reference\" style=\"position:relative;\"><a href=\"#reference\" aria-label=\"reference permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Reference</h2>\n<ul>\n<li>\n<p><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Reference/Classes/static\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozila - Static</a></p>\n<ul>\n<li>정적 메서드는 클래스의 인스턴스 없이 호출이 가능하며 클래스가 인스턴스화되면 호출할 수 없다. 정적 메서드는 종종 어플리케이션의 유틸리티 함수를 만드는데 사용된다.</li>\n</ul>\n</li>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Equality_comparisons_and_sameness\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozila - Equality<em>comparisons</em>and_sameness</a></li>\n<li><a href=\"https://hashnode.com/post/does-javascript-use-stack-or-heap-for-memory-allocation-or-both-cj5jl90xl01nh1twuv8ug0bjk\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Does Javascript use stack or heap for memory allocation or both?</a></li>\n</ul>","id":"e29cf692-47c1-5539-b0fc-9e3586879efd","timeToRead":2}},{"node":{"excerpt":"Singleton 디자인 패턴을 사용하면서 Javascript의 new에 대한 개념을 더 정확히 알아야된다고 생각하여 작성하게 되었습니다. Goal  생성자의 작동원리와 활용법 이해 Typescript와 Javascript의 코드 차이를 이해한다. Overview…","fields":{"slug":"javascript-typescript-javascript-new-constructor란"},"frontmatter":{"author":"Seolhun","banner":"/assets/covers/js.png","category":"Javascript","date":"2018.02.27","subTitle":"","tags":["New","Constructor","Singleton"],"title":"[Javascript/Typescript] Javascript new, constructor란?"},"html":"<p>Singleton 디자인 패턴을 사용하면서 Javascript의 new에 대한 개념을 더 정확히 알아야된다고 생각하여 작성하게 되었습니다.</p>\n<h2 id=\"goal\" style=\"position:relative;\"><a href=\"#goal\" aria-label=\"goal permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Goal</h2>\n<ul>\n<li><code class=\"language-text\">new</code> 생성자의 작동원리와 활용법 이해</li>\n<li>Typescript와 Javascript의 코드 차이를 이해한다.</li>\n</ul>\n<h2 id=\"overview\" style=\"position:relative;\"><a href=\"#overview\" aria-label=\"overview permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Overview</h2>\n<ul>\n<li>클래스에는 'constructor'라는 이름을 가진 특별한 메소드를 하나씩 가질 수 있습니다. 하나 이상의 생성자 메소드가 발견되면 SyntaxError 에러가 발생합니다.</li>\n<li>생성자 메서드는 class를 상속받아 구현하였을 시, 'super' 키워드를 사용하여 상위(상속) 클래스의 생성자 메소드를 호출할 수 있습니다.</li>\n<li>만약 생성자 메소드를 저장하지 않을 경우, 기본 생성자 메소드가 사용됩니다.</li>\n</ul>\n<h2 id=\"content\" style=\"position:relative;\"><a href=\"#content\" aria-label=\"content permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Content</h2>\n<ul>\n<li>\n<p>사용자 정의 객체를 생성에는 두 단계가 필요하다.</p>\n<ul>\n<li>함수를 작성하여 객체 타입을 정의한다.</li>\n<li>new 연산자로 객체의 인스턴스를 생성한다.</li>\n</ul>\n</li>\n<li>객체의 타입을 정의하기 위해, 객체의 이름과 속성을 명세하는 함수를 만든다. 객체는 그 자체가 또 다른 객체인 속성를 가질 수 있다.</li>\n<li>\n<p>코드 new Foo(...)가 실행될 때 다음과 같은 일이 발생한다.</p>\n<ol>\n<li><strong>Foo.prototype을 상속하는 새로운 객체가 하나 생성된다.</strong></li>\n<li>명시된 인자 그리고 새롭게 생성된 객체에 바인드된 this와 함께 생성자 함수 Foo 가 호출된다. new Foo는 new Foo()와 동일한다. 즉 인자가 명시되지 않은 경우, 인자 없이 Foo가 호출된다.</li>\n<li>생성자 함수에 의해 리턴된 객체는 전체 new호출 결과가 된다. 만약 생성자 함수가 명시적으로 객체를 리턴하지 않는 경우, 첫번째 단계에서 생성된 객체가 대신 사용된다.(일반적으로 생성자는 값을 리턴하지 않는다. 그러나, 일반적인 객체 생성을 재정의(override)하기 원한다면 그렇게 하도록 선택할 수 있다.)</li>\n</ol>\n</li>\n<li>이전에 정의된 객체에 속성을 항상 추가할 수 있다. 예를 들면, car1.color = 'black' 구문은 color속성을 car1에 추가한다. 그리고 그 값을 'black' 할당한다. 그러나, 이것 이 다른 객체들에게는 전혀 영향을 주지 않는다. 동일한 타입의 모든 객체들에게 새로운 속성을 추가하려면, Car객체 타입의 정의에 이 속성을 추가해야한다.</li>\n<li>Function.prototype 속성을 사용하여 이전에 정의된 객체 타입에 공유 속성을 추가할 수 있다. 이것은 객체 타입의 인스턴스 하나에만 적용되는 것이 아니라 이 함수로 생성하는 모든 객체와 공유하는 속성을 정의한다.</li>\n<li>다음의 코드는 car 타입의 모든 객체에 null값을 갖는 color 속성을 추가한다. 그리고 car1객체 인스턴스에서만 이 값을 문자열 'black'으로 덮어 쓴다. 더 많은 정보는 prototype을 본다.</li>\n</ul>\n<h2 id=\"examples\" style=\"position:relative;\"><a href=\"#examples\" aria-label=\"examples permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Examples</h2>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">function</span> <span class=\"token function\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">var</span> car1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Car</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// undefined</span>\n<span class=\"token class-name\">Car</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// null</span>\ncar1<span class=\"token punctuation\">.</span>color <span class=\"token operator\">=</span> <span class=\"token string\">'black'</span><span class=\"token punctuation\">;</span>\n<span class=\"token builtin\">console</span><span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>car1<span class=\"token punctuation\">.</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// black</span></code></pre></div>\n<h2 id=\"review\" style=\"position:relative;\"><a href=\"#review\" aria-label=\"review permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Review</h2>\n<p>new에 대해서 공부를 하게 된 이유는, <code class=\"language-text\">Singleton Pattern</code>을 학습하다가, new를 통해 반환된 instance가 기존 instance와 다른 결과를 가져오는 것을 확인해서이다.\n이것이 이질적으로 느껴진 점은 Java에서의 Singleton은 해당 Instance가 생성되면 Singleton의 의미처럼, 해당 객체를 생성해도 이미 생성되어진 Instance를 반환하기 때문이다. 그래서 해당 결과 값이 같은 주소 값은 물론이며 값이 달라지지 않음을 보장해준다. 고민 끝에 내린 결론은, Java가 컴파일 언어의 특징을 갖고있기 때문이라고 생각한다. static으로 생성된 Singleton은 Java에서 해당 값이 컴파일 시 Stack의 메모리를 고정적으로 할당해준다. 하지만, Javascript는 Compile언어가 아니므로, static으로 선언해도 해당 instance를 static으로 정적메모리를 할당해주지만, 생성자를 통해 해당 function을 다시 호출하면 생성과 초기화가 이루어져 기존의 값을 다른 주소값으로 반환해준다.</p>\n<h2 id=\"references\" style=\"position:relative;\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Reference/Operators/new\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://developer.mozilla.org/ko/docs/Web/Javascript/Reference/Operators/new</a></li>\n</ul>","id":"ac280769-83c5-5818-9e37-18997b7d8b75","timeToRead":2}}]}},"pageContext":{"limit":5,"skip":55,"totalPages":14,"currentPage":12}}}
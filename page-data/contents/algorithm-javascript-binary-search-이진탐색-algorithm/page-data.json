{"componentChunkName":"component---src-templates-post-tsx","path":"/contents/algorithm-javascript-binary-search-이진탐색-algorithm","webpackCompilationHash":"4b0376e8407e08e45af8","result":{"data":{"markdownRemark":{"html":"<p>이번에는 검색 시 자주 사용되는 이진검색에 대해서 알고리즘을 작성해볼까 합니다.\n이진검색은 배열 안에서 중간 값을 기준으로 계속 나누어 근사 값으로 찾아가는 알고리즘입니다.</p>\n<h2 id=\"1-contents\"><a href=\"#1-contents\" aria-label=\"1 contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Contents</h2>\n<p>이진 검색 알고리즘(binary search algorithm)은 오름차순으로 정렬된 리스트에서 특정한 값의 위치를 찾는 알고리즘입니다.</p>\n<p>처음 중간의 값을 임의의 값으로 선택하여, 그 값과 찾고자 하는 값의 크고 작음을 비교하는 방식을 채택하고 있습니다.  <strong>처음 선택한 중앙값이 만약 찾는 값보다 크면 그 값은 새로운 최고값이 되며, 작으면 그 값은 새로운 최하값이 된다.</strong></p>\n<ul>\n<li>\n<p>주의사항</p>\n<ul>\n<li>검색 원리상 정렬된 리스트에만 사용이 가능하다,</li>\n</ul>\n</li>\n<li>\n<p>특징</p>\n<ul>\n<li>검색이 반복될 때마다 목표값을 찾을 확률은 두 배가 되므로 속도가 빠릅니다.</li>\n</ul>\n</li>\n<li>\n<p>시간 복잡도</p>\n<ul>\n<li>O(log n)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"2-code\"><a href=\"#2-code\" aria-label=\"2 code permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Code</h2>\n<ol>\n<li>\n<p>While을 사용하여 이진탐색 만들어보기</p>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> arr <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> binarySearch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">arr<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">let</span> mid<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> arr<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ol>\n<p>  while (min &#x3C;= max) {\n// floor을 쓰는 이유는 배열의 index가 0으로 시작하여 내림으로 값을 구해준다.\nmid = Math.floor((min + max) / 2);\nlet result = arr[mid];\nif (result === value) {\nreturn mid;\n}\n// mid에 1을 더해주는 이유는 배열의 index는 0에서 시작하여 원래 길이의 값은 다시 1을 더해주어야 한다.\nif (result &#x3C; value) {\nmin = mid + 1;\n}\nif (result > value) {\nmax = mid - 1;\n}\n}\nreturn -1;\n});</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">## 3. Outro\n이진 탐색은 기본적으로 n의 개수를 줄여나감으로써 시간 복잡도를 개선해나가는 알고리즘입니다. 대부분의 탐색은 해당 값의 위치를 알고 있으면 이를 줄여나갈 수 있습니다. 하지만, 값을 알지 못할 때에는 확률적으로 이를 줄여나가는 방법밖에 없는데, 이진탐색이 이를 기본적으로 이용하는 알고리즘이라고 할 수 있습니다.\n\n다음에는 **이진 탐색 트리 알고리즘**을 알아보겠습니다.\n\n## 4. References\n- [Wiki - 이진탐색 알고리즘](https://ko.wikipedia.org/wiki/%EC%9D%B4%EC%A7%84_%EA%B2%80%EC%83%89_%EC%95%8C%EA%B3%A0%EB%A6%AC%EC%A6%98)</code></pre></div>","fields":{"slug":"algorithm-javascript-binary-search-이진탐색-algorithm"},"frontmatter":{"title":"[Algorithm/Javascript] Binary Search(이진탐색) Algorithm","author":"Seolhun","subTitle":"","banner":"/assets/covers/js.png","category":"Algorithm","tags":["Algorithm","Javascript","Search","Binary"],"date":"2018.04.05"},"timeToRead":1}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"algorithm-javascript-binary-search-이진탐색-algorithm","prev":{"excerpt":"이번에는 알고리즘을 풀면서 시간복잡도를 표기하는 Big-O 표기법에 대해 잘 알지 못해 이를 정리해보고자 합니다. Intro 개발자들을 면접보는 방법에는 여러가지가 있습니다. 그 중 가장 보편적인 것은 알고리즘 풀기 간단한 프로젝트 만들기 위…","html":"<p>이번에는 알고리즘을 풀면서 시간복잡도를 표기하는 Big-O 표기법에 대해 잘 알지 못해 이를 정리해보고자 합니다.</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>개발자들을 면접보는 방법에는 여러가지가 있습니다. 그 중 가장 보편적인 것은</p>\n<ol>\n<li>알고리즘 풀기</li>\n<li>간단한 프로젝트 만들기</li>\n</ol>\n<p>위 2가지 일 것입니다. 그 중에서도 더 선호되고 보편적으로 사용되는 방법은 알고리즘 풀기입니다. 알고리즘을 풀어봄으로써 <code class=\"language-text\">문제해결 능력</code>, <code class=\"language-text\">코드 작성습관</code> 등에 대한 개발적인 성향을 더 잘 파악할 수 있기 때문입니다. 어떻게 보면 스타트업들은 당장의 서비스를 개발해야하는 부분들이 많아 알고리즘 보다 서비스 개발능력 및 이해도를 많이 볼 수도 있습니다. 하지만, 대기업이나, 이미 CachCow가 있는 기업들은 기존의 코드에서 나오는 기술 부채들을 청산하기 위해 리팩토링 및 새로운 기술 도입, 알고리즘 변경 등이 보편적으로 많이 선택됩니다. 이러한 부분에서 필요한 것이 알고리즘 능력이라고 볼 수 있습니다.</p>\n<p>그렇다면, 알고리즘을 더 좋게 만들려면 무엇을 알아야 할까요? 알고리즘은 결국 수학처럼 0, 1처럼 조건에 부합하여 문제를 해결해야합니다. 그리고, 다음으로 더 빠른 해결책을 찾아야 합니다. 이를 위해 필요한 것이 바로 <code class=\"language-text\">시간 복잡도</code>입니다. 즉, 시간 복잡도란, 일정한 조건에서 해당 코드가 얼마나 빠른지를 판단할 수 있는 기준이 되는 것입니다. 다음으로 <code class=\"language-text\">공간 복잡도</code>입니다. 얼마나 많은 메모리를 차지하는가 입니다.</p>\n<p>그렇다면 우리가 알아야 할 시간 복잡도는 어떻게 알 수 있을까요? 간단하게 시간 복잡도를 계산하는 방법을 알아보겠습니다.</p>\n<h2 id=\"contents\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<ul>\n<li>\n<p>알고리즘 시간 복잡도 표기법 3가지 표기법</p>\n<ul>\n<li>최상의 경우 : 오메가 표기법 (Big-Ω Notation)</li>\n<li>최악의 경우 : 빅오 표기법 (Big-O Notation)</li>\n<li>평균의 경우 : 세타 표기법 (Big-θ Notation)</li>\n</ul>\n</li>\n</ul>\n<p>가장 보편적으로 사용되는 것은 <code class=\"language-text\">Big-O 표기법</code>입니다.\nBig-O 표기법은 계수와 낮은 차수의 항을 제외시키는 방법입니다(ex: 2n²-2n+2 > O(n2)로 표기). 이런 방식으로 표현할 때, (예를 들면, 입력 크기를 무한대로 입력하여) 시간복잡도를 점근적으로 묘사한다고 말한다.</p>\n<p>Big-O 표기법 개발자들에게 최악의 경우가 중요하다는 의미를 내포하고 있어 최악의 경우를 대비하여 속도를 개선하는 것이 중요함을 알 수 있습니다.\n그 중, Big-O 표현식에 가장 큰 영향을 미치는 것은 조건 Input의 n(개수)의 단위입니다. 주어진 Input의 개수를 의미하는 n을 기반으로 명령어들의 연산이 몇번이나 실행됬는지를 숫자로 표시하는 것입니다.</p>\n<h4 id=\"--big-o-notation\"><a href=\"#--big-o-notation\" aria-label=\"  big o notation permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- Big-O Notation?</h4>\n<blockquote>\n<p>Big-O notation is a way of converting the overall steps of an algorithm into algebraic terms, then excluding lower order constants and coefficients that don’t have that big an impact on the overall complexity of the problem.</p>\n</blockquote>\n<sub>\n    <img src='/images/contents/20180404/algo/Big-O.jpg' width='100%' height='100%'>\n    - [Big-O.jpg](https://joshuajangblog.wordpress.com/2016/09/21/time_complexity_big_o_in_easy_explanation/)\n</sub>\n<h4 id=\"--대표적인-시간-복잡도\"><a href=\"#--%EB%8C%80%ED%91%9C%EC%A0%81%EC%9D%B8-%EC%8B%9C%EA%B0%84-%EB%B3%B5%EC%9E%A1%EB%8F%84\" aria-label=\"  대표적인 시간 복잡도 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>- 대표적인 시간 복잡도</h4>\n<ol>\n<li>O(1) – 상수 시간 : 입력값 n 이 주어졌을 때, 알고리즘이 문제를 해결하는데 오직 한 단계만 거칩니다.</li>\n<li>O(log n) – 로그 시간 : 입력값 n 이 주어졌을 때, 문제를 해결하는데 필요한 단계들이 연산마다 특정 요인에 의해 줄어듭니다.</li>\n<li>O(n) – 직선적 시간 : 문제를 해결하기 위한 단계의 수와 입력값 n이 1:1 관계를 가집니다.</li>\n<li>O(n^2) – 2차 시간 : 문제를 해결하기 위한 단계의 수는 입력값 n의 제곱입니다.</li>\n<li>O(C^n) – 지수 시간 : 문제를 해결하기 위한 단계의 수는 주어진 상수값 C 의 n 제곱입니다.</li>\n</ol>\n<h5 id=\"1-o1constant-time-상수-시간\"><a href=\"#1-o1constant-time-%EC%83%81%EC%88%98-%EC%8B%9C%EA%B0%84\" aria-label=\"1 o1constant time 상수 시간 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. O(1) — CONSTANT TIME (상수 시간)</h5>\n<ul>\n<li>값을 검색할 때, 객체에서 Key를 알거나 배열에서 Index를 알고 있으면 언제나 한 단계만 걸립니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> findNumber <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">num</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> array<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"2-olog-nlogarithmic-time-로그-시간\"><a href=\"#2-olog-nlogarithmic-time-%EB%A1%9C%EA%B7%B8-%EC%8B%9C%EA%B0%84\" aria-label=\"2 olog nlogarithmic time 로그 시간 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. O(LOG n) — LOGARITHMIC TIME (로그 시간)</h5>\n<ul>\n<li>n의 개수가 늘어나면, n이 늘어난 개수보다 조금 더 연산량이 증가하고 2배를 넘지 않습니다.</li>\n<li>\n<p>배열에서 값을 찾을 때, 어느 쪽에서 시작할지를 알고 있으면 검색하는 시간이 두배로 줄어듭니다.</p>\n<ul>\n<li>ex) Binary Search</li>\n</ul>\n</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6</span> <span class=\"token punctuation\">,</span><span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> binarySearch <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array<span class=\"token punctuation\">,</span> value</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> min <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">let</span> max <span class=\"token operator\">=</span> array<span class=\"token punctuation\">.</span>length <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>min <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        guess <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">floor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>min <span class=\"token operator\">+</span> max<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>guess<span class=\"token punctuation\">]</span> <span class=\"token operator\">===</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> guess<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>guess<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            min <span class=\"token operator\">=</span> guess <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t        max <span class=\"token operator\">=</span> guess <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> guess<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"3-on²quadratic-time\"><a href=\"#3-on%C2%B2quadratic-time\" aria-label=\"3 on²quadratic time permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. O(n²) — Quadratic Time</h5>\n<ul>\n<li>중복된 반복문을 사용했을 때 걸리는 시간을 의미합니다, n의 개수의 최악 n^2 연산량을 요구합니다.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"tsx\"><pre class=\"language-tsx\"><code class=\"language-tsx\"><span class=\"token keyword\">const</span> nestedLoopFunction <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">array</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> sum_array <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> j <span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sum_array<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> array<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> sum_array<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h5 id=\"4-o2nexponential-time-지수-시간\"><a href=\"#4-o2nexponential-time-%EC%A7%80%EC%88%98-%EC%8B%9C%EA%B0%84\" aria-label=\"4 o2nexponential time 지수 시간 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. O(2^n) — EXPONENTIAL TIME (지수 시간)</h5>\n<ul>\n<li>\n<p>지수 시간은 보통 문제를 풀기 위해 모든 조합과 방법을 시도할 때 사용됩니다.</p>\n<ul>\n<li>ex) 길이가 n인 비밀번호를 찾아야 할 경우</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>이번 시간을 통해 <code class=\"language-text\">시간 복잡도</code>를 간단하게 공부해보았습니다. 알고리즘을 풀면서 시간 복잡도를 계산하는 훈련을 하는 것은 상당히 좋은 훈련으로 보입니다. 왜냐하면, 지금 제가 프로그래밍 하는 알고리즘에 대한 절차를 생각하며 이해하고 있다는 방증이기도 하기 때문입니다. 간단하게 작성된 글이고, 좋은 글들을 참조하여 작성된 글로서 다른 분들에게도 도움이 되기를 바랍니다.</p>\n<p>앞으로 개인적으로도 알고리즘을 풀어볼 때마다 시간 복잡도를 개선하기 위한 사고로 알고리즘을 접근해볼까 합니다. 그리고, 앞으로 작성 될 알고리즘 관련 내용에 시간복잡도도 계산하여 공유하도록 노력하겠습니다.\n감사합니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://ko.wikipedia.org/wiki/%EC%8B%9C%EA%B0%84_%EB%B3%B5%EC%9E%A1%EB%8F%84\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Wiki - 시간복잡도</a></li>\n<li><a href=\"https://medium.freecodecamp.org/time-is-complex-but-priceless-f0abd015063c\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Medium - Algorithms in plain English: time complexity and Big-O notation</a></li>\n</ul>","id":"0b79e76d-78c2-5b7a-a4e7-f0e42f102ea4","fields":{"slug":"algorithm-알고리즘을-위한-시간복잡도-계산-방법-big-o-표기"},"frontmatter":{"title":"[Algorithm] 알고리즘을 위한 시간복잡도 계산 방법 - Big-O 표기","date":"2018-04-05T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/algorithm.jpeg","category":"Algorithm","tags":["Algorithm","Big-O"]},"timeToRead":4},"next":{"excerpt":"이번에는 Javascript에 Bit Operators를 이용하여 다양한 예제를 만들어볼까 합니다. 예를들어, * 이용하지 않고 곱셈하기, 외로운 수 찾기 알고리즘 등을 풀어볼까 합니다.\n더 좋은 내용과 참고사항 있으시면 알려주세요. :) Intro…","html":"<p>이번에는 Javascript에 Bit Operators를 이용하여 다양한 예제를 만들어볼까 합니다. 예를들어, * 이용하지 않고 곱셈하기, 외로운 수 찾기 알고리즘 등을 풀어볼까 합니다.\n더 좋은 내용과 참고사항 있으시면 알려주세요. :)</p>\n<h2 id=\"intro\"><a href=\"#intro\" aria-label=\"intro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Intro</h2>\n<p>알고리즘을 풀다보면 비트연산으로 풀어야 하는 경우가 발생합니다. 특히, 기본에 충실한 간단한 알고리즘들이 대부분 비트연산자로 풀어야 하는 경우가 많습니다. 이럴 경우를 대비하여 비트 연산자를 이해하는 시간을 가져볼까 합니다.</p>\n<p>비트 연산자를 들어가기에 앞서 <code class=\"language-text\">논리 연산자</code>와 <code class=\"language-text\">조건부 논리연산자</code>를 간단하게 정리해볼까 합니다. 저 또한 준비하면서 알게된 내용이었으며 들어가기 전에 보는 것이 논리 연산자를 이해하는데 큰 도움이 될 것이라고 생각합니다.</p>\n<h4 id=\"논리-연산자-vs-조건부-논리연산자란\"><a href=\"#%EB%85%BC%EB%A6%AC-%EC%97%B0%EC%82%B0%EC%9E%90-vs-%EC%A1%B0%EA%B1%B4%EB%B6%80-%EB%85%BC%EB%A6%AC%EC%97%B0%EC%82%B0%EC%9E%90%EB%9E%80\" aria-label=\"논리 연산자 vs 조건부 논리연산자란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>논리 연산자 vs 조건부 논리연산자란?</h4>\n<p><code class=\"language-text\">&amp; 와 | 는 논리 연산자 Logical Operator</code>라고 부르며 <code class=\"language-text\">&amp;&amp; 와 ||는 조건부 논리 연산자 Conditional Logical Operator</code>라고 부릅니다.</p>\n<h4 id=\"차이점은\"><a href=\"#%EC%B0%A8%EC%9D%B4%EC%A0%90%EC%9D%80\" aria-label=\"차이점은 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>차이점은?</h4>\n<ol>\n<li>\n<p>조건부 연산자의 경우 앞의 조건을 만족하면 뒤의 조건들은 연산하지 않습니다.</p>\n<ul>\n<li>예를 들어, AND는 둘다 1일 경우 1을 출력하는 연산자입니다. 조건부 논리 연산자의 경우는 false가 앞에 나온 경우 1이 나오지 않기 때문에 다음 조건을 확인하지 않고 바로 0을 출력합니다. 하지만, 논리 연산자는 다음 값도 전부 확인하여 결과 값을 출력합니다. 모두 검증해야 할 이유가 없다면 조건부 논리 연산을 사용하는 것이 효율적입니다.</li>\n</ul>\n</li>\n<li>\n<p>비트 연산자는 비트 값을 결과 값을 기준으로 결과 출력합니다.</p>\n<ul>\n<li>논리 연산자는 비트 0과 1을 출력하는 반면, 조건부 논리연산자는 boolean 값을 결과 값으로 출력합니다.</li>\n</ul>\n</li>\n</ol>\n<p>간단한 예제를 보면 이해하기 수월할 것입니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// 1. 논리 연산자</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\n\n<span class=\"token comment\">// 2. 조건부 논리 연산자</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// true</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h2 id=\"contents\"><a href=\"#contents\" aria-label=\"contents permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Contents</h2>\n<h4 id=\"비트-연산자란\"><a href=\"#%EB%B9%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90%EB%9E%80\" aria-label=\"비트 연산자란 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>비트 연산자란?</h4>\n<ul>\n<li>비트 연산자는 피연산자를 10진수나 16진수, 8진수로 다루지 않고 <code class=\"language-text\">32개의 비트 집합을 기준으로 연산합니다.</code> 예를 들어, 10진수 9는 2진수로 1001입니다.</li>\n<li><code class=\"language-text\">비트 연산자는 2진수 표현으로 연산</code>을 하지만, 반환값은 Javascript 표준 수 값으로 반환합니다.</li>\n</ul>\n<h5 id=\"1-비트-and\"><a href=\"#1-%EB%B9%84%ED%8A%B8-and\" aria-label=\"1 비트 and permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 비트 AND</h5>\n<ul>\n<li>a &#x26; b</li>\n<li>두 피연산자의 대응되는 비트가 모두 1이면 1을 반환.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">&amp;</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<h5 id=\"2-비트-or\"><a href=\"#2-%EB%B9%84%ED%8A%B8-or\" aria-label=\"2 비트 or permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 비트 OR</h5>\n<ul>\n<li>a | b</li>\n<li>두 피연산자의 대응되는 비트에서 둘 중 하나가 1이거나 모두 1인 경우 1을 반환.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">|</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<h5 id=\"3-비트-xor\"><a href=\"#3-%EB%B9%84%ED%8A%B8-xor\" aria-label=\"3 비트 xor permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 비트 XOR</h5>\n<ul>\n<li>a ^ b</li>\n<li>두 피연산자의 대응되는 비트에서 둘 중 하나가 1이고, 둘 다 1이나 0이 아닐 경우 1을 반환.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">^</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span> <span class=\"token operator\">^</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">^</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span> <span class=\"token operator\">^</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span></code></pre></div>\n<ul>\n<li><code class=\"language-text\">외로운 수 찾기</code>에서 XOR 비트 연산자를 이용하여 쉽게 계산할 수 있습니다.</li>\n<li>ex) const array = [1, 1, 3, 4, 4, 5, 5, 6, 6]에서 3을 찾는 문제.</li>\n</ul>\n<h5 id=\"4-비트-not\"><a href=\"#4-%EB%B9%84%ED%8A%B8-not\" aria-label=\"4 비트 not permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 비트 NOT</h5>\n<ul>\n<li>~ a</li>\n<li>피연산자의 비트를 뒤집음.</li>\n</ul>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n        10진 값\n    </th>\n    <th>\n        초기 이진 값\n    </th>\n    <th>\n        식\n    </th>\n    <th>\n        연산 후 이진 값\n    </th>\n  </tr>\n  <tr>\n    <td>\n        5\n    </td>\n    <td>\n        00000000 00000000 00000000 00000101\n    </td>\n    <td>\n        ~ 5\n    </td>\n    <td>\n        11111111 11111111 11111111 11111010\n    </td>\n  </tr>\n  <tr>\n    <td>\n        -6\n    </td>\n    <td>\n        11111111 11111111 11111111 11111010\n    </td>\n    <td>\n        ~ 5\n    </td>\n    <td>\n        00000000 00000000 00000000 00000101\n    </td>\n  </tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -6</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span> <span class=\"token operator\">-</span><span class=\"token number\">6</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 5</span></code></pre></div>\n<h4 id=\"5-비트-왼쪽code-classlanguage-textltltcode-시프트-연산자\"><a href=\"#5-%EB%B9%84%ED%8A%B8-%EC%99%BC%EC%AA%BDcode-classlanguage-textltltcode-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"5 비트 왼쪽code classlanguage textltltcode 시프트 연산자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 비트 왼쪽(<code class=\"language-text\">&lt;&lt;</code>) 시프트 연산자</h4>\n<ul>\n<li>a &#x3C;&#x3C; b</li>\n<li>a의 2진수 표현을 b 비트만큼 왼쪽으로 이동함. 오른쪽은 0으로 채움.</li>\n</ul>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n        보수 이진수\n    </th>\n    <th>\n        식\n    </th>\n    <th>\n        이동 후 보수 이진수\n    </th>\n  </tr>\n  <tr>\n    <td>\n        00000101\n    </td>\n    <td>\n        5 << 2\n    </td>\n    <td>\n        00010100\n    </td>\n  </tr>\n  <tr>\n    <td>\n        11110010\n    </td>\n    <td>\n        -14 << 2\n    </td>\n    <td>\n        11001000\n    </td>\n  </tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 20</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">14</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -56</span></code></pre></div>\n<h4 id=\"6---비트-오른쪽code-classlanguage-textgtgtcode-시프트-연산자\"><a href=\"#6---%EB%B9%84%ED%8A%B8-%EC%98%A4%EB%A5%B8%EC%AA%BDcode-classlanguage-textgtgtcode-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"6   비트 오른쪽code classlanguage textgtgtcode 시프트 연산자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. - 비트 오른쪽(<code class=\"language-text\">&gt;&gt;</code>) 시프트 연산자</h4>\n<ul>\n<li>a >> b</li>\n<li>a의 2진수 표현을 b 비트만큼 오른쪽으로 이동함. 오른쪽 남는 비트는 버림.</li>\n</ul>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n        보수 이진수\n    </th>\n    <th>\n        식\n    </th>\n    <th>\n        이동 후 보수 이진수\n    </th>\n  </tr>\n  <tr>\n    <td>\n        00000101\n    </td>\n    <td>\n        5 >> 2\n    </td>\n    <td>\n        00000001\n    </td>\n  </tr>\n  <tr>\n    <td>\n        11110010\n    </td>\n    <td>\n        -14 >> 2\n    </td>\n    <td>\n        11111100\n    </td>\n  </tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">14</span> <span class=\"token operator\">>></span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// -4</span></code></pre></div>\n<h5 id=\"7---0으로-채우는-비트-오른쪽code-classlanguage-textgtgtgtcode-시프트-연산자\"><a href=\"#7---0%EC%9C%BC%EB%A1%9C-%EC%B1%84%EC%9A%B0%EB%8A%94-%EB%B9%84%ED%8A%B8-%EC%98%A4%EB%A5%B8%EC%AA%BDcode-classlanguage-textgtgtgtcode-%EC%8B%9C%ED%94%84%ED%8A%B8-%EC%97%B0%EC%82%B0%EC%9E%90\" aria-label=\"7   0으로 채우는 비트 오른쪽code classlanguage textgtgtgtcode 시프트 연산자 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. - 0으로 채우는 비트 오른쪽(<code class=\"language-text\">&gt;&gt;&gt;</code>) 시프트 연산자</h5>\n<ul>\n<li>a >>> b</li>\n<li>a의 2진수 표현을 b 비트만큼 오른쪽으로 이동함. 오른쪽 남는 비트는 버리고, 왼쪽은 0으로 채움.</li>\n</ul>\n<table class=\"table table-dark text-center\">\n  <tr>\n    <th>\n        10진 값\n    </th>\n    <th>\n        초기 이진 값\n    </th>\n    <th>\n        식\n    </th>\n    <th>\n        연산 후 이진 값\n    </th>\n  </tr>\n  <tr>\n    <td>\n        5\n    </td>\n    <td>\n        00000000 00000000 00000000 00000000\n    </td>\n    <td>\n        5 >>> 3\n    </td>\n    <td>\n        11111111 11111111 11111111 11111010\n    </td>\n  </tr>\n  <tr>\n    <td>\n        -14\n    </td>\n    <td>\n        11111111 11111111 11111111 11110010\n    </td>\n    <td>\n        -14 >>> 2\n    </td>\n    <td>\n        00011111 11111111 11111111 11111110\n    </td>\n  </tr>\n</table>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span> <span class=\"token operator\">>>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 0</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">14</span> <span class=\"token operator\">>>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 536870910</span></code></pre></div>\n<h2 id=\"outro\"><a href=\"#outro\" aria-label=\"outro permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Outro</h2>\n<p>비트에 대한 이해를 하면 할수록 컴퓨터에 대한 연산을 이해하기 쉽습니다. 특히, 이번 비트 연산자들을 통해 간단하게 비트관련한 정보를 숙지할 수 있었으며, 프로그래밍 간 숫자들이 어떻게 비트로 구성되었는지를 간단하게 체험하는데 좋은 시간이 되었습니다. 이와 관련한 알고리즘과 비트관련 된 좋은 정보를 더 조사하여 다음시간에 공유하겠습니다.</p>\n<h2 id=\"references\"><a href=\"#references\" aria-label=\"references permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>References</h2>\n<ul>\n<li><a href=\"https://developer.mozilla.org/ko/docs/Web/Javascript/Guide/Obsolete_Pages/Core_Javascript_1.5_Guide/Operators/Bitwise_Operators\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla - Bitwise_Operators</a></li>\n<li><a href=\"https://docs.microsoft.com/ko-kr/scripting/javascript/reference/unsigned-right-shift-operator-decrement-javascript\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Microsoft - BitOperators</a></li>\n</ul>","id":"ffe6a977-3572-5d4f-a48a-d503737837e9","fields":{"slug":"algorithm-javascript-비트연산자를-이용하여-간단한-알고리즘-및-예제-만들어보기"},"frontmatter":{"title":"[Algorithm/Javascript] 비트연산자를 이용하여 간단한 알고리즘 및 예제 만들어보기","date":"2018-04-05T00:00:00.000Z","author":"Seolhun","subTitle":"","banner":"/assets/covers/js.png","category":"Algorithm","tags":["Algorithm","Javascript","Bit","Operators"]},"timeToRead":6}}}}
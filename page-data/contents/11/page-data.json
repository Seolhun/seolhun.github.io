{"componentChunkName":"component---src-templates-blog-tsx","path":"/contents/11","webpackCompilationHash":"f5ffc0169e9a43b261a9","result":{"data":{"allMarkdownRemark":{"totalCount":66,"edges":[{"node":{"fields":{"slug":"javascript-typescript-promise에-대해서-알아보고-예제-작성하기-1"},"frontmatter":{"title":"[Javascript/Typescript] Promise에 대해서 알아보고 예제 작성하기 - 1","date":"2018.03.12","category":"Typescript","tags":["Promise","Async"],"banner":"/assets/covers/js.png"},"excerpt":"Typescript 환경에서 Promise 사용법을 알아보고 테스트코드를 작성해보고자 합니다. 문제가 되는 부분이나, 도움이 되는 것을 알려주시면 감사합니다. Intro 첫 시작을 Java 개발자로 시작하여, Javascript에서 Promise개념을 처음 사용할 때에는 상당히 어렵게 느껴졌습니다. 특히, jQuery 라이브러리를 이용하면서 Promise와 비슷한 jQuery, Defferred를 사용하고 멘붕을 겪었습니다. Promise가 어려웠던 점은 아마 기존 Java의 환경에서 Script…","timeToRead":6}},{"node":{"fields":{"slug":"typescript-namespace란"},"frontmatter":{"title":"[Typescript] Namespace란?","date":"2018.03.08","category":"Typescript","tags":["Javascript","Typescript","Namespace","Declare","Module"],"banner":"/assets/covers/typescript.png"},"excerpt":"Typescript의 라이브러리 모듈을 사용하다보면은 namespace를 자주 접하게 됩니다. 해당 module을 만들 수 있도록 도와주는 namespace에 대해 간단히 공부했습니다. Overview 는 일정양의 코드를 조직화할 때 사용합니다. 이를 조직화하여 로 만드는 것이 주 목적입니다. 코드 묶음에 이름을 부여하여 해당 이름을 통해 어디서든 접근할 수 있게 만드는 것입니다. 어디서든 접근하기를 만들기 위해서는 처럼 namespace를 을 해주어야 합니다. Examples - Singlefile - Not using…","timeToRead":3}},{"node":{"fields":{"slug":"javascript-typescript-module-pattern이란"},"frontmatter":{"title":"[Javascript/Typescript] Module Pattern이란?","date":"2018.03.05","category":"Javascript","tags":["Javascript","Typescript","Module","Pattern"],"banner":"/assets/covers/js.png"},"excerpt":"Module Pattern을 공부하면서 Module Javascript의 new에 대한 개념을 더 정확히 알아야된다고 생각하여 작성하게 되었습니다. Intro 모듈 패턴은 전통적인 소프트웨어 공학에서 클래스 사용에 private 과 public 으로 나뉜 캡슐화를 제공하는 방법입니다.\n자바스크립트에서의 모듈 패턴은 전역 영역에서 특정 변수영역을 보호하기 위해 단일 객체 안의 public/private…","timeToRead":3}},{"node":{"fields":{"slug":"javascript-typescript-prototype이란"},"frontmatter":{"title":"[Javascript/Typescript] Prototype이란?","date":"2018.03.05","category":"Javascript","tags":["Prototype","Javascript","Typescript","Class","Module"],"banner":"/assets/covers/js.png"},"excerpt":"Typescript의 Class를 사용하면서 Javascript의 Prototype에 대한 개념이 중요할 것으로 판단했습니다. 그리고, Javascript의 Module Pattern을 공부하면서 Typescript의 접근제한자 개념이 어떻게 작동되는지에 대해서 알아보고자 합니다. Prototype Link와 Prototype Object 자바스크립트에는 Prototype Link 와 Prototype Object라는 것이 존재합니다. 그리고 이 둘을 통틀어 Prototype…","timeToRead":4}},{"node":{"fields":{"slug":"jenkins-ci-continuous-integration-with-jenkins-and-github-알아보고-예제-작성하기-1"},"frontmatter":{"title":"[Jenkins/CI] Continuous Integration with Jenkins and Github 알아보고 예제 작성하기 - 1","date":"2018.03.02","category":"Jenkins","tags":["CI","Jenkins","Test","Pipeline","Devops"],"banner":"/assets/covers/jenkins.png"},"excerpt":"Continuous Integration doesn’t get rid of bugs, but it does make them dramatically easier to find and remove. - Martin Fowler CI 툴을 이용한다는 것은 위 인용한 글 처럼, 손 쉽게 버그를 찾고 제거하기 위함일 것입니다. 이를 위한 CI 과정과 Jenkins 예제코드를 알아보겠습니다. Pre-Requirement Ubuntu 16.04 다른 운영체제도 상관없지만 이번 포스트 내용은 Ubuntu 16.0…","timeToRead":20}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"limit":5,"skip":50,"totalPages":14,"currentPage":11}}}
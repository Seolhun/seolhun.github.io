{"version":3,"sources":["webpack:///./src/templates/Post.tsx"],"names":["PostContent","marginTop","color","theme","fonts","COLOR","primaryColor","postQuery","PostPage","data","pathContext","prev","next","post","markdownRemark","timeToRead","fields","frontmatter","tags","title","date","category","html","postPath","slug","postNode","isPostSEO","substring","xs","type","weight","isHighlight","to","kebabcase","dangerouslySetInnerHTML","__html","map","tag","i","key","length"],"mappings":"kTAkCMA,EAAc,yCAAgC,kBAAgB,CAClEC,UAAW,OACXC,MAFkD,EAAGC,MAExCC,MAAMC,MAAMC,iBA+EdC,EAAY,aAsBVC,UAlG2B,SAAC,GAA0B,IAAxBC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,YACzCC,EAAeD,EAAfC,KAAMC,EAASF,EAATE,KACRC,EAAOJ,EAAKK,eAEhBC,EASEF,EATFE,WACAC,EAQEH,EARFG,OALiE,EAa/DH,EAPFI,YACEC,EAP+D,EAO/DA,KACAC,EAR+D,EAQ/DA,MACAC,EAT+D,EAS/DA,KACAC,EAV+D,EAU/DA,SAEFC,EACET,EADFS,KASF,OACE,YAAC,IAAD,KACGT,GACC,8BACE,YAAC,IAAD,CAAKU,SAAUP,EAAOQ,KAAMC,SAAUZ,EAAMa,WAAS,IACrD,YAAC,SAAD,CAAQP,MAAUA,EAAMQ,UAAU,EAAG,IAAxB,QACb,YAAC,IAAD,KACE,YAAC,IAAD,KACE,YAAC,IAAD,CAAKC,GAAI,IACP,YAAC,IAAD,KACE,YAAC,IAAD,CAAMC,KAAK,KAAKC,OAAQ,IAAKC,aAAW,GACrCZ,GAGH,YAAC,IAAD,CAAMU,KAAK,QAAQC,OAAQ,KACxBV,EACA,IAFH,IAIML,EAJN,cAI6BM,GAAY,OACvC,YAAC,IAAD,CAAQW,GAAE,eAAiBC,IAAUZ,IAAcA,OAK3D,YAAC,IAAD,KACE,YAACrB,EAAD,CAAakC,wBAAyB,CAAEC,OAAQb,MAEjDJ,GACC,YAAC,IAAD,CAAMW,KAAK,SAAX,UAEGX,EAAKkB,KAAI,SAACC,EAAKC,GAAN,OACR,YAAC,IAAD,CAAQC,IAAKD,EAAGN,GAAE,SAAWC,IAAUI,IACrC,YAAC,IAAD,CAAMR,KAAK,SAASQ,GACnB,IACAC,EAAIpB,EAAKsB,OAAS,EAAI,KAAO,QAKtC,YAAC,IAAD,CACE7B,KAAMA,EACNC,KAAMA","file":"component---src-templates-post-tsx-3879c3bf22274777a059.js","sourcesContent":["import React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { graphql } from 'gatsby';\n\nimport styled from '@emotion/styled';\nimport { Col, Container, Row } from '@seolhun/localize-components';\nimport { Typo } from '@seolhun/localize-components-atomic';\nimport { ILocalizeTheme } from '@seolhun/localize-components-styled-types';\n// @ts-ignore\n// eslint-disable-next-line import/no-extraneous-dependencies\n// import { Disqus } from 'gatsby-plugin-disqus';\nimport kebabcase from 'lodash.kebabcase';\n\nimport {\n  MarkdownHTML,\n  PostHeader,\n  PrevNext,\n  SEO,\n  SHLink,\n} from '@/components';\nimport { Layout } from '@/containers';\nimport { PathContext, Post } from '@/models';\n\nimport '@/utils/prismjs-theme.css';\n\n// import siteMetadata from '../../siteMetadata';\n\ninterface PostPageProps {\n  data: {\n    markdownRemark: Post;\n  };\n  pathContext: PathContext;\n}\n\nconst PostContent = styled.div<any, ILocalizeTheme>(({ theme }) => ({\n  marginTop: '4rem',\n  color: theme.fonts.COLOR.primaryColor,\n}));\n\nconst PostPage: React.FC<PostPageProps> = ({ data, pathContext }) => {\n  const { prev, next } = pathContext;\n  const post = data.markdownRemark;\n  const {\n    timeToRead,\n    fields,\n    frontmatter: {\n      tags,\n      title,\n      date,\n      category,\n    },\n    html,\n  } = post;\n\n  // const disqusConfig = {\n  //   url: `${siteMetadata.siteUrl}/contents/${fields.slug}`,\n  //   identifier: fields.slug,\n  //   title,\n  // };\n\n  return (\n    <Layout>\n      {post && (\n        <>\n          <SEO postPath={fields.slug} postNode={post} isPostSEO />\n          <Helmet title={`${title.substring(0, 62)}...`} />\n          <Container>\n            <Row>\n              <Col xs={24}>\n                <PostHeader>\n                  <Typo type=\"h1\" weight={800} isHighlight>\n                    {title}\n                  </Typo>\n\n                  <Typo type=\"small\" weight={500}>\n                    {date}\n                    {' '}\n                    &mdash;\n                    {`${timeToRead} Min read ${category && 'in '}`}\n                    <SHLink to={`/categories/${kebabcase(category)}`}>{category}</SHLink>\n                  </Typo>\n                </PostHeader>\n              </Col>\n            </Row>\n            <MarkdownHTML>\n              <PostContent dangerouslySetInnerHTML={{ __html: html }} />\n            </MarkdownHTML>\n            {tags && (\n              <Typo type=\"small\">\n                Tags: &#160;\n                {tags.map((tag, i) => (\n                  <SHLink key={i} to={`/tags/${kebabcase(tag)}`}>\n                    <Typo type=\"small\">{tag}</Typo>\n                    {' '}\n                    {i < tags.length - 1 ? ', ' : ''}\n                  </SHLink>\n                ))}\n              </Typo>\n            )}\n            <PrevNext\n              prev={prev}\n              next={next}\n            />\n            {/* <Row>\n              <Col xs={24}>\n                <Disqus config={disqusConfig} />\n              </Col>\n            </Row> */}\n          </Container>\n        </>\n      )}\n    </Layout>\n  );\n};\n\nexport const postQuery = graphql`\n  query($slug: String!) {\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      html\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n        author\n        subTitle\n        banner\n        category\n        tags\n        date(formatString: \"YYYY.MM.DD\")\n      }\n      excerpt(pruneLength: 165)\n      timeToRead\n    }\n  }\n`;\n\nexport default PostPage;\n"],"sourceRoot":""}